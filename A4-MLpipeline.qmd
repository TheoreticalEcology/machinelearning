---
output: html_document
editor_options:
  chunk_output_type: console
---

# Machine learning pipeline {#workflow}

## The Standard Machine Learning Pipeline at the example of the Titanic Data set

Before we specialize on any tuning, it is important to understand that machine learning always consists of a pipeline of actions.

The typical machine learning workflow consist of:

-   Data cleaning and exploration (EDA = explorative data analysis) for example with tidyverse.
-   Preprocessing and feature selection.
-   Splitting data set into training and test set for evaluation.
-   Model fitting.
-   Model evaluation.
-   New predictions.

Here is an (optional) video that explains the entire pipeline from a slightly different perspective:

```{r chunk_chapter4_39, eval=knitr::is_html_output(excludes = "epub"), results = 'asis', echo = F}
cat(
  '<iframe width="560" height="315" 
  src="https://www.youtube.com/embed/nKW8Ndu7Mjw"
  frameborder="0" allow="accelerometer; autoplay; encrypted-media;
  gyroscope; picture-in-picture" allowfullscreen>
  </iframe>'
)
```

In the following example, we use tidyverse, a collection of R packages for data science / data manipulation mainly developed by Hadley Wickham. A video that explains the basics can be found here :

```{r chunk_chapter4_40, eval=knitr::is_html_output(excludes = "epub"), results = 'asis', echo = F}
cat(
  '<iframe width="560" height="315" 
  src="https://www.youtube.com/embed/nRtp7wSEtJA"
  frameborder="0" allow="accelerometer; autoplay; encrypted-media;
  gyroscope; picture-in-picture" allowfullscreen>
  </iframe>'
)
```

Another good reference is "**R for data science**" by Hadley Wickham: <a href="https://r4ds.had.co.nz/" target="_blank" rel="noopener"></a>.

For this lecture you need the Titanic data set provided by us. You can find it in GRIPS (datasets.RData in the data set and submission section) or at <a href="http://rhsbio6.uni-regensburg.de:8500" target="_blank" rel="noopener">http://rhsbio6.uni-regensburg.de:8500</a>.

We have split the data set already into training and test/prediction data sets (the test/prediction split has one column less than the train split, as the result is not known a priori).

### Data Cleaning

Load necessary libraries:

```{r chunk_chapter4_41, message=FALSE}
library(tidyverse)
```

Load data set:

```{r chunk_chapter4_42}
library(EcoData)
data(titanic_ml)
data = titanic_ml
```

Standard summaries:

```{r chunk_chapter4_43}
str(data)
summary(data)
head(data)
```

The name variable consists of 1309 unique factors (there are 1309 observations...):

```{r chunk_chapter4_44}
length(unique(data$name))
```

However, there is a title in each name. Let's extract the titles:

1.  We will extract all names and split each name after each comma ",".
2.  We will split the second split of the name after a point "." and extract the titles.

```{r chunk_chapter4_45}
first_split = sapply(data$name,
                     function(x) stringr::str_split(x, pattern = ",")[[1]][2])
titles = sapply(first_split,
                function(x) strsplit(x, ".",fixed = TRUE)[[1]][1])
```

We get 18 unique titles:

```{r chunk_chapter4_46}
table(titles)
```

A few titles have a very low occurrence rate:

```{r chunk_chapter4_47}
titles = stringr::str_trim((titles))
titles %>%
 fct_count()
```

We will combine titles with low occurrences into one title, which we can easily do with the forcats package.

```{r chunk_chapter4_48}
titles2 =
  forcats::fct_collapse(titles,
                        officer = c("Capt", "Col", "Major", "Dr", "Rev"),
                        royal = c("Jonkheer", "Don", "Sir",
                                  "the Countess", "Dona", "Lady"),
                        miss = c("Miss", "Mlle"),
                        mrs = c("Mrs", "Mme", "Ms")
                        )
```

We can count titles again to see the new number of titles:

```{r chunk_chapter4_49}
titles2 %>%  
   fct_count()
```

Add new title variable to data set:

```{r chunk_chapter4_50}
data =
  data %>%
    mutate(title = titles2)
```

As a second example, we will explore and clean the numeric "age" variable.

Explore the variable:

```{r chunk_chapter4_51}
summary(data)
sum(is.na(data$age)) / nrow(data)
```

20% NAs! Either we remove all observations with NAs, or we impute (fill) the missing values, e.g. with the median age. However, age itself might depend on other variables such as sex, class and title. We want to fill the NAs with the median age of these groups. In tidyverse we can easily "group" the data, i.e. we will nest the observations (here: group_by after sex, pclass and title). After grouping, all operations (such as our median(age....)) will be done within the specified groups.

```{r chunk_chapter4_52}
data =
  data %>%
    group_by(sex, pclass, title) %>%
    mutate(age2 = ifelse(is.na(age), median(age, na.rm = TRUE), age)) %>%
    mutate(fare2 = ifelse(is.na(fare), median(fare, na.rm = TRUE), fare)) %>%
    ungroup()
```

### Preprocessing and Feature Selection

Later (tomorrow), we want to use Keras in our example, but it cannot handle factors and requires the data to be scaled.

Normally, one would do this for all predictors, but as we only show the pipeline here, we have sub-selected a bunch of predictors and do this only for them. We first scale the numeric predictors and change the factors with only two groups/levels into integers (this can be handled by Keras).

```{r chunk_chapter4_53}
data_sub =
  data %>%
    select(survived, sex, age2, fare2, title, pclass) %>%
    mutate(age2 = scales::rescale(age2, c(0, 1)),
           fare2 = scales::rescale(fare2, c(0, 1))) %>%
    mutate(sex = as.integer(sex) - 1L,
           title = as.integer(title) - 1L, pclass = as.integer(pclass - 1L))
```

Factors with more than two levels should be **one hot encoded** (Make columns for every different factor level and write 1 in the respective column for every taken feature value and 0 else. For example: $\{red, green, green, blue, red\} \rightarrow \{(0,0,1), (0,1,0), (0,1,0), (1,0,0), (0,0,1)\}$):

```{r chunk_chapter4_54}
one_title = model.matrix(~0+as.factor(title), data = data_sub)
colnames(one_title) = levels(data$title)

one_sex = model.matrix(~0+as.factor(sex), data = data_sub)
colnames(one_sex) = levels(data$sex)

one_pclass = model.matrix(~0+as.factor(pclass), data = data_sub)
colnames(one_pclass) = paste0("pclass", 1:length(unique(data$pclass)))
```

And we have to add the dummy encoded variables to the data set:

```{r chunk_chapter4_55}
data_sub = cbind(data.frame(survived= data_sub$survived),
                 one_title, one_sex, age = data_sub$age2,
                 fare = data_sub$fare2, one_pclass)
head(data_sub)
```

### Split Data

The splitting consists of two splits:

-   An outer split (the original split, remember we got a training and test split without the response "survived").
-   An inner split (we will split the training data set further into another training and test split with known response). The inner split is important to assess the model's performance and potential overfitting.

Outer split:

```{r chunk_chapter4_56}
train = data_sub[!is.na(data_sub$survived),]
test = data_sub[is.na(data_sub$survived),]
```

Inner split:

```{r chunk_chapter4_57}
indices = sample.int(nrow(train), 0.7 * nrow(train))
sub_train = train[indices,]
sub_test = train[-indices,]
```

What is the difference between the two splits? (Tip: have a look at the variable survived.)

### Training

In the next step we will fit a Random Forest on the training data of the inner split:

```{r chunk_chapter4_58}
library(ranger)
model = ranger(survived~., data = sub_train)
```

### Evaluation

We will predict the variable "survived" for the test set of the inner split and calculate the accuracy:

```{r chunk_chapter4_60}
pred =
  model %>%
    predict(data = as.matrix(sub_test[,-1]))

pred = pred$predictions

predicted = ifelse(pred < 0.5, 0, 1) 
observed = sub_test[,1]
(accuracy = mean(predicted == observed))  

# Let's calculate the AUC:
Metrics::auc(observed, pred)
```

### Predictions and Submission

When we are satisfied with the performance of our model in the inner split, we will create predictions for the test data of the outer split. To do so, we take all observations that belong to the outer test split (use the filter function) and remove the survived (NAs) columns:

```{r chunk_chapter4_62}
submit = 
  test %>% 
      select(-survived)
```

We cannot assess the performance on the test split because the true survival ratio is unknown, however, we can now submit our predictions to the submission server at <a href="http://rhsbio7.uni-regensburg.de:8500" target="_blank" rel="noopener">http://rhsbio7.uni-regensburg.de:8500</a>. To do so, we have to transform our survived probabilities into actual 0/1 predictions (probabilities are not allowed) and create a .csv file:

```{r chunk_chapter4_63}
pred = model %>% 
  predict(as.matrix(submit))
```

For the submission it is critical to change the predictions into a data.frame, select the second column (the probability to survive), and save it with the write.csv function:

```{r chunk_chapter4_64, eval=FALSE}
write.csv(data.frame(y = pred[,2] ), file = "Max_1.csv")
```

The file name is used as the ID on the submission server, so change it to whatever you want as long as you can identify yourself.

#### Exercises

::: {.callout-caution icon="false"}
##### Task: Imrove predictions

Play around with the feature engineering and the hyperparameters of the random forest. Try to improve the AUC on the outer split (submission server).
:::

### Hyperparameter optimization

Hyperparameters (configuration parameters of our ML algorithms that (mostly) control their complexity) are usually tuned (optimized) in an automatic / systematic way. A common procedure, called random search, is to sample random configuration combinations from the set of hyperparameters and test for each combination the prediction error.

If we test many different hyperparameter combinations, how do we ensure that a certain hyperparameter is not only good for our training dataset but also good for the new data (our outer split on the submission server)? You may have guessed it already, we need to do another CV within the previous CV to check whether a certain hyperparameter solution generalizes to the whole data.

The "double CV" approach is called nested CV. Let's start with a 3CVx3CV and 10x different mtry values:

```{r}
data_obs = data_sub[!is.na(data_sub$survived),] 
cv = 10
cv_inner = 10
hyper_mtry = seq(4, 13, by = 1)

outer_split = as.integer(cut(1:nrow(data_obs), breaks = cv))

results = data.frame(
  set = rep(NA, cv),
  mtry = rep(NA, cv),
  AUC = rep(NA, cv)
)

for(i in 1:cv) {
  train_outer = data_obs[outer_split != i, ]
  test_outer = data_obs[outer_split == i, ]
  
  # inner split
  for(j in 1:cv_inner) {
    inner_split = as.integer(cut(1:nrow(train_outer), breaks = cv_inner))
    train_inner = train_outer[inner_split != j, ]
    test_inner = train_outer[inner_split == j, ]
    
    tuning_results_inner = 
      sapply(1:length(hyper_mtry), function(k) {
        model = ranger(survived~., data = train_inner, mtry = hyper_mtry[k])
        return(Metrics::auc(test_inner$survived, predict(model, data = test_inner)$predictions))
      })
    best_mtry = hyper_mtry[which.max(tuning_results_inner)]
  }
  model = ranger(survived~., data = train_outer, mtry = best_mtry)
  results[i, 1] = i
  results[i, 2] = best_mtry
  results[i, 3] = Metrics::auc(test_outer$survived, predict(model, data = test_outer)$predictions)
}

print(results)
```

We found different 'good' mtry values. We could now use either the mtry value with the highest AUC, or we could fit now for each value a RF and average the predictions (which will be next task):

::: {.callout-caution icon="false"}
#### Exercise: Which model is better

```{r}
data_new = data_sub[is.na(data_sub$survived),]
```

The task is to make two predictions:

1.  Fit RF on the obs_data with the mtry hyperparameter that has shown the highest AUC

2.  Fit for each mtry which we have found a RF and combine (average) the predictions

Submit both predictions, which approach has a higher AUC?

`r hide("Click here to see the solution for the single model")`

```{r, echo = FALSE}
results[which.max(results$AUC),]
mtry = results[which.max(results$AUC),]$mtry

model = ranger(survived~., data = data_obs, mtry = mtry)
predictions = predict(model, data = data_new)$predictions

write.csv(data.frame(y = predictions), file = "Max_single_model.csv")

```

`r unhide()`

`r hide("Click here to see the solution for ensemble model")`

```{r, echo = FALSE}

prediction_ensemble = 
  sapply(1:nrow(results), function(i) {
    mtry = results[i,]$mtry
    model = ranger(survived~., data = data_obs, mtry = mtry)
    return(predict(model, data = data_new)$predictions)
  })

predictions = apply(prediction_ensemble, 1, mean)

write.csv(data.frame(y = predictions), file = "Max_ensemble_model.csv")

```

`r unhide()`
:::

## Bonus - Machine Learning Pipelines with mlr3 {#mlr}

As we have seen today, many of the machine learning algorithms are distributed over several packages but the general machine learning pipeline is very similar for all models: feature engineering, feature selection, hyperparameter tuning and cross-validation.

The idea of the mlr3 framework is now to provide a general machine learning interface which you can use to build reproducible and automatic machine learning pipelines. The key features of mlr3 are:

-   All common machine learning packages are integrated into mlr3, you can easily switch between different machine learning algorithms.
-   A common 'language'/workflow to specify machine learning pipelines.
-   Support for different cross-validation strategies.
-   Hyperparameter tuning for all supported machine learning algorithms.
-   Ensemble models.

Useful links:

-   <a href="https://mlr3book.mlr-org.com/" target="_blank" rel="noopener">mlr3-book</a> (still in work)
-   <a href="https://mlr3.mlr-org.com/" target="_blank" rel="noopener">mlr3 website</a>
-   <a href="https://cheatsheets.mlr-org.com/mlr3.pdf" target="_blank" rel="noopener">mlr3 cheatsheet</a>

### mlr3 - The Basic Workflow

The mlr3 package actually consists of several packages for different tasks (e.g. mlr3tuning for hyperparameter tuning, mlr3pipelines for data preparation pipes). But let's start with the basic workflow:

```{r chunk_chapter4_65, message=FALSE}
library(EcoData)
library(tidyverse)
library(mlr3)
library(mlr3learners)
library(mlr3pipelines)
library(mlr3tuning)
library(mlr3measures)
data(nasa)
str(nasa)
```

Let's drop time, name and ID variable and create a classification task:

```{r chunk_chapter4_66}
data = nasa %>% select(-Orbit.Determination.Date,
                       -Close.Approach.Date, -Name, -Neo.Reference.ID)
data$Hazardous = as.factor(data$Hazardous)

# Create a classification task.
task = TaskClassif$new(id = "nasa", backend = data,
                       target = "Hazardous", positive = "1")
```

Create a generic pipeline of data transformation (imputation $\rightarrow$ scaling $\rightarrow$ encoding of categorical variables):

```{r chunk_chapter4_67}
set.seed(123)

# Let's create the preprocessing graph.
preprocessing = po("imputeoor") %>>% po("scale") %>>% po("encode") 

# Run the task.
transformed_task = preprocessing$train(task)[[1]]

transformed_task$missings()
```

We can even visualize the preprocessing graph:

```{r chunk_chapter4_68}
preprocessing$plot()
```

Now, to test our model (random forest) 10-fold cross-validated, we will do:

-   Specify the missing target rows as validation so that they will be ignored.
-   Specify the cross-validation, the learner (the machine learning model we want to use), and the measurement (AUC).
-   Run (benchmark) our model.

```{r chunk_chapter4_69__mlr1}
set.seed(123)

transformed_task$data()
transformed_task$set_row_roles((1:nrow(data))[is.na(data$Hazardous)],
                               "holdout")

cv10 = mlr3::rsmp("cv", folds = 10L)
rf = lrn("classif.ranger", predict_type = "prob")
measurement =  msr("classif.auc")
```

```{r chunk_chapter4_70, eval=FALSE}
result = mlr3::resample(transformed_task,
                        rf, resampling = cv10, store_models = TRUE)

# Calculate the average AUC of the holdouts.
result$aggregate(measurement)
```

Very cool! Preprocessing + 10-fold cross-validation model evaluation in a few lines of code!

Let's create the final predictions:

```{r chunk_chapter4_71__mlr2, eval=FALSE}
pred = sapply(1:10, function(i) result$learners[[i]]$predict(transformed_task,
row_ids = (1:nrow(data))[is.na(data$Hazardous)])$data$prob[, "1", drop = FALSE])
dim(pred)
predictions = apply(pred, 1, mean)
```

You could now submit the predictions <a href="http://rhsbio7.uni-regensburg.de:8500" target="_blank" rel="noopener">here</a>.

But we are still not happy with the results, let's do some hyperparameter tuning!

### mlr3 - Hyperparameter Tuning

Machine learning algorithms have a varying number of hyperparameters which can (!) have a high impact on the predictive performance. To list a few hyperparameters:

**Random Forest**

-   mtry
-   Minimal node size

**K-nearest-neighbors classification**

-   Kernel
-   Number of neighbors
-   Distance metric

**Boosted Regression Tree**

-   nrounds
-   Maximum depth
-   alpha
-   booster
-   eta
-   gamma
-   lambda

With mlr3, we can easily extend the above example to do hyperparameter tuning within nested cross-validation (the tuning has its own inner cross-validation).

Print the hyperparameter space of our random forest learner:

```{r chunk_chapter4_72}
rf$param_set
```

Define the hyperparameter space of the random forest:

```{r chunk_chapter4_73__mlr3}
library(paradox)

rf_pars = 
    paradox::ParamSet$new(
      list(paradox::ParamInt$new("min.node.size", lower = 1, upper = 30L),
           paradox::ParamInt$new("mtry", lower = 1, upper = 30L),
           paradox::ParamLgl$new("regularization.usedepth", default = TRUE)))
print(rf_pars)
```

To set up the tuning pipeline we need:

-   Inner cross-validation resampling object.
-   Tuning criterion (e.g. AUC).
-   Tuning method (e.g. random or block search).
-   Tuning terminator (When should we stop tuning? E.g. after $n$ iterations).

```{r chunk_chapter4_74__mlr4}
set.seed(123)

inner3 = mlr3::rsmp("cv", folds = 3L)
measurement =  msr("classif.auc")
tuner =  mlr3tuning::tnr("random_search") 
terminator = mlr3tuning::trm("evals", n_evals = 5L)
rf = lrn("classif.ranger", predict_type = "prob")

learner_tuner = AutoTuner$new(learner = rf, 
                              measure = measurement, 
                              tuner = tuner, 
                              terminator = terminator,
                              search_space = rf_pars,
                              resampling = inner3)
print(learner_tuner)
```

Now we can wrap it normally into the 10-fold cross-validated setup as done previously:

```{r chunk_chapter4_75, eval=FALSE}
set.seed(123)

outer3 = mlr3::rsmp("cv", folds = 3L)
result = mlr3::resample(transformed_task, learner_tuner,
                        resampling = outer3, store_models = TRUE)

# Calculate the average AUC of the holdouts.
result$aggregate(measurement)
```

Yeah, we were able to improve the performance!

Let's create the final predictions:

```{r chunk_chapter4_76, eval=FALSE}
pred = sapply(1:3, function(i) result$learners[[i]]$predict(transformed_task,
row_ids = (1:nrow(data))[is.na(data$Hazardous)])$data$prob[, "1", drop = FALSE])
dim(pred)
predictions = apply(pred, 1, mean)
```

### mlr3 - Hyperparameter Tuning with Oversampling

Let's go one step back, maybe you have noticed that our classes are unbalanced:

```{r chunk_chapter4_77}
table(data$Hazardous)
```

Many machine learning algorithms have problems with unbalanced data because if the imbalance is too strong it is cheaper for the algorithm to focus on only one class (e.g. by predicting only 0s or 1s). You need to keep in mind that machine learning algorithms are greedy and their main focus is to minimize the loss function.

There are few techniques to correct for imbalance:

-   Oversampling (oversample the undersampled class).
-   Undersampling (undersample the oversampled class).
-   SMOTE *Synthetic Minority Over-sampling Technique* (very briefly, we will use a k-nearest-neighbors classification to create new samples around our undersampled class).

Here, we will use oversampling which we can do by extending our random forest learner:

```{r chunk_chapter4_78}
set.seed(123)

rf_over = po("classbalancing", id = "over", adjust = "minor") %>>% rf

# However rf_over is now a "graph",
# but we can easily transform it back into a learner:
rf_over_learner = GraphLearner$new(rf_over)
print(rf_over_learner)
```

The learner has now a new feature space:

```{r chunk_chapter4_79}
rf_over_learner$param_set
```

We can also tune the oversampling rate!

```{r chunk_chapter4_80}
set.seed(123)

rf_pars_over = 
    paradox::ParamSet$new(
      list(paradox::ParamInt$new("over.ratio", lower = 1, upper = 7L),
           paradox::ParamInt$new("classif.ranger.min.node.size",
                                 lower = 1, upper = 30L),
           paradox::ParamInt$new("classif.ranger.mtry", lower = 1,
                                 upper = 30L),
           paradox::ParamLgl$new("classif.ranger.regularization.usedepth",
                                 default = TRUE)))

inner3 = mlr3::rsmp("cv", folds = 3L)
measurement =  msr("classif.auc")
tuner =  mlr3tuning::tnr("random_search") 
terminator = mlr3tuning::trm("evals", n_evals = 5L)

learner_tuner_over = AutoTuner$new(learner = rf_over_learner, 
                                   measure = measurement, 
                                   tuner = tuner, 
                                   terminator = terminator,
                                   search_space = rf_pars_over,
                                   resampling = inner3)
print(learner_tuner)
```

```{r chunk_chapter4_81, eval=FALSE}
set.seed(123)

outer3 = mlr3::rsmp("cv", folds = 3L)
result = mlr3::resample(transformed_task, learner_tuner_over,
                        resampling = outer3, store_models = TRUE)

# Calculate the average AUC of the holdouts.
result$aggregate(measurement)
```

5 iterations in the hyperspace is not very much...

Let's create the final predictions:

```{r chunk_chapter4_82, eval=FALSE}
pred = sapply(1:3, function(i) result$learners[[i]]$predict(transformed_task,
row_ids = (1:nrow(data))[is.na(data$Hazardous)])$data$prob[, "1", drop = FALSE])
dim(pred)
predictions = apply(pred, 1, mean)
```

```{=html}
  <hr/>
  <strong><span style="color: #0011AA; font-size:18px;">Optional bonus task</span></strong><br/>
```
After reading the above chapter about the mlr package, try to transfer it to the titanic data set (use the titanic_ml data set, this has already NAs for the values to predict). Alternatively, you can also use other data sets from our challenge (e.g. the plant-pollinator data set, see the data set chapter \@ref(datasets)).

```{=html}
  <details>
    <summary>
      <strong><span style="color: #0011AA; font-size:18px;">Solution</span></strong>
    </summary>
    <p>
```
```{r chunk_chapter4_task_45, message=FALSE, warning=FALSE}
library(EcoData)
library(tidyverse)
library(mlr3)
library(mlr3learners)
library(mlr3pipelines)
library(mlr3tuning)
library(mlr3measures)
set.seed(123)

data(titanic_ml)
str(titanic_ml)

data = titanic_ml %>% select(-name, -ticket, -name, -body)
data$pclass = as.factor(data$pclass)
data$sex = as.factor(data$sex)
data$survived = as.factor(data$survived)

# Change easy things manually:
data$embarked[data$embarked == ""] = "S"  # Fill in "empty" values.
data$embarked = droplevels(as.factor(data$embarked)) # Remove unused levels ("").
data$cabin = (data$cabin != "") * 1 # Dummy code the availability of a cabin.
data$fare[is.na(data$fare)] = mean(data$fare, na.rm = TRUE)
levels(data$home.dest)[levels(data$home.dest) == ""] = "unknown"
levels(data$boat)[levels(data$boat) == ""] = "none"

# Create a classification task.
task = TaskClassif$new(id = "titanic", backend = data,
                       target = "survived", positive = "1")
task$missings()

# Let's create the preprocessing graph.
preprocessing = po("imputeoor") %>>% po("scale") %>>% po("encode") 

# Run the task.
transformed_task = preprocessing$train(task)[[1]]

transformed_task$set_row_roles((1:nrow(data))[is.na(data$survived)], "holdout")

cv10 = mlr3::rsmp("cv", folds = 10L)
rf = lrn("classif.ranger", predict_type = "prob")
measurement =  msr("classif.auc")

# result = mlr3::resample(transformed_task, rf,
#                         resampling = cv10, store_models = TRUE)
# 
# # Calculate the average AUC of the holdouts.
# result$aggregate(measurement)
# 
# pred = sapply(1:10, function(i) result$learners[[i]]$predict(transformed_task,
# row_ids = (1:nrow(data))[is.na(data$survived)])$data$prob[, "1", drop = FALSE])
# 
# dim(pred)
# predictions = round(apply(pred, 1, mean))
# 
# write.csv(data.frame(y = predictions), file = "submission_RF.csv")
```

```{=html}
    </p>
  </details>
  <br/><hr/>
```
