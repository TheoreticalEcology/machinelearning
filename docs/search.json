[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Machine Learning and Deep Learning with R",
    "section": "",
    "text": "Preface\nMachine learning (ML) is the process of building a predictive model that makes predictions about new data based on observations (training data). The goal of this course is to enable you to build a robust ML model, one that generalizes well to new observations and does not “overfit” your training data. To do this, you will need to master a number of skills, in particular\nIn recent years, a new field within ML called Deep Learning (DL) has emerged and attracted a lot of attention. The reason for this is that DL incorporates many different but very flexible architectures that allow to natively model different types of data, e.g. Convolutional Neural Networks for images or Recurrent Neural Networks for time series. However, exploiting the flexibility of DL requires a deeper, more fundamental understanding of the frameworks in which they are implemented. To this end, the course will also cover common DL frameworks such as torch (and TensorFlow) and:",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#before-the-course",
    "href": "index.html#before-the-course",
    "title": "Machine Learning and Deep Learning with R",
    "section": "Before the course",
    "text": "Before the course\n\nPlease read the following two reviews about Machine Learning in General (Pichler and Hartig 2023) and Deep Learning (Borowiec et al. 2022)\nPlease install all dependencies before the course because it will take some time, see 1  Getting Started for installation instructions\nThis course assumes advanced knowledge of the R programming language. If you want to refresh your knowledge about R, you can find a crashcourse in R in the book of the advanced statistic course: R-Crash-Course\n\nAuthors:\nMaximilian Pichler: @_Max_Pichler\nFlorian Hartig: @florianhartig\nContributors:\nJohannes Oberpriller, Matthias Meier\nThis work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License\n\n\n\n\nBorowiec, Marek L, Rebecca B Dikow, Paul B Frandsen, Alexander McKeeken, Gabriele Valentini, and Alexander E White. 2022. “Deep Learning as a Tool for Ecology and Evolution.” Methods in Ecology and Evolution 13 (8): 1640–60.\n\n\nPichler, Maximilian, and Florian Hartig. 2023. “Machine Learning and Deep Learning—a Review for Ecologists.” Methods in Ecology and Evolution 14 (4): 994–1016.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "A1-GettingStarted.html",
    "href": "A1-GettingStarted.html",
    "title": "1  Getting Started",
    "section": "",
    "text": "1.1 Organization of this book\nThe book is organized on five parts chapters:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting Started</span>"
    ]
  },
  {
    "objectID": "A1-GettingStarted.html#organization-of-this-book",
    "href": "A1-GettingStarted.html#organization-of-this-book",
    "title": "1  Getting Started",
    "section": "",
    "text": "ML basics\nClassical ML algorithms\nDeep learning\nxAI and causal ML\nGenerative AI",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting Started</span>"
    ]
  },
  {
    "objectID": "A1-GettingStarted.html#software-requirements",
    "href": "A1-GettingStarted.html#software-requirements",
    "title": "1  Getting Started",
    "section": "1.2 Software requirements",
    "text": "1.2 Software requirements\n\n1.2.1 R System\nMake sure you have a recent version of R (&gt;=4.2, ideally &gt;=4.3) and RStudio on your computers. For Mac users, if you have already a M1-M3 Mac, please install the R-ARM version (see here (not the x86_64 version))\n\n\n1.2.2 TensorFlow and Keras\nIf you want to run the code on your own computers, you need to install TensorFlow / Keras for R. For this, the following should work for most people:\n\ninstall.packages(\"keras3\", dependencies = TRUE)\nkeras3::install_keras(backend=\"tensorflow\")\n\nThis should work on most computers, in particular if all software is recent. Sometimes, however, things don’t work well, especially the python distribution often makes problems. If the installation does not work for you, we can look at it together. Also, we will provide some virtual machines in case your computers / laptops are too old or you don’t manage to install TensorFlow.\n\n\n1.2.3 Torch for R\nWe may also use Torch for R. This is an R frontend for the popular PyTorch framework. To install Torch, type in R:\n\ninstall.packages(\"torch\")\nlibrary(torch)\ntorch::install_torch()\n\n\n\n1.2.4 EcoData\nWe use data sets from the EcoData package. To install the package, run:\n\ndevtools::install_github(repo = \"TheoreticalEcology/EcoData\", \n                         dependencies = TRUE, build_vignettes = TRUE)\n\nThe default installation will install a number of packages that are useful for statistics. Especially in Linux, this may take some time to install. If you are in a hurry and only want the data, you can also run\n\ndevtools::install_github(repo = \"TheoreticalEcology/EcoData\", \n                         dependencies = FALSE, build_vignettes = FALSE)\n\n\n\n1.2.5 Additional Libraries\nThere are a number of additional libraries that we may use during the course. So take a coffee or two (that will take a while…) and install the following libraries. Please do this in the given order unless you know what you’re doing, because there are some dependencies between the packages.\n\ninstall.packages(\"abind\")\ninstall.packages(\"animation\")\ninstall.packages(\"ape\")\ninstall.packages(\"BiocManager\")\nBiocManager::install(c(\"Rgraphviz\", \"graph\", \"RBGL\"))\ninstall.packages(\"coro\")\ninstall.packages(\"cito\")\ninstall.packages(\"dbscan\")\ninstall.packages(\"dendextend\")\ninstall.packages(\"devtools\")\ninstall.packages(\"dplyr\")\ninstall.packages(\"e1071\")\ninstall.packages(\"factoextra\")\ninstall.packages(\"fields\")\ninstall.packages(\"forcats\")\ninstall.packages(\"glmnet\")\ninstall.packages(\"glmnetUtils\")\ninstall.packages(\"gym\")\ninstall.packages(\"kknn\")\ninstall.packages(\"knitr\")\ninstall.packages(\"iml\")\ninstall.packages(\"lavaan\")\ninstall.packages(\"lmtest\")\ninstall.packages(\"magick\")\ninstall.packages(\"mclust\")\ninstall.packages(\"Metrics\")\ninstall.packages(\"microbenchmark\")\ninstall.packages(\"missRanger\")\ninstall.packages(\"mlbench\")\ninstall.packages(\"mlr3\")\ninstall.packages(\"mlr3learners\")\ninstall.packages(\"mlr3measures\")\ninstall.packages(\"mlr3pipelines\")\ninstall.packages(\"mlr3tuning\")\ninstall.packages(\"paradox\")\ninstall.packages(\"partykit\")\ninstall.packages(\"pcalg\")\ninstall.packages(\"piecewiseSEM\")\ninstall.packages(\"purrr\")\ninstall.packages(\"randomForest\")\ninstall.packages(\"ranger\")\ninstall.packages(\"rpart\")\ninstall.packages(\"rpart.plot\")\ninstall.packages(\"scales\")\ninstall.packages(\"semPlot\")\ninstall.packages(\"stringr\")\ninstall.packages(\"tfprobability\")\ninstall.packages(\"tidyverse\")\ninstall.packages(\"torchvision\")\ninstall.packages(\"xgboost\")\ninstall.packages(\"tidymodels\")\n\ndevtools::install_github(\"andrie/deepviz\", dependencies = TRUE,\n                         upgrade = \"always\")\ndevtools::install_github('skinner927/reprtree')\ndevtools::install_version(\"lavaanPlot\", version = \"0.6.0\")\n\nreticulate::virtualenv_install(\"r-keras\", packages = \"scipy\")\nreticulate::virtualenv_install(\"r-keras\", packages = \"tensorflow_probability\")",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting Started</span>"
    ]
  },
  {
    "objectID": "A1-GettingStarted.html#linuxunix",
    "href": "A1-GettingStarted.html#linuxunix",
    "title": "1  Getting Started",
    "section": "1.3 Linux/UNIX",
    "text": "1.3 Linux/UNIX\nLinux/UNIX systems have sometimes to fulfill some further dependencies\nDebian based systems\nFor Debian based systems, we need:\nbuild-essential\ngfortran\nlibmagick++-dev\nr-base-dev\nIf you are new to installing packages on Debian / Ubuntu, etc., type the following:\nsudo apt update && sudo apt install -y --install-recommends build-essential gfortran libmagick++-dev r-base-dev",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting Started</span>"
    ]
  },
  {
    "objectID": "A1-GettingStarted.html#assumed-r-knowledge",
    "href": "A1-GettingStarted.html#assumed-r-knowledge",
    "title": "1  Getting Started",
    "section": "1.4 Assumed R knowledge",
    "text": "1.4 Assumed R knowledge\nBasic knowledge of R is required to successfully participate in this course. In particular, you should be able to transform and subselect (slice) data. Have a look at this section from the advanced statistic course which provides you with a short tests as well as with further links to read up on background!",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting Started</span>"
    ]
  },
  {
    "objectID": "A2-MachineLearningTasks.html",
    "href": "A2-MachineLearningTasks.html",
    "title": "2  Introduction to Machine Learning",
    "section": "",
    "text": "2.1 Machine Learning Tasks\nMachine Learning (ML) is about training an algorithm that can perform certain tasks. The general steps to get the trained model include:\nThe goal of this course is that you can answer the following questions:\nTypically we can define roughly three types of ML tasks:\nSupervised learning, you train algorithms to predict something (classes = classification or values = regression) from some other data (= features), and you provide it with correct examples of the execution of the task (called training data). A linear regression is an example of supervised learning. Given \\(y = f(x)\\) with \\(x\\) our input feature (e.g. precipitation), \\(y\\) our response (growth), and \\(f\\) an unknown function that maps \\(x \\rightarrow y\\) . The goal of supervised learning is to train a ML algorithm to approximate \\(f\\) given observed \\((x_i, y_i)\\) pairs.\nUnsupervised learning, on the other hand, is when you provide the features, but no examples of the correct execution of the task. Clustering techniques are examples of unsupervised learning. (In the example above, \\(y\\) would be unknown).\nReinforcement learning is a technique that mimics a game-like situation. The algorithm finds a solution through trial and error, receiving either rewards or penalties for each action. As in games, the goal is to maximize the rewards. We will talk more about this technique on the last day of the course.\nFor now, we will focus on the first two tasks, supervised and unsupervised learning (here a YouTube video explaining again the difference).",
    "crumbs": [
      "Machine Learning Basics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to Machine Learning</span>"
    ]
  },
  {
    "objectID": "A2-MachineLearningTasks.html#machine-learning-tasks",
    "href": "A2-MachineLearningTasks.html#machine-learning-tasks",
    "title": "2  Introduction to Machine Learning",
    "section": "",
    "text": "Supervised learning\nUnsupervised learning\nReinforcement learning\n\n\n\n\n\n\n2.1.1 Test questions\n\nIn ML, predictors (or the explaining variables) are often called features: TRUEFALSE\nIn supervised learning the response (y) and the features (x) are known: TRUEFALSE\nIn unsupervised learning, only the features are known: TRUEFALSE\nIn reinforcement learning an agent (ML model) is trained by interacting with an environment: TRUEFALSE\nHave a look at the two textbooks on ML (Elements of statistical learning and introduction to statistical learning) in our further readings at the end of the GRIPS course - which of the following statements is true?\n\n Both books can be downloaded for free. Higher model complexity is always better for predicting.",
    "crumbs": [
      "Machine Learning Basics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to Machine Learning</span>"
    ]
  },
  {
    "objectID": "A2-MachineLearningTasks.html#sec-unsupervised",
    "href": "A2-MachineLearningTasks.html#sec-unsupervised",
    "title": "2  Introduction to Machine Learning",
    "section": "2.2 Unsupervised Learning",
    "text": "2.2 Unsupervised Learning\nIn unsupervised learning, we want to identify patterns in data without having any examples (supervision) about what the correct patterns / classes are. As an example, consider the iris data set. Here, we have 150 observations of 4 floral traits:\n\niris = datasets::iris\ncolors = hcl.colors(3)\ntraits = as.matrix(iris[,1:4])\nspecies = iris$Species\nimage(y = 1:4, x = 1:length(species) , z = traits,\n      ylab = \"Floral trait\", xlab = \"Individual\")\nsegments(50.5, 0, 50.5, 5, col = \"black\", lwd = 2)\nsegments(100.5, 0, 100.5, 5, col = \"black\", lwd = 2)\n\n\n\n\nTrait distributions of iris dataset\n\n\n\n\nThe observations are from 3 species and indeed those species tend to have different traits, meaning that the observations form 3 clusters.\n\npairs(traits, pch = as.integer(species), col = colors[as.integer(species)])\n\n\n\n\n\n\n\n\nHowever, imagine we don’t know what species are, what is basically the situation in which people in the antique have been. The people just noted that some plants have different flowers than others, and decided to give them different names. This kind of process is what unsupervised learning does.\n\n2.2.1 K-means Clustering\nAn example for an unsupervised learning algorithm is k-means clustering, one of the simplest and most popular unsupervised machine learning algorithms (see more on this in section “distance based algorithms”).\nTo start with the algorithm, you first have to specify the number of clusters (for our example the number of species). Each cluster has a centroid, which is the assumed or real location representing the center of the cluster (for our example this would be how an average plant of a specific species would look like). The algorithm starts by randomly putting centroids somewhere. Afterwards each data point is assigned to the respective cluster that raises the overall in-cluster sum of squares (variance) related to the distance to the centroid least of all. After the algorithm has placed all data points into a cluster the centroids get updated. By iterating this procedure until the assignment doesn’t change any longer, the algorithm can find the (locally) optimal centroids and the data points belonging to this cluster. Note that results might differ according to the initial positions of the centroids. Thus several (locally) optimal solutions might be found.\nThe “k” in K-means refers to the number of clusters and the ‘means’ refers to averaging the data-points to find the centroids.\nA typical pipeline for using k-means clustering looks the same as for other algorithms. After having visualized the data, we fit a model, visualize the results and have a look at the performance by use of the confusion matrix. By setting a fixed seed, we can ensure that results are reproducible.\n\nset.seed(123)\n\n#Reminder: traits = as.matrix(iris[,1:4]).\n\nkc = kmeans(traits, 3)\nprint(kc)\n\nK-means clustering with 3 clusters of sizes 50, 62, 38\n\nCluster means:\n  Sepal.Length Sepal.Width Petal.Length Petal.Width\n1     5.006000    3.428000     1.462000    0.246000\n2     5.901613    2.748387     4.393548    1.433871\n3     6.850000    3.073684     5.742105    2.071053\n\nClustering vector:\n  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n [75] 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 3 3 3 3 2 3 3 3 3\n[112] 3 3 2 2 3 3 3 3 2 3 2 3 2 3 3 2 2 3 3 3 3 3 2 3 3 3 3 2 3 3 3 2 3 3 3 2 3\n[149] 3 2\n\nWithin cluster sum of squares by cluster:\n[1] 15.15100 39.82097 23.87947\n (between_SS / total_SS =  88.4 %)\n\nAvailable components:\n\n[1] \"cluster\"      \"centers\"      \"totss\"        \"withinss\"     \"tot.withinss\"\n[6] \"betweenss\"    \"size\"         \"iter\"         \"ifault\"      \n\n\nVisualizing the results. Color codes true species identity, symbol shows cluster result.\n\nplot(iris[c(\"Sepal.Length\", \"Sepal.Width\")],\n     col =  colors[as.integer(species)], pch = kc$cluster)\npoints(kc$centers[, c(\"Sepal.Length\", \"Sepal.Width\")],\n       col = colors, pch = 1:3, cex = 3)\n\n\n\n\n\n\n\n\nWe see that there are are some discrepancies. Confusion matrix:\n\ntable(iris$Species, kc$cluster)\n\n            \n              1  2  3\n  setosa     50  0  0\n  versicolor  0 48  2\n  virginica   0 14 36\n\n\nIf you want to animate the clustering process, you could run\n\nlibrary(animation)\n\nsaveGIF(kmeans.ani(x = traits[,1:2], col = colors),\n        interval = 1, ani.width = 800, ani.height = 800)\n\nElbow technique to determine the probably best suited number of clusters:\n\nset.seed(123)\n\ngetSumSq = function(k){ kmeans(traits, k, nstart = 25)$tot.withinss }\n\n#Perform algorithm for different cluster sizes and retrieve variance.\niris.kmeans1to10 = sapply(1:10, getSumSq)\nplot(1:10, iris.kmeans1to10, type = \"b\", pch = 19, frame = FALSE,\n     xlab = \"Number of clusters K\",\n     ylab = \"Total within-clusters sum of squares\",\n     col = c(\"black\", \"red\", rep(\"black\", 8)))\n\n\n\n\n\n\n\n\nOften, one is interested in sparse models. Furthermore, higher k than necessary tends to overfitting. At the kink in the picture, the sum of squares dropped enough and k is still low enough. But keep in mind, this is only a rule of thumb and might be wrong in some special cases.\n\n\nInformation criteria such as AIC or BIC can be also used to select the number of clusters and control complexity.",
    "crumbs": [
      "Machine Learning Basics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to Machine Learning</span>"
    ]
  },
  {
    "objectID": "A2-MachineLearningTasks.html#supervised-learning",
    "href": "A2-MachineLearningTasks.html#supervised-learning",
    "title": "2  Introduction to Machine Learning",
    "section": "2.3 Supervised Learning",
    "text": "2.3 Supervised Learning\nThe two most prominent branches of supervised learning are regression and classification. The basic distinction between the two is that classification is about predicting a categorical variable, and regression is about predicting a continuous variable.\n\n2.3.1 Regression\nThe random forest (RF) algorithm is possibly the most widely used machine learning algorithm and can be used for regression and classification. We will talk more about the algorithm later.\nFor the moment, we want to go through a typical workflow for a supervised regression: First, we visualize the data. Next, we fit the model and lastly we visualize the results. We will again use the iris data set that we used before. The goal is now to predict Sepal.Length based on the information about the other variables (including species).\nFitting the model:\n\nlibrary(randomForest)\nset.seed(123)\n\nSepal.Length is a numerical variable:\n\nstr(iris)\n\n'data.frame':   150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n\nhist(iris$Sepal.Length)\n\n\n\n\n\n\n\n\nThe randomForest can be used similar to a linear regression model, we can specify the features using the formula syntax (~. means that all other variables should be used as features):\n\nm1 = randomForest(Sepal.Length ~ ., data = iris)   # ~.: Against all others.\nprint(m1)\n\n\nCall:\n randomForest(formula = Sepal.Length ~ ., data = iris) \n               Type of random forest: regression\n                     Number of trees: 500\nNo. of variables tried at each split: 1\n\n          Mean of squared residuals: 0.1364625\n                    % Var explained: 79.97\n\n\n\n\nIn statistics we would use a linear regression model:\n\nmLM = lm(Sepal.Length~., data = iris)\n\nAs many other ML algorithms, the RF is not interpretable, so we don’t get coefficients that connect the variables to the response. But, at least we get the variable importance which is similar to an anova, telling us which variables were the most important ones:\n\nvarImpPlot(m1)\n\n\n\n\n\n\n\n\n\n\nOur liner model would report linear effects, however, the lm cannot keep up with the flexibility of a random forest!\n\ncoef(mLM)\n\n      (Intercept)       Sepal.Width      Petal.Length       Petal.Width \n        2.1712663         0.4958889         0.8292439        -0.3151552 \nSpeciesversicolor  Speciesvirginica \n       -0.7235620        -1.0234978 \n\n\nAnd the finally, we can use the model to make predictions using the predict method:\n\nplot(predict(m1), iris$Sepal.Length, xlab = \"Predicted\", ylab = \"Observed\")\nabline(0, 1)\n\n\n\n\n\n\n\n\nTo understand the structure of a random forest in more detail, we can use a package from GitHub.\n\nreprtree:::plot.getTree(m1, iris)\n\n\n\n\n\n\n\n\nHere, one of the regression trees is shown.\n\n\n2.3.2 Classification\nWith the random forest, we can also do classification. The steps are the same as for regression tasks, but we can additionally see how well it performed by looking at the confusion matrix. Each row of this matrix contains the instances in a predicted class and each column represents the instances in the actual class. Thus the diagonals are the correctly predicted classes and the off-diagonal elements are the falsely classified elements.\nSpecies is a factor with three levels:\n\nstr(iris)\n\n'data.frame':   150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n\n\nFitting the model (syntax is the same as for the regression task):\n\nset.seed(123)\nlibrary(randomForest)\nm1 = randomForest(Species ~ ., data = iris)\nprint(m1)\n\n\nCall:\n randomForest(formula = Species ~ ., data = iris) \n               Type of random forest: classification\n                     Number of trees: 500\nNo. of variables tried at each split: 2\n\n        OOB estimate of  error rate: 4.67%\nConfusion matrix:\n           setosa versicolor virginica class.error\nsetosa         50          0         0        0.00\nversicolor      0         47         3        0.06\nvirginica       0          4        46        0.08\n\nvarImpPlot(m1)\n\n\n\n\n\n\n\n\nPredictions:\n\nhead(predict(m1))\n\n     1      2      3      4      5      6 \nsetosa setosa setosa setosa setosa setosa \nLevels: setosa versicolor virginica\n\n\nConfusion matrix:\n\ntable(predict(m1), as.integer(iris$Species))\n\n            \n              1  2  3\n  setosa     50  0  0\n  versicolor  0 47  4\n  virginica   0  3 46\n\n\nOur model made a few errors.\nVisualizing results ecologically:\n\nplot(iris$Petal.Width, iris$Petal.Length, col = iris$Species, main = \"Observed\")\n\n\n\n\n\n\n\nplot(iris$Petal.Width, iris$Petal.Length, col = predict(m1), main = \"Predicted\")\n\n\n\n\n\n\n\n\nVisualizing one of the fitted models:\n\nreprtree:::plot.getTree(m1, iris)\n\n\n\n\n\n\n\n\nConfusion matrix:\n\n\n\n\n\n\nsetosa\nversicolor\nvirginica\n\n\n\n\nsetosa\n50\n0\n0\n\n\nversicolor\n0\n47\n4\n\n\nvirginica\n0\n3\n46",
    "crumbs": [
      "Machine Learning Basics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to Machine Learning</span>"
    ]
  },
  {
    "objectID": "A2-MachineLearningTasks.html#exercise---supervised-learning",
    "href": "A2-MachineLearningTasks.html#exercise---supervised-learning",
    "title": "2  Introduction to Machine Learning",
    "section": "2.4 Exercise - Supervised Learning",
    "text": "2.4 Exercise - Supervised Learning\n\nUsing a random forest on the iris dataset, which parameter would be more important (remember there is a function to check this) to predict Petal.Width?\n\n Species. Sepal.Width.\n\n\n\n\n\n\n\nTask: Fit random forest\n\n\n\nA demonstration with the iris dataset:\n\nlibrary(randomForest)\n\n# scale your features if possible (some ML algorithms converge faster with scaled features)\niris_scaled = iris\niris_scaled[,1:4] = scale(iris_scaled[,1:4])\n\n\nmodel = randomForest(Species~., data = iris_scaled)\n\nRandomForest is not based on a specific data generating model and thus we will not get effect estimates that tell us how the input features affect the response:\n\n# no summary method available\nprint(model) \n\n\nCall:\n randomForest(formula = Species ~ ., data = iris_scaled) \n               Type of random forest: classification\n                     Number of trees: 500\nNo. of variables tried at each split: 2\n\n        OOB estimate of  error rate: 4%\nConfusion matrix:\n           setosa versicolor virginica class.error\nsetosa         50          0         0        0.00\nversicolor      0         47         3        0.06\nvirginica       0          3        47        0.06\n\n\nThe confusion matrix explains where (for which species) the model makes wrong predictions / classifications on the OOB splits (OOB = out of bag). Each tree in the random forest is trained on a bootstrap of the data (bootstrap = sample with replacement from the original data, on average, each bootstrap will have 66% of the original data). Observations not used in a specific bootstrap are then used to validate the specific tree, bootstrap errors are at the end averaged for the n trees in the random forest.\nWhile we don’t get effect estimates as in a lm, we get the variable importance which reports how important the specific predictors are:\n\nvarImpPlot(model)\n\n\n\n\n\n\n\n\nPredictions\n\nhead(predict(model))\n\n     1      2      3      4      5      6 \nsetosa setosa setosa setosa setosa setosa \nLevels: setosa versicolor virginica\n\n\nThe model predicts the species class for each observation\nPerformance:\n\ntable(predict(model), as.integer(iris$Species))\n\n            \n              1  2  3\n  setosa     50  0  0\n  versicolor  0 47  3\n  virginica   0  3 47\n\n\nTask:\n\npredict Sepal.Length instead of Species (classification -&gt; regression)\nPlot predicted vs observed (usually used to asses the goodness of the predictions, if the model is good, predicted and observed values should be on one diagonal line)\n\n\n\n\n\nClick here to see the solution\n\nRegression:\nRandom Forest automatically infers the type of the task, so we don’t have to change much:\n\nmodel = randomForest(Sepal.Length~., data = iris_scaled)\n\nThe OOB error is now “% Var explained” which is very similar to a \\(R^2\\):\n\nprint(model)\n\n\nCall:\n randomForest(formula = Sepal.Length ~ ., data = iris_scaled) \n               Type of random forest: regression\n                     Number of trees: 500\nNo. of variables tried at each split: 1\n\n          Mean of squared residuals: 0.2031826\n                    % Var explained: 79.55\n\n\nPlot observed vs predicted:\n\nplot(iris_scaled$Sepal.Length, predict(model), xlim = c(-3, 3), ylim = c(-3, 3))\nabline(a = c(0, 1))\n\n\n\n\n\n\n\n\nCalculate \\(R^2\\):\n\ncor(iris_scaled$Sepal.Length, predict(model))**2\n\n[1] 0.7987894",
    "crumbs": [
      "Machine Learning Basics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction to Machine Learning</span>"
    ]
  },
  {
    "objectID": "A3-BiasVarianceTradeOff.html",
    "href": "A3-BiasVarianceTradeOff.html",
    "title": "3  Managing algorithmic complexity",
    "section": "",
    "text": "3.1 Estimating error on the validation data\nYou probably remember from statistics that a more complex model always fits the training data better. The decisive question, however, is if it also works better on new (independent) data. Technically, we call this the out-of-sample error, as opposed to the in-sample error, which is the error on the training data.\nError can be measured in different ways, but usually we calculate some kind of accuracy (especially for classification tasks) or how much variance is explained by our model (regression tasks). We also distinguish between the error used to train the model and the error used to validate the model. The error used internally by the ML algorithms to train the model is what we usually call the loss. The smaller the loss, the smaller the error of the model, and vice versa for larger losses.\nWhile we can use losses to validate the model, losses are often not interpretable as they are often in the range \\([0, \\infty[\\) and they cannot be generalized to other datasets because they are often data specific. Therefore, in practice, we usually use interpretable losses, validation metrics, during validation that can be also used to compare the models over different datasets (Model A achieves 80% accuarcy on dataset A and 70% accuracy on dataset B), here is an overview of some common validation metrics and their interpretation:\nValidation metrics for classification tasks:\nValidation metrics for regression tasks:",
    "crumbs": [
      "Machine Learning Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Managing algorithmic complexity</span>"
    ]
  },
  {
    "objectID": "A3-BiasVarianceTradeOff.html#estimating-error-on-the-validation-data",
    "href": "A3-BiasVarianceTradeOff.html#estimating-error-on-the-validation-data",
    "title": "3  Managing algorithmic complexity",
    "section": "",
    "text": "Validation Metric\nRange\nClassification Types\nExplanation\n\n\n\n\nArea Under the Curve (AUC)\n\\([0, 1]\\)\nBinary Classification Tasks (e.g. Titanic Dataset, survived or died)\nThe ability of our models to distinguish between 0 and 1. Requires probability predictions. An AUC of 0.5 means that the algorithm is making random predictions. Lower than 0.5 –&gt; worse than random\n\n\nAccuracy\n\\([0, 1]\\)\nAll types of classifications (including multiclass tasks)\nThe accuracy of our models, how many of the predicted classes are correct. The baseline accuracy depends on the distributions of the classes (if one class occurs 99% in the data, a random model that will only predict this class, will achieve already a very high accuracy\n\n\n\n\n\n\n\n\n\n\n\n\nValidation Metric\nRange\nExplanation\n\n\n\n\n\\(R^2\\)\n\\([0, 1]\\)\nHow much variance is explained by our model. We usually use the sum of squares \\(R^2\\)\n\n\nCorrelation factors (Pearson or Spearman)\n\\([-1, 1]\\)\nMeasures correlation between predictions and observations. Spearman (rank correlation factor) can be useful for skewed distributed responses (or non-normal distributed responses, such as count data).\n\n\nRoot mean squared error (RMSE)\n\\([0, \\infty[\\)\nRMSE is not a really interpretable but it is still used as a common validation metrics (is also used as a loss to train models). The RMSE reports how much variance is unexplained (so smaller RMSE is better). However, RMSE is not really comparable between different data sets.\n\n\n\n\n3.1.1 Splitting off validation data\nTo check the out-of-sample error, we usually split out some part of the data for later model validation. Let’s look at this at the example of a supervised regression, trying to predict house prices in Boston.\n\nlibrary(mlbench)\n\ndata(BostonHousing)\ndata = BostonHousing\nset.seed(123)\n\nCreating a split by deciding randomly for each data point if it is used for training or validation\n\nn = nrow(BostonHousing)\ntrain = sample.int(n, size = round(0.7*n))\n\nFitting two lms, one with a few predictors, one with a lot of predictors (all interaction up to 3-way)\n\nm1 = lm(medv~., data = data[train,])\nm2 = lm(medv~.^3, data = data[train,])\n\nTesting predictive ability on training data (in-sample error)\n\ncor(predict(m1), data[train,]$medv)\n\n[1] 0.8561528\n\ncor(predict(m2), data[train,]$medv)\n\n[1] 0.9971297\n\n\nConclusion: m2 (more complex) is much better on training. As a next step, we are testing the predictive ability on hold-out (aka valikation, out-of-sample error).\n\ncor(predict(m1, newdata = data[-train,] ), \n    data[-train,]$medv)\n\n[1] 0.8637908\n\ncor(predict(m2, newdata = data[-train,] ), \n    data[-train,]$medv)\n\nWarning in predict.lm(m2, newdata = data[-train, ]): prediction from\nrank-deficient fit; attr(*, \"non-estim\") has doubtful cases\n\n\n[1] -0.04036532\n\n\nNow, m2 is much worse!\n\n\n3.1.2 Overfitting vs. underfitting\nThe phenomenon that the predictive error drops significantly when going from the training to the validation data signals overfitting, i.e. a too complex model!\nWhat about m1 - is m1 just complex enough, or is it too simple? Underfitting cannot be directly diagnosed, you just have to try around if making the model more complex can improve results on the validation data. Let’s try a random forest\n\nlibrary(randomForest)\nm3 = randomForest(medv~., data = data[train,])\ncor(predict(m3), data[train,]$medv)\n\n[1] 0.9345165\n\ncor(predict(m3, newdata = data[-train,] ), \n    data[-train,]$medv)\n\n[1] 0.9380828\n\n\nNo drop on validation data (i.e. no overfitting), but error on training and validation is much better than for m1 - so this seems to be a better model, and m1 was probably underfitting, i.e. it was not complex enough to get good performance!\n\n\n3.1.3 Validation vs. cross-validation\nA problem with the validation split is that we test only on a certain fraction of the data (say: 20% in a 80/20 split).\nIf computationally possible, a better method to estimate error is cross-validation. The idea of cross-validation is to perform the train/validation split again and again until all data was used for the validation, and then average the validation error over this data.\nHere an example of a k-fold cross-validation, which is akin to 5x an 80/20 split.\n\nk = 5 # folds\nsplit = sample.int(k, n, replace = T)\npred = rep(NA, n)\n\nfor(i in 1:k){\n  m1 = randomForest(medv~., data = data[split != i,])\n  pred[split == i] = predict(m1, newdata = data[split == i,])\n}\n\ncor(pred, data$medv)\n\n[1] 0.9368875",
    "crumbs": [
      "Machine Learning Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Managing algorithmic complexity</span>"
    ]
  },
  {
    "objectID": "A3-BiasVarianceTradeOff.html#optimizing-the-bias-variance-trade-off",
    "href": "A3-BiasVarianceTradeOff.html#optimizing-the-bias-variance-trade-off",
    "title": "3  Managing algorithmic complexity",
    "section": "3.2 Optimizing the bias-variance trade-off",
    "text": "3.2 Optimizing the bias-variance trade-off\n\n3.2.1 The bias-variance trade-off\nWhat we have just seen in the previous chapter is an example of the bias-variance trade-off. The idea is that we look at the error of the model on new test data. The total error comes from 2 contributions:\n\nBias = systematic error that comes from the fact that the model is not flexible enough, related to underfitting\nVariance = statistical error that comes from that fact that estimates of the model parameters get more uncertain when we add complexity\n\nOptimizing the bias-variance trade-off means adjusting the complexity of the model which can be achieved by:\n\nFeature selection (more features increases the flexibility of the model)\nRegularization\n\n\n\nWhich of the following statements about the bias-variance trade-off is correct? (see figure above)\n\n The goal of considering the bias-variance trade-off is to realize that increasing complexity typically leads to more flexibility (allowing you to reduce bias) but at the cost of uncertainty (variance) in the estimated parameters. The goal of considering the bias-variance trade-off is to get the bias of the model as small as possible.\n\n\n\n\n3.2.2 Feature selection\nAdding features increases the flexibility of the model and the goodness of fit:\n\nlibrary(mlbench)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following object is masked from 'package:randomForest':\n\n    combine\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\ndata(BostonHousing)\ndata = BostonHousing\n\nsummary(lm(medv~rm, data = data))\n\n\nCall:\nlm(formula = medv ~ rm, data = data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-23.346  -2.547   0.090   2.986  39.433 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  -34.671      2.650  -13.08   &lt;2e-16 ***\nrm             9.102      0.419   21.72   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.616 on 504 degrees of freedom\nMultiple R-squared:  0.4835,    Adjusted R-squared:  0.4825 \nF-statistic: 471.8 on 1 and 504 DF,  p-value: &lt; 2.2e-16\n\nsummary(lm(medv~rm+dis, data = data))$r.squared\n\n[1] 0.4955246\n\nsummary(lm(medv~., data = data))$r.squared\n\n[1] 0.7406427\n\n# Main effects + all potential interactions:\nsummary(lm(medv~.^2, data = data))$r.squared\n\n[1] 0.9211876\n\n\nThe model with all features and their potential interactions has the highest \\(R^2\\), but it also has the highest uncertainty because there are on average only 5 observations for each parameter (92 parameters and 506 observations). So how do we decide which level of complexity is appropriate for our task? For the data we use to train the model, \\(R^2\\) will always get better with higher model complexity, so it is a poor decision criterion. We will show this in the Section 3.1.3 section. In short, the idea is that we need to split the data so that we have an evaluation (test) dataset that wasn’t used to train the model, which we can then use in turn to see if our model generalizes well to new data.\n\n\n3.2.3 Regularization\nRegularization means adding information or structure to a system in order to solve an ill-posed optimization problem or to prevent overfitting. There are many ways of regularizing a machine learning model. The most important distinction is between shrinkage estimators and estimators based on model averaging.\nShrinkage estimators are based on the idea of adding a penalty to the loss function that penalizes deviations of the model parameters from a particular value (typically 0). In this way, estimates are “shrunk” to the specified default value. In practice, the most important penalties are the least absolute shrinkage and selection operator; also Lasso or LASSO, where the penalty is proportional to the sum of absolute deviations (\\(L1\\) penalty), and the Tikhonov regularization aka Ridge regression, where the penalty is proportional to the sum of squared distances from the reference (\\(L2\\) penalty). Thus, the loss function that we optimize is given by\n\\[\nloss = fit - \\lambda \\cdot d\n\\]\nwhere fit refers to the standard loss function, \\(\\lambda\\) is the strength of the regularization, and \\(d\\) is the chosen metric, e.g. \\(L1\\) or\\(L2\\):\n\\[\nloss_{L1} = fit - \\lambda \\cdot \\Vert weights \\Vert_1\n\\]\n\\[\nloss_{L2} = fit - \\lambda \\cdot \\Vert weights \\Vert_2\n\\]\n\\(\\lambda\\) and possibly d are typically optimized under cross-validation. \\(L1\\) and \\(L2\\) can be also combined what is then called elastic net (see Zou and Hastie (2005)).\nModel averaging refers to an entire set of techniques, including boosting, bagging and other averaging techniques. The general principle is that predictions are made by combining (= averaging) several models. This is based on on the insight that it is often more efficient having many simpler models and average them, than one “super model”. The reasons are complicated, and explained in more detail in Dormann et al. (2018).\nA particular important application of averaging is boosting, where the idea is that many weak learners are combined to a model average, resulting in a strong learner. Another related method is bootstrap aggregating, also called bagging. Idea here is to boostrap (use random sampling with replacement ) the data, and average the bootstrapped predictions.\nTo see how these techniques work in practice, let’s first focus on LASSO and Ridge regularization for weights in neural networks. We can imagine that the LASSO and Ridge act similar to a rubber band on the weights that pulls them to zero if the data does not strongly push them away from zero. This leads to important weights, which are supported by the data, being estimated as different from zero, whereas unimportant model structures are reduced (shrunken) to zero.\nLASSO \\(\\left(penalty \\propto \\sum_{}^{} \\mathrm{abs}(weights) \\right)\\) and Ridge \\(\\left(penalty \\propto \\sum_{}^{} weights^{2} \\right)\\) have slightly different properties. They are best understood if we express those as the effective prior preference they create on the parameters:\n\n\n\n\n\n\n\n\n\nAs you can see, the LASSO creates a very strong preference towards exactly zero, but falls off less strongly towards the tails. This means that parameters tend to be estimated either to exactly zero, or, if not, they are more free than the Ridge. For this reason, LASSO is often more interpreted as a model selection method.\nThe Ridge, on the other hand, has a certain area around zero where it is relatively indifferent about deviations from zero, thus rarely leading to exactly zero values. However, it will create a stronger shrinkage for values that deviate significantly from zero.\n\n3.2.3.1 Ridge - Example\nWe can use the glmnet package for Ridge, LASSO, and elastic-net regressions.\nWe want to predict the house prices of Boston (see help of the dataset):\n\nlibrary(mlbench)\nlibrary(dplyr)\nlibrary(glmnet)\n\nLoading required package: Matrix\n\n\nLoaded glmnet 4.1-8\n\ndata(BostonHousing)\ndata = BostonHousing\nY = data$medv\nX = data %&gt;% select(-medv, -chas) %&gt;% scale()\n\nhist(cor(X))\n\n\n\n\n\n\n\n\n\nm1 = glmnet(y = Y, x = X, alpha = 0)\n\nThe glmnet function automatically tests different values for lambda:\n\ncbind(coef(m1, s = 0.001), coef(m1, s = 100.5))\n\n13 x 2 sparse Matrix of class \"dgCMatrix\"\n                     s1          s1\n(Intercept) 22.53280632 22.53280632\ncrim        -0.79174957 -0.21113427\nzn           0.76313031  0.18846808\nindus       -0.17037817 -0.25120998\nnox         -1.32794787 -0.21314250\nrm           2.85780876  0.46463202\nage         -0.05389395 -0.18279762\ndis         -2.38716188  0.07906631\nrad          1.42772476 -0.17967948\ntax         -1.09026758 -0.24233282\nptratio     -1.93105019 -0.31587466\nb            0.86718037  0.18764060\nlstat       -3.43236617 -0.46055837\n\n\n\n\n3.2.3.2 LASSO - Example\nBy changing \\(alpha\\) to 1.0 we use a LASSO instead of a Ridge regression:\n\nm2 = glmnet(y = Y, x = X, alpha = 1.0)\ncbind(coef(m2, s = 0.001), coef(m2, s = 0.5))\n\n13 x 2 sparse Matrix of class \"dgCMatrix\"\n                     s1           s1\n(Intercept) 22.53280632 22.532806324\ncrim        -0.95543108 -0.135047323\nzn           1.06718108  .          \nindus        0.21519500  .          \nnox         -1.95945910 -0.000537715\nrm           2.71666891  2.998520195\nage          0.05184895  .          \ndis         -3.10566908 -0.244045205\nrad          2.73963771  .          \ntax         -2.20279273  .          \nptratio     -2.13052857 -1.644234575\nb            0.88420283  0.561686909\nlstat       -3.80177809 -3.682148016\n\n\n\n\n3.2.3.3 Elastic-net - Example\nBy setting \\(alpha\\) to a value between 0 and 1.0, we use a combination of LASSO and Rdige:\n\nm3 = glmnet(y = Y, x = X, alpha = 0.5)\ncbind(coef(m3, s = 0.001), coef(m3, s = 0.5))\n\n13 x 2 sparse Matrix of class \"dgCMatrix\"\n                     s1         s1\n(Intercept) 22.53280632 22.5328063\ncrim        -0.95716118 -0.3488473\nzn           1.06836343  0.1995842\nindus        0.21825187  .        \nnox         -1.96211736 -0.7613698\nrm           2.71859592  3.0137090\nage          0.05299551  .        \ndis         -3.10330132 -1.3011740\nrad          2.73321635  .        \ntax         -2.19638611  .        \nptratio     -2.13041090 -1.8051547\nb            0.88458269  0.6897165\nlstat       -3.79836182 -3.6136853",
    "crumbs": [
      "Machine Learning Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Managing algorithmic complexity</span>"
    ]
  },
  {
    "objectID": "A3-BiasVarianceTradeOff.html#hyperparameter-tuning",
    "href": "A3-BiasVarianceTradeOff.html#hyperparameter-tuning",
    "title": "3  Managing algorithmic complexity",
    "section": "3.3 Hyperparameter tuning",
    "text": "3.3 Hyperparameter tuning\n\n3.3.1 What is a hyperparameter?\nGenerally, parameters such as \\(\\lambda\\) and \\(\\alpha\\) that, for example, control the complexity of the model or other model features such as learning or the optimization are called hyperparameters.\nHyperparameter tuning describes the process of finding the optimal set of hyperparameters for a certain task. They are usually data specific, so they have to tuned for each dataset.\nLet’s have a look at this using our glmnet example - we can plot the effect of \\(\\lambda\\) on the effect estimates:\n\nplot(m1)\n\n\n\n\n\n\n\n\nSo which lambda should we choose now? If we calculate the model fit for different lambdas (e.g. using the RMSE):\n\nlambdas = seq(0.001, 1.5, length.out = 100)\nRMSEs = \n  sapply(lambdas, function(l) {\n    prediction = predict(m1, newx = X, s = l)\n    RMSE = Metrics::rmse(Y, prediction)\n    return(RMSE)\n    })\nplot(lambdas, RMSEs)\n\n\n\n\n\n\n\n\nWe see that the lowest lambda achieved the highest RMSE - which is not surprising because the unconstrained model, the most complex model, has the highest fit, so no bias but probably high variance (with respect to the bias-variance tradeoff).\n\n\n3.3.2 Tuning with a train / test split\nWe want a model that generalizes well to new data, which we need to “simulate” here by splitting of a holdout before the training and using the holdout then for testing our model. This split is often called the train / test split.\n\nset.seed(1)\nlibrary(mlbench)\nlibrary(dplyr)\nlibrary(glmnet)\ndata(BostonHousing)\ndata = BostonHousing\nY = data$medv\nX = data %&gt;% select(-medv, -chas) %&gt;% scale()\n\n# Split data\nindices = sample.int(nrow(X), 0.2*nrow(X))\ntrain_X = X[indices,]\ntest_X = X[-indices,]\ntrain_Y = Y[indices]\ntest_Y = Y[-indices]\n\n# Train model on train data\nm1 = glmnet(y = train_Y, x = train_X, alpha = 0.5)\n\n# Test model on test data\npred = predict(m1, newx = test_X, s = 0.01)\n\n# Calculate performance on test data\nMetrics::rmse(test_Y, pred)\n\n[1] 5.063774\n\n\nLet’s do it again for different values of lambdas:\n\nlambdas = seq(0.0000001, 0.5, length.out = 100)\nRMSEs = \n  sapply(lambdas, function(l) {\n    prediction = predict(m1, newx = test_X, s = l)\n    return(Metrics::rmse(test_Y, prediction))\n    })\nplot(lambdas, RMSEs, xlab = \"Lambda\", ylab = \"RMSE\", type = \"l\", las = 2)\nabline(v = lambdas[which.min(RMSEs)], col = \"red\", lwd = 1.5)\n\n\n\n\n\n\n\n\nAlternatively, you automatically run a CV to determine the hyperparameters for glmnet, using the cv.glmnet function which does per default a 5xCV (so 5 splits) and in each split different values for \\(\\lambda\\) are tested\n\nm1 = glmnet::cv.glmnet(x = X, y = Y, alpha = 0.5, nfolds = 5)\nm1\n\n\nCall:  glmnet::cv.glmnet(x = X, y = Y, nfolds = 5, alpha = 0.5) \n\nMeasure: Mean-Squared Error \n\n    Lambda Index Measure    SE Nonzero\nmin 0.0105    78   23.80 3.247      12\n1se 0.6905    33   26.88 4.014       8\n\nplot(m1)\n\n\n\n\n\n\n\nm1$lambda.min\n\n[1] 0.01049538\n\n\nSo low values of \\(\\lambda\\) seem to achieve the lowest error, thus the highest predictive performance.\n\n\n3.3.3 Nested (cross)-validation\nIn the previous example, we have used the train/test split to find the best model. However, we have not done a validation split yet to see how the finally selected model would do on new data. This is absolutely necessary, because else you will overfit with your model selection to the test data.\nIf we have several nested splits, we talk about a nested validation / cross-validation. For each level, you can in principle switch between validation and cross-validation. Here, and example of tuning with a inner cross-validation and an outer validation.\n\n# outer split\nvalidation = sample.int(n, round(0.2*n))\ndat = data[-validation,]\n\n# inner split\nnI = nrow(dat)\nhyperparameter = data.frame(mtry = c(3,5))\nm = nrow(hyperparameter)\nk = 5 # folds\nsplit = sample.int(k, nI, replace = T)\n\n\n# making predictions for all hyperparameters / splits\npred = matrix(NA, nI, m)\nfor(l in 1:m){\n  for(i in 1:k){\n    m1 = randomForest(medv~., data = dat[split != i,], mtry = hyperparameter$mtry[l])\n    pred[split == i,l] = predict(m1, newdata = dat[split == i,])\n  }\n}\n\n# getting best hyperparameter option on test\ninnerLoss = function(x) cor(x, dat$medv)\nres = apply(pred, 2, innerLoss)\nchoice = which.max(res) \n\n# fitting model again with best hyperparameters \n# and all test / validation data \nmFinal = randomForest(medv~., data = dat, mtry = hyperparameter$mtry[choice])\n\n# testing final prediction on validation data \nfinalPred = predict(mFinal, newdata = data[validation,])\n\ncor(finalPred, \n    data[validation,]$medv)\n\n[1] 0.93926",
    "crumbs": [
      "Machine Learning Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Managing algorithmic complexity</span>"
    ]
  },
  {
    "objectID": "A3-BiasVarianceTradeOff.html#exercise---predicting-survival-rate-of-titanic-passengers",
    "href": "A3-BiasVarianceTradeOff.html#exercise---predicting-survival-rate-of-titanic-passengers",
    "title": "3  Managing algorithmic complexity",
    "section": "3.4 Exercise - Predicting survival rate of titanic passengers",
    "text": "3.4 Exercise - Predicting survival rate of titanic passengers\n\nThe titanic dataset is a collection of data about the titanic passengers and their survival status. The goal is to train a model that can predict whether a passenger survives or not based on their features (e.g. their passenger class):\n\nResponse variable: survived survival status of the passengers\n\n\n\nFeatures: all other variables\n\nYou can also find a small explanation of the dataset in the Appendix of the book.\nIn the following exercise we will also use a new technique called data imputation:\nMost ML algorithms (including statistical models) cannot handle missing data, observations with NAs would normally be dropped from the dataset. To prevent that, we use data imputation to fill NAs in the dataset. In short, we use an algorithm, e.g. random forest, loop over the columns, treat these columns as response variables, train the RF on this column and then make predictions for the NAs in this column. By doing this, we can fill in the NAs in our data set. However, exclude the actual response variable (here survival) from the data imputation, otherwise it would be data leakage!\n\n\n\n\n\n\nTask: Tune random forest model for the Titanic dataset\n\n\n\nTune the nodesize hyperparameter, from the randomForest help:\nnodesize = Minimum size of terminal nodes. Setting this number larger causes smaller trees to be grown (and thus take less time). Note that the default values are different for classification (1) and regression (5).\nNodesize determines the complexity of the individual trees (we will talk about the exact working tomorrow)\n1. Prepare data\n\nlibrary(randomForest) # alternative faster random forest implementation\nlibrary(EcoData)\n\ndata(titanic_ml)\ntitanic_df = titanic_ml\nsummary(titanic_df)\n\n     pclass         survived          name               sex     \n Min.   :1.000   Min.   :0.0000   Length:1309        female:466  \n 1st Qu.:2.000   1st Qu.:0.0000   Class :character   male  :843  \n Median :3.000   Median :0.0000   Mode  :character               \n Mean   :2.295   Mean   :0.3853                                  \n 3rd Qu.:3.000   3rd Qu.:1.0000                                  \n Max.   :3.000   Max.   :1.0000                                  \n                 NA's   :655                                     \n      age              sibsp            parch            ticket    \n Min.   : 0.1667   Min.   :0.0000   Min.   :0.000   CA. 2343:  11  \n 1st Qu.:21.0000   1st Qu.:0.0000   1st Qu.:0.000   1601    :   8  \n Median :28.0000   Median :0.0000   Median :0.000   CA 2144 :   8  \n Mean   :29.8811   Mean   :0.4989   Mean   :0.385   3101295 :   7  \n 3rd Qu.:39.0000   3rd Qu.:1.0000   3rd Qu.:0.000   347077  :   7  \n Max.   :80.0000   Max.   :8.0000   Max.   :9.000   347082  :   7  \n NA's   :263                                        (Other) :1261  \n      fare                     cabin      embarked      body      \n Min.   :  0.000                  :1014    :  2    Min.   :  1.0  \n 1st Qu.:  7.896   C23 C25 C27    :   6   C:270    1st Qu.: 72.0  \n Median : 14.454   B57 B59 B63 B66:   5   Q:123    Median :155.0  \n Mean   : 33.295   G6             :   5   S:914    Mean   :160.8  \n 3rd Qu.: 31.275   B96 B98        :   4            3rd Qu.:256.0  \n Max.   :512.329   C22 C26        :   4            Max.   :328.0  \n NA's   :1         (Other)        : 271            NA's   :1188   \n                home.dest  \n                     :564  \n New York, NY        : 64  \n London              : 14  \n Montreal, PQ        : 10  \n Cornwall / Akron, OH:  9  \n Paris, France       :  9  \n (Other)             :639  \n\n# data imputation - fill NA using the missRanger package column 2 is our response variable\ntitanic_df[,-2] = missRanger::missRanger(titanic_df[,-2], verbose = 0)\n\n# remove name column, too many levels\ntitanic_df = subset(titanic_df, select = c(-name, -home.dest, -ticket, -cabin))\n\n# change response to factor\ntitanic_df$survived = as.factor(titanic_df$survived)\n\n# remove NAs\ndf = titanic_df[complete.cases(titanic_df),] # remove NAs\n\n\n# Example:\nrf = randomForest(survived~., \n                  data = df[1:300,], \n                  min.node.size = 20) # we want our model to predict probabilities!\n\n# the predict function of the ranger will return an object, the actual predictions\n# are inside a matrix with the name predictions\npred = predict(rf, newdata = df[-(1:300),], type = \"prob\")[,2]\nMetrics::auc(as.integer(df[-(1:300),]$survived)-1, pred)\n\n[1] 0.8349267\n\n\n2. Create an outer split\n3. Tune nodesize under nested Cross-Validation on the training split from step 2\n4. Create submissions\nWe separated data from the original dataset. Observations with NA in the survived column are held back by us to simulate a real-world scenario where you have training data to train your model, and then use the model in production on new data where you have no information about the response variable.\nSo, 654 observations will serve as training data:\n\n# Training data data:\nsum(!is.na(titanic_ml$survived))\n\n[1] 654\n\n\nAnd 655 observations will serve as validation data:\n\n# Outer test/validation data:\nsum(is.na(titanic_ml$survived))\n\n[1] 655\n\n\nThe goal is to tune/train your model (under k-Cross Validation) on the training data and make predictions for the validation data;\nAfter tuning your model on the training data (again, where the response variable is not NA) and you are happy with your model, you can make predictions for the observations where the response is unknown and upload the predictions to our server (http://rhsbio7.uni-regensburg.de:8500/, ignore the unsecure warning and UR VPN is required). The server will report your final performance and compare it with other predictions):\nHow to create your submission file:\n\nnewdata = titanic_df[is.na(titanic_df$survived), ]\npredictions = predict(rf, newdata = newdata, type = \"prob\")[,2]\n\nwrite.csv(data.frame(y = predictions), file = \"rf_max.csv\")\n\nImportant:\n\nThe predictions must be probabilities\nPredictions must the same number of observations as in the raw titanic_ml$response == NA column, this is why we impute the NA in the features, otherwise these observations would be dropped. So nrow(data.frame(y = predictions)) == 655\n\n\n\n\n\nClick here to see the solution\n\n\nset.seed(42)\nn = nrow(df)\n# outer split\nvalidation = sample.int(n, round(0.2*n))\ndat = df[-validation,]\n\n# inner split\nnI = nrow(dat)\nhyperparameter = data.frame(nodesize = seq(10, 500, by = 25))\nm = nrow(hyperparameter)\nk = 5 # folds\nsplit = sample.int(k, nI, replace = T)\n\n\n# making predictions for all hyperparameters / splits\npred = matrix(NA, nI, m)\nfor(l in 1:m){\n  # loop over the hyperparameters and do CV for each hyperparameter\n  for(i in 1:k){\n    m1 = randomForest(survived~., data = dat[split != i,], nodesize = hyperparameter$nodesize[l])\n    pred[split == i,l] = predict(m1, newdata = dat[split == i,], type = \"prob\")[,2]\n  }\n}\n\n# getting best hyperparameter option on test\ninnerLoss = function(x) Metrics::auc(dat$survived, x)\nres = apply(pred, 2, innerLoss)\nchoice = which.max(res) \n\n# fitting model again with best hyperparameters \n# and all test / validation data \nmFinal = randomForest(survived~., data = dat, nodesize = hyperparameter$nodesize[choice])\n\n# testing final prediction on validation data \nfinalPred = predict(mFinal, newdata = df[validation,], type = \"prob\")[,2]\n\nMetrics::auc(df[validation,]$survived, finalPred)\n\n[1] 0.8265476\n\n\nCreate submissions:\n\nnewdata = titanic_df[is.na(titanic_df$survived), ]\npredictions = predict(rf, newdata = newdata, type = \"prob\")[,2]\n\nwrite.csv(data.frame(y = predictions), file = \"rf_max.csv\")\n\nAnd upload the csv file\nImportant:\n\nThe predictions must be probabilities\nPredictions must the same number of observations as in the raw titanic_ml$response == NA column, this is why we impute the NA in the features, otherwise these observations would be dropped.",
    "crumbs": [
      "Machine Learning Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Managing algorithmic complexity</span>"
    ]
  },
  {
    "objectID": "A3-BiasVarianceTradeOff.html#references",
    "href": "A3-BiasVarianceTradeOff.html#references",
    "title": "3  Managing algorithmic complexity",
    "section": "References",
    "text": "References\n\n\n\n\nDormann, Carsten F, Justin M Calabrese, Gurutzeta Guillera-Arroita, Eleni Matechou, Volker Bahn, Kamil Bartoń, Colin M Beale, et al. 2018. “Model Averaging in Ecology: A Review of Bayesian, Information-Theoretic, and Tactical Approaches for Predictive Inference.” Ecological Monographs 88 (4): 485–504.\n\n\nZou, Hui, and Trevor Hastie. 2005. “Regularization and Variable Selection via the Elastic Net.” Journal of the Royal Statistical Society: Series B (Statistical Methodology) 67 (2): 301–20.",
    "crumbs": [
      "Machine Learning Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Managing algorithmic complexity</span>"
    ]
  },
  {
    "objectID": "A4-MLpipeline.html",
    "href": "A4-MLpipeline.html",
    "title": "4  Machine learning pipeline",
    "section": "",
    "text": "4.1 Data preparation\nThe Standard Machine Learning Pipeline using the Titanic Data set\nBefore we specialize on any tuning, it is important to understand that machine learning always consists of a pipeline of actions.\nThe typical machine learning workflow consist of:\nIn the following example, we use tidyverse, a collection of R packages for data science / data manipulation mainly developed by Hadley Wickham.\nFor this lecture you need the Titanic data set provided by us (via the EcoData package).\nLoad necessary libraries:\nlibrary(tidyverse)\nLoad data set:\nlibrary(EcoData)\ndata(titanic_ml)\ndata = titanic_ml\nStandard summaries:\nstr(data)\n\n'data.frame':   1309 obs. of  13 variables:\n $ pclass   : int  2 1 3 3 3 3 3 1 3 1 ...\n $ survived : int  1 1 0 0 0 0 0 1 0 1 ...\n $ name     : chr  \"Sinkkonen, Miss. Anna\" \"Woolner, Mr. Hugh\" \"Sage, Mr. Douglas Bullen\" \"Palsson, Master. Paul Folke\" ...\n $ sex      : Factor w/ 2 levels \"female\",\"male\": 1 2 2 2 2 2 2 1 1 1 ...\n $ age      : num  30 NA NA 6 30.5 38.5 20 53 NA 42 ...\n $ sibsp    : int  0 0 8 3 0 0 0 0 0 0 ...\n $ parch    : int  0 0 2 1 0 0 0 0 0 0 ...\n $ ticket   : Factor w/ 929 levels \"110152\",\"110413\",..: 221 123 779 542 589 873 472 823 588 834 ...\n $ fare     : num  13 35.5 69.55 21.07 8.05 ...\n $ cabin    : Factor w/ 187 levels \"\",\"A10\",\"A11\",..: 1 94 1 1 1 1 1 1 1 1 ...\n $ embarked : Factor w/ 4 levels \"\",\"C\",\"Q\",\"S\": 4 4 4 4 4 4 4 2 4 2 ...\n $ body     : int  NA NA NA NA 50 32 NA NA NA NA ...\n $ home.dest: Factor w/ 370 levels \"\",\"?Havana, Cuba\",..: 121 213 1 1 1 1 322 350 1 1 ...\n\nsummary(data)\n\n     pclass         survived          name               sex     \n Min.   :1.000   Min.   :0.0000   Length:1309        female:466  \n 1st Qu.:2.000   1st Qu.:0.0000   Class :character   male  :843  \n Median :3.000   Median :0.0000   Mode  :character               \n Mean   :2.295   Mean   :0.3853                                  \n 3rd Qu.:3.000   3rd Qu.:1.0000                                  \n Max.   :3.000   Max.   :1.0000                                  \n                 NA's   :655                                     \n      age              sibsp            parch            ticket    \n Min.   : 0.1667   Min.   :0.0000   Min.   :0.000   CA. 2343:  11  \n 1st Qu.:21.0000   1st Qu.:0.0000   1st Qu.:0.000   1601    :   8  \n Median :28.0000   Median :0.0000   Median :0.000   CA 2144 :   8  \n Mean   :29.8811   Mean   :0.4989   Mean   :0.385   3101295 :   7  \n 3rd Qu.:39.0000   3rd Qu.:1.0000   3rd Qu.:0.000   347077  :   7  \n Max.   :80.0000   Max.   :8.0000   Max.   :9.000   347082  :   7  \n NA's   :263                                        (Other) :1261  \n      fare                     cabin      embarked      body      \n Min.   :  0.000                  :1014    :  2    Min.   :  1.0  \n 1st Qu.:  7.896   C23 C25 C27    :   6   C:270    1st Qu.: 72.0  \n Median : 14.454   B57 B59 B63 B66:   5   Q:123    Median :155.0  \n Mean   : 33.295   G6             :   5   S:914    Mean   :160.8  \n 3rd Qu.: 31.275   B96 B98        :   4            3rd Qu.:256.0  \n Max.   :512.329   C22 C26        :   4            Max.   :328.0  \n NA's   :1         (Other)        : 271            NA's   :1188   \n                home.dest  \n                     :564  \n New York, NY        : 64  \n London              : 14  \n Montreal, PQ        : 10  \n Cornwall / Akron, OH:  9  \n Paris, France       :  9  \n (Other)             :639\nThe name variable consists of 1309 unique factors (there are 1309 observations…) and could be now transformed. If you are interested in how to do that, take a look at the following box.",
    "crumbs": [
      "Machine Learning Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Machine learning pipeline</span>"
    ]
  },
  {
    "objectID": "A4-MLpipeline.html#data-preparation",
    "href": "A4-MLpipeline.html#data-preparation",
    "title": "4  Machine learning pipeline",
    "section": "",
    "text": "Feature engineering of the name variable\n\n\n\n\n\n\nlength(unique(data$name))\n\n[1] 1307\n\n\nHowever, there is a title in each name. Let’s extract the titles:\n\nWe will extract all names and split each name after each comma “,”.\nWe will split the second split of the name after a point “.” and extract the titles.\n\n\nfirst_split = sapply(data$name,\n                     function(x) stringr::str_split(x, pattern = \",\")[[1]][2])\ntitles = sapply(first_split,\n                function(x) strsplit(x, \".\",fixed = TRUE)[[1]][1])\n\nWe get 18 unique titles:\n\ntable(titles)\n\ntitles\n         Capt           Col           Don          Dona            Dr \n            1             4             1             1             8 \n     Jonkheer          Lady         Major        Master          Miss \n            1             1             2            61           260 \n         Mlle           Mme            Mr           Mrs            Ms \n            2             1           757           197             2 \n          Rev           Sir  the Countess \n            8             1             1 \n\n\nA few titles have a very low occurrence rate:\n\ntitles = stringr::str_trim((titles))\ntitles %&gt;%\n fct_count()\n\n# A tibble: 18 × 2\n   f                n\n   &lt;fct&gt;        &lt;int&gt;\n 1 Capt             1\n 2 Col              4\n 3 Don              1\n 4 Dona             1\n 5 Dr               8\n 6 Jonkheer         1\n 7 Lady             1\n 8 Major            2\n 9 Master          61\n10 Miss           260\n11 Mlle             2\n12 Mme              1\n13 Mr             757\n14 Mrs            197\n15 Ms               2\n16 Rev              8\n17 Sir              1\n18 the Countess     1\n\n\nWe will combine titles with low occurrences into one title, which we can easily do with the forcats package.\n\ntitles2 =\n  forcats::fct_collapse(titles,\n                        officer = c(\"Capt\", \"Col\", \"Major\", \"Dr\", \"Rev\"),\n                        royal = c(\"Jonkheer\", \"Don\", \"Sir\",\n                                  \"the Countess\", \"Dona\", \"Lady\"),\n                        miss = c(\"Miss\", \"Mlle\"),\n                        mrs = c(\"Mrs\", \"Mme\", \"Ms\")\n                        )\n\nWe can count titles again to see the new number of titles:\n\ntitles2 %&gt;%  \n   fct_count()\n\n# A tibble: 6 × 2\n  f           n\n  &lt;fct&gt;   &lt;int&gt;\n1 officer    23\n2 royal       6\n3 Master     61\n4 miss      262\n5 mrs       200\n6 Mr        757\n\n\nAdd new title variable to data set:\n\ndata =\n  data %&gt;%\n    mutate(title = titles2)\n\n\n\n\n\n4.1.1 Imputation\nNAs are a common problem in ML and most ML algorithms cannot handle NAs. For example, the age variable has 20% NAs:\n\nsummary(data$age)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1667 21.0000 28.0000 29.8811 39.0000 80.0000     263 \n\nsum(is.na(data$age)) / nrow(data)\n\n[1] 0.2009167\n\n\nThere are few options how to handle NAs:\n\nDrop observations with NAs, however, we may lose many observations (not what we want!)\nImputation, fill the missing values\n\nWe impute (fill) the missing values, for example with the median age. However, age itself might depend on other variables such as sex, class and title. Thus, instead of filling the NAs with the overall median of the passengers, we want to fill the NAs with the median age of these groups so that the associations with the other groups are preserved (or in other words, that the new values are hopefully closer to the unknown true values).\nIn tidyverse we can “group” the data, i.e. we will nest the observations within categorical variables for which we assume that there may be an association with age (here: group_by after sex, pclass and title). After grouping, all operations (such as our median(age....)) will be done within the specified groups (to get better estimates of these missing NAs).\n\ndata =\n  data %&gt;%\n    select(survived, sex, age, fare, pclass) %&gt;% \n    group_by(sex, pclass) %&gt;%\n    mutate(age2 = ifelse(is.na(age), median(age, na.rm = TRUE), age)) %&gt;%\n    mutate(fare2 = ifelse(is.na(fare), median(fare, na.rm = TRUE), fare)) %&gt;%\n    ungroup()\n\n\n\n4.1.2 Preprocessing and Feature Selection\nLater (tomorrow), we want to use Keras in our example, but it cannot handle factors and requires the data to be scaled.\nNormally, one would do this for all predictors, but as we only show the pipeline here, we have sub-selected a bunch of predictors and do this only for them. We first scale the numeric predictors and change the factors with only two groups/levels into integers (this can be handled by Keras).\n\ndata_sub =\n  data %&gt;%\n    select(survived, sex, age2, fare2, pclass) %&gt;%\n    mutate(age2 = scales::rescale(age2, c(0, 1)),\n           fare2 = scales::rescale(fare2, c(0, 1))) %&gt;%\n    mutate(sex = as.integer(sex) - 1L,\n           pclass = as.integer(pclass - 1L))\n\n\n\n\n\n\n\nTransforming factors with more than two levels\n\n\n\n\n\nFactors with more than two levels should be one hot encoded (Make columns for every different factor level and write 1 in the respective column for every taken feature value and 0 else. For example: \\(\\{red, green, green, blue, red\\} \\rightarrow \\{(0,0,1), (0,1,0), (0,1,0), (1,0,0), (0,0,1)\\}\\)):\n\none_title = model.matrix(~0+as.factor(title), data = data)\ncolnames(one_title) = levels(data$title)\n\none_sex = model.matrix(~0+as.factor(sex), data = data)\ncolnames(one_sex) = levels(data$sex)\n\none_pclass = model.matrix(~0+as.factor(pclass), data = data)\ncolnames(one_pclass) = paste0(\"pclass\", 1:length(unique(data$pclass)))\n\nAnd we have to add the dummy encoded variables to the data set:\n\ndata = cbind(data.frame(survived= data$survived),\n                 one_title, one_sex, age = data$age2,\n                 fare = data$fare2, one_pclass)\nhead(data)",
    "crumbs": [
      "Machine Learning Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Machine learning pipeline</span>"
    ]
  },
  {
    "objectID": "A4-MLpipeline.html#modelling",
    "href": "A4-MLpipeline.html#modelling",
    "title": "4  Machine learning pipeline",
    "section": "4.2 Modelling",
    "text": "4.2 Modelling\n\n4.2.1 Split data for final predictions\nTo tune our hyperparameters and evaluate our models, we split the data into the training and testing data. The testing data are the observations where the response is NA:\n\nsummary(data_sub$survived)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.0000  0.0000  0.3853  1.0000  1.0000     655 \n\n\n655 observations have NAs in our response variable, these are the observations for which we want to make predictions at the end of our pipeline.\n\ndata_new = data_sub[is.na(data_sub$survived),]\ndata_obs = data_sub[!is.na(data_sub$survived),]\n\n\n\n4.2.2 Hyperparameter optimization\nWe want to tune our hyperparameters (\\(\\lambda\\) and \\(\\alpha\\)). Normally, we should do a nested CV on our training data (data_obs), however, we assume that the test data on the submission server is our outer split, so we can tune our hyperparameters using a n-fold Cross-Validation which serves as our inner CV.\n\n\nAgain, why is it important to tune hyperparameters? Hyperparameters (configuration parameters of our ML algorithms that (mostly) control their complexity) are usually tuned (optimized) in an automatic / systematic way. A common procedure, called random search, is to sample random configuration combinations from the set of hyperparameters and test for each combination the prediction error.\nWe implement manually a CV to tune the learning rate. We start with a 3xCV and 10x different learning rates:\n\nlibrary(cito)\nset.seed(42)\nmodel = dnn(survived~.,\n            data = data_obs, \n            loss = \"binomial\",\n            lr = tune(0.001, 0.1),\n            tuning = config_tuning(CV = 3, steps = 10)\n            )\n\nRegistered S3 methods overwritten by 'reformulas':\n  method       from\n  head.call    cito\n  head.formula cito\n  head.name    cito\n\n\nStarting hyperparameter tuning...\nFitting final model...\n\nmodel$tuning\n\n# A tibble: 10 × 5\n   steps  test train models      lr\n   &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt;    &lt;dbl&gt;\n 1     1  329.     0 NA     0.0394 \n 2     2  319.     0 NA     0.0623 \n 3     3  325.     0 NA     0.0627 \n 4     4  326.     0 NA     0.0804 \n 5     5  326.     0 NA     0.0658 \n 6     6  315.     0 NA     0.0683 \n 7     7  321.     0 NA     0.0417 \n 8     8  317.     0 NA     0.0667 \n 9     9  346.     0 NA     0.00368\n10    10  333.     0 NA     0.0818",
    "crumbs": [
      "Machine Learning Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Machine learning pipeline</span>"
    ]
  },
  {
    "objectID": "A4-MLpipeline.html#predictions-and-submission",
    "href": "A4-MLpipeline.html#predictions-and-submission",
    "title": "4  Machine learning pipeline",
    "section": "4.3 Predictions and Submission",
    "text": "4.3 Predictions and Submission\nWhen we are satisfied with the performance of our model, we will create predictions for the new observations on the submission server. cito directly returns the best model so we do not have to fit the final model.\nWe submit our predictions to the submission server at http://rhsbio7.uni-regensburg.de:8500.\nFor the submission it is critical to change the predictions into a data.frame, select the second column (the probability to survive), and save it with the write.csv function:\n\ndata_new = data_sub[is.na(data_sub$survived),]\npredictions = predict(model, data_new, type = \"response\")[,1] \nwrite.csv(data.frame(y = predictions), file = \"Max_1.csv\")",
    "crumbs": [
      "Machine Learning Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Machine learning pipeline</span>"
    ]
  },
  {
    "objectID": "A4-MLpipeline.html#exercises",
    "href": "A4-MLpipeline.html#exercises",
    "title": "4  Machine learning pipeline",
    "section": "4.4 Exercises",
    "text": "4.4 Exercises\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuestion: Hyperparameter tuning rf\n\n\n\n\n\n\n\n\n\n\nHyperparameter\nExplanation\n\n\n\n\nmtry\nSubset of features randomly selected in each node (from which the algorithm can select the feature that will be used to split the data).\n\n\nminimum node size\nMinimal number of observations allowed in a node (before the branching is canceled)\n\n\nmax depth\nMaximum number of tree depth\n\n\n\nComing back to the titanic dataset from the morning, we want to optimize nodesize, max depth, and mtry in our RF using a simple CV.\nPrepare the data:\n\nlibrary(EcoData)\nlibrary(dplyr)\nlibrary(missRanger)\ndata(titanic_ml)\ndata = titanic_ml\ndata = \n  data |&gt; select(survived, sex, age, fare, pclass)\n\n# data imputation without the response variable!\ndata[,-1] = missRanger(data[,-1], verbose = 0) \n\ndata$survived = as.factor(data$survived)\n\ndata_sub =\n  data |&gt; \n    mutate(age = scales::rescale(age, c(0, 1)),\n           fare = scales::rescale(fare, c(0, 1))) |&gt; \n    mutate(sex = as.integer(sex) - 1L,\n           pclass = as.integer(pclass - 1L))\ndata_new = data_sub[is.na(data_sub$survived),] # for which we want to make predictions at the end\ndata_obs = data_sub[!is.na(data_sub$survived),] # data with known response\ndata_sub$survived = as.factor(data_sub$survived)\ndata_obs$survived = as.factor(data_obs$survived)\n\nHints:\n\nadjust the ‘type’ argument in the predict(…) method (the default is to predict classes)\nwhen predicting probabilities, the randomForest will return a matrix, a column for each class, we are interested in the probability of surviving (so the second column)\ntune nodesize, mtry, and maxnodes\nuse more features and do feature engineering!\n\n\n\n\n\n\n\nCode template\n\n\n\n\n\n\nlibrary(randomForest)\ndata_obs = data_sub[!is.na(data_sub$survived),] \nset.seed(42)\n\ncv = 3\nhyper_minnodesize = ... # \n\ntuning_results =\n    sapply(1:length(hyper_minnodesize), function(k) {\n        auc_inner = NULL\n        for(j in 1:cv) {\n          inner_split = as.integer(cut(1:nrow(data_obs), breaks = cv))\n          train_inner = data_obs[inner_split != j, ]\n          test_inner = data_obs[inner_split == j, ]\n          \n          model = randomForest(survived~.,data = train_inner, nodesize = hyper_minnodesize[k])\n          predictions = predict(model, newdata=test_inner, type = \"prob\")[,2]\n          \n          auc_inner[j]= Metrics::auc(test_inner$survived, predictions)\n        }\n      return(mean(auc_inner))\n    })\n\nresults = data.frame(minnodesize = hyper_minnodesize, AUC = tuning_results)\n\nprint(results)\n\n\n\n\n\n\n\n\nClick here to see the solution\n\n\nlibrary(randomForest)\n\nrandomForest 4.7-1.2\n\n\nType rfNews() to see new features/changes/bug fixes.\n\n\n\nAttaching package: 'randomForest'\n\n\nThe following object is masked from 'package:dplyr':\n\n    combine\n\n\nThe following object is masked from 'package:ggplot2':\n\n    margin\n\ndata_obs = data_sub[!is.na(data_sub$survived),] \nset.seed(42)\n\ncv = 3\nhyper_minnodesize = sample(300, 20)\nhyper_mtry = sample(4, 20, replace = TRUE)\n\ntuning_results =\n    sapply(1:length(hyper_minnodesize), function(k) {\n        auc_inner = NULL\n        for(j in 1:cv) {\n          inner_split = as.integer(cut(1:nrow(data_obs), breaks = cv))\n          train_inner = data_obs[inner_split != j, ]\n          test_inner = data_obs[inner_split == j, ]\n          model = randomForest(survived~.,data = train_inner, \n                               nodesize = hyper_minnodesize[k], \n                               mtry = hyper_mtry[k])\n          predictions = predict(model, test_inner, type=\"prob\")[,2]\n          \n          auc_inner[j]= Metrics::auc(test_inner$survived, predictions)\n        }\n      return(mean(auc_inner))\n    })\n\nresults = data.frame(minnodesize = hyper_minnodesize, mtry = hyper_mtry, AUC = tuning_results)\n\nprint(results)\n\n   minnodesize mtry       AUC\n1           49    2 0.8207934\n2          153    3 0.8054506\n3           74    3 0.8169019\n4          228    2 0.8051004\n5          146    2 0.8082379\n6          122    4 0.7948290\n7          300    4 0.7615291\n8          128    4 0.7905482\n9           24    2 0.8294439\n10          89    2 0.8175564\n11         165    1 0.7951680\n12         110    4 0.7898386\n13          20    1 0.8266383\n14         291    4 0.7444037\n15         283    2 0.8017500\n16         109    4 0.8004647\n17           5    2 0.8319759\n18         212    3 0.7996817\n19         259    4 0.7444037\n20         292    3 0.7970839\n\n# highest AUC / best hyperparameters\nbest_hyper = results[which.max(results$AUC),]\nprint(best_hyper)\n\n   minnodesize mtry       AUC\n17           5    2 0.8319759\n\n\nMake predictions for the submission server:\n\nmodel = randomForest(survived~.,data = data_obs, \n                     nodesize = best_hyper[1,1], \n                     mtry = best_hyper[1,2])\n\nwrite.csv(data.frame(y = predict(model, newdata=data_new, type=\"prob\")[,2]), file = \"Max_titanic_rf.csv\")",
    "crumbs": [
      "Machine Learning Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Machine learning pipeline</span>"
    ]
  },
  {
    "objectID": "B1-Trees.html",
    "href": "B1-Trees.html",
    "title": "5  Tree-based Algorithms",
    "section": "",
    "text": "5.1 Classification and Regression Trees\nTree-based models in general use a series of if-then rules to generate predictions from one or more decision trees. In this lecture, we will explore regression and classification trees by the example of the airquality data set. There is one important hyperparameter for regression trees: “minsplit”.\nWe first prepare and visualize the data and afterwards fit a decision tree.\nlibrary(rpart)\nlibrary(rpart.plot)\n\ndata = airquality[complete.cases(airquality),]\nFit and visualize one(!) regression tree:\nrt = rpart(Ozone~., data = data, control = rpart.control(minsplit = 10))\nrpart.plot(rt)\nVisualize the predictions:\npred = predict(rt, data)\nplot(data$Temp, data$Ozone)\nlines(data$Temp[order(data$Temp)], pred[order(data$Temp)], col = \"red\")\nThe angular form of the prediction line is typical for regression trees and is a weakness of it.",
    "crumbs": [
      "Understanding ML Algorithms",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Tree-based Algorithms</span>"
    ]
  },
  {
    "objectID": "B1-Trees.html#classification-and-regression-trees",
    "href": "B1-Trees.html#classification-and-regression-trees",
    "title": "5  Tree-based Algorithms",
    "section": "",
    "text": "It controls the depth of tree (see the help of rpart for a description).\nIt controls the complexity of the tree and can thus also be seen as a regularization parameter.",
    "crumbs": [
      "Understanding ML Algorithms",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Tree-based Algorithms</span>"
    ]
  },
  {
    "objectID": "B1-Trees.html#random-forest",
    "href": "B1-Trees.html#random-forest",
    "title": "5  Tree-based Algorithms",
    "section": "5.2 Random Forest",
    "text": "5.2 Random Forest\nTo overcome this weakness, a random forest uses an ensemble of regression/classification trees. Thus, the random forest is in principle nothing else than a normal regression/classification tree, but it uses the idea of the “wisdom of the crowd” : By asking many people (regression/classification trees) one can make a more informed decision (prediction/classification). When you want to buy a new phone for example you also wouldn’t go directly into the shop, but search in the internet and ask your friends and family.\nThere are two randomization steps with the random forest that are responsible for their success:\n\nBootstrap samples for each tree (we will sample observations with replacement from the data set. For the phone this is like not everyone has experience about each phone).\nAt each split, we will sample a subset of predictors that is then considered as potential splitting criterion (for the phone this is like that not everyone has the same decision criteria). Annotation: While building a decision tree (random forests consist of many decision trees), one splits the data at some point according to their features. For example if you have females and males, big and small people in a crowd, you con split this crowd by gender and then by size or by size and then by gender to build a decision tree.\n\nApplying the random forest follows the same principle as for the methods before: We visualize the data (we have already done this so often for the airquality data set, thus we skip it here), fit the algorithm and then plot the outcomes.\nFit a random forest and visualize the predictions:\n\nlibrary(randomForest)\nset.seed(123)\n\ndata = airquality[complete.cases(airquality),]\n\nrf = randomForest(Ozone~., data = data)\npred = predict(rf, data)\nplot(Ozone~Temp, data = data)\nlines(data$Temp[order(data$Temp)], pred[order(data$Temp)], col = \"red\")\n\n\n\n\n\n\n\n\nOne advantage of random forests is that we will get an importance of variables. At each split in each tree, the improvement in the split-criterion is the importance measure attributed to the splitting variable, and is accumulated over all the trees in the forest separately for each variable. Thus the variable importance shows us how important a variable is averaged over all trees.\n\nrf$importance\n\n        IncNodePurity\nSolar.R      17969.59\nWind         31978.36\nTemp         34176.71\nMonth        10753.73\nDay          15436.47\n\n\nThere are several important hyperparameters in a random forest that we can tune to get better results:\n\n\n\n\n\n\n\nHyperparameter\nExplanation\n\n\n\n\nmtry\nSubset of features randomly selected in each node (from which the algorithm can select the feature that will be used to split the data).\n\n\nminimum node size\nMinimal number of observations allowed in a node (before the branching is canceled)\n\n\nmax depth\nMaximum number of tree depth",
    "crumbs": [
      "Understanding ML Algorithms",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Tree-based Algorithms</span>"
    ]
  },
  {
    "objectID": "B1-Trees.html#boosted-regression-trees",
    "href": "B1-Trees.html#boosted-regression-trees",
    "title": "5  Tree-based Algorithms",
    "section": "5.3 Boosted Regression Trees",
    "text": "5.3 Boosted Regression Trees\nRandom forests fit hundreds of trees independent of each other. Here, the idea of a boosted regression tree comes in. Maybe we could learn from the errors the previous weak learners made and thus enhance the performance of the algorithm.\nA boosted regression tree (BRT) starts with a simple regression tree (weak learner) and then sequentially fits additional trees to improve the results. There are two different strategies to do so:\n\nAdaBoost: Wrong classified observations (by the previous tree) will get a higher weight and therefore the next trees will focus on difficult/missclassified observations.\nGradient boosting (state of the art): Each sequential model will be fit on the residual errors of the previous model (strongly simplified, the actual algorithm is very complex).\n\nWe can fit a boosted regression tree using xgboost, but before we have to transform the data into a xgb.Dmatrix (which is a xgboost specific data type, the package sadly doesn’t support R matrices or data.frames).\n\nlibrary(xgboost)\nset.seed(123)\n\ndata = airquality[complete.cases(airquality),]\n\n\ndata_xg = xgb.DMatrix(data = as.matrix(scale(data[,-1])), label = data$Ozone)\nbrt = xgboost(data_xg, nrounds = 16L)\n\n[1] train-rmse:39.724624 \n[2] train-rmse:30.225761 \n[3] train-rmse:23.134840 \n[4] train-rmse:17.899179 \n[5] train-rmse:14.097785 \n[6] train-rmse:11.375457 \n[7] train-rmse:9.391276 \n[8] train-rmse:7.889690 \n[9] train-rmse:6.646586 \n[10]    train-rmse:5.804859 \n[11]    train-rmse:5.128437 \n[12]    train-rmse:4.456416 \n[13]    train-rmse:4.069464 \n[14]    train-rmse:3.674615 \n[15]    train-rmse:3.424578 \n[16]    train-rmse:3.191301 \n\n\nThe parameter “nrounds” controls how many sequential trees we fit, in our example this was 16. When we predict on new data, we can limit the number of trees used to prevent overfitting (remember: each new tree tries to improve the predictions of the previous trees).\nLet us visualize the predictions for different numbers of trees:\n\noldpar = par(mfrow = c(2, 2))\nfor(i in 1:4){\n  pred = predict(brt, newdata = data_xg, ntreelimit = i)\n  plot(data$Temp, data$Ozone, main = i)\n  lines(data$Temp[order(data$Temp)], pred[order(data$Temp)], col = \"red\")\n}\n\n[11:43:13] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead.\n\n\n[11:43:13] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead.\n\n\n[11:43:13] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead.\n\n\n[11:43:14] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead.\n\n\n\n\n\n\n\n\npar(oldpar)\n\nThere are also other ways to control for complexity of the boosted regression tree algorithm:\n\nmax_depth: Maximum depth of each tree.\nshrinkage (each tree will get a weight and the weight will decrease with the number of trees).\n\nWhen having specified the final model, we can obtain the importance of the variables like for random forests:\n\nxgboost::xgb.importance(model = brt)\n\n   Feature        Gain     Cover  Frequency\n    &lt;char&gt;       &lt;num&gt;     &lt;num&gt;      &lt;num&gt;\n1:    Temp 0.570072012 0.2958229 0.24836601\n2:    Wind 0.348230653 0.3419576 0.24183007\n3: Solar.R 0.058795502 0.1571072 0.30718954\n4:     Day 0.019529985 0.1779925 0.16993464\n5:   Month 0.003371847 0.0271197 0.03267974\n\nsqrt(mean((data$Ozone - pred)^2)) # RMSE\n\n[1] 17.89918\n\ndata_xg = xgb.DMatrix(data = as.matrix(scale(data[,-1])), label = data$Ozone)\n\nOne important strength of xgboost is that we can directly do a cross-validation (which is independent of the boosted regression tree itself!) and specify its properties with the parameter “n-fold”:\n\nset.seed(123)\n\nbrt = xgboost(data_xg, nrounds = 5L)\n\n[1] train-rmse:39.724624 \n[2] train-rmse:30.225761 \n[3] train-rmse:23.134840 \n[4] train-rmse:17.899179 \n[5] train-rmse:14.097785 \n\nbrt_cv = xgboost::xgb.cv(data = data_xg, nfold = 3L,\n                         nrounds = 3L, nthreads = 4L)\n\n[1] train-rmse:39.895106+2.127355   test-rmse:40.685477+5.745327 \n[2] train-rmse:30.367660+1.728788   test-rmse:32.255812+5.572963 \n[3] train-rmse:23.446237+1.366757   test-rmse:27.282435+5.746244 \n\nprint(brt_cv)\n\n##### xgb.cv 3-folds\n  iter train_rmse_mean train_rmse_std test_rmse_mean test_rmse_std\n &lt;num&gt;           &lt;num&gt;          &lt;num&gt;          &lt;num&gt;         &lt;num&gt;\n     1        39.89511       2.127355       40.68548      5.745327\n     2        30.36766       1.728788       32.25581      5.572963\n     3        23.44624       1.366757       27.28244      5.746244\n\n\nAnnotation: The original data set is randomly partitioned into \\(n\\) equal sized subsamples. Each time, the model is trained on \\(n - 1\\) subsets (training set) and tested on the left out set (test set) to judge the performance.\nIf we do three-folded cross-validation, we actually fit three different boosted regression tree models (xgboost models) on \\(\\approx 67\\%\\) of the data points. Afterwards, we judge the performance on the respective holdout. This now tells us how well the model performed.\nImportant hyperparameters:\n\n\n\n\n\n\n\nHyperparameter\nExplanation\n\n\n\n\neta\nlearning rate (weighting of the sequential trees)\n\n\nmax depth\nmaximal depth in the trees (small = low complexity, large = high complexity)\n\n\nsubsample\nsubsample ratio of the data (bootstrap ratio)\n\n\nlambda\nregularization strength of the individual trees\n\n\nmax tree\nmaximal number of trees in the ensemble",
    "crumbs": [
      "Understanding ML Algorithms",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Tree-based Algorithms</span>"
    ]
  },
  {
    "objectID": "B1-Trees.html#exercise---trees",
    "href": "B1-Trees.html#exercise---trees",
    "title": "5  Tree-based Algorithms",
    "section": "5.4 Exercise - Trees",
    "text": "5.4 Exercise - Trees\n\n\n\n\n\n\nQuestion: Regression Trees\n\n\n\nWe will use the following code snippet to understand the hyperparameter mincut and thus the predictive performance.\n\nlibrary(tree)\nset.seed(123)\n\ndata = airquality\nrt = tree(Ozone~., data = data,\n          control = tree.control(mincut = 1L, nobs = nrow(data)))\n\nplot(rt)\ntext(rt)\npred = predict(rt, data)\nplot(data$Temp, data$Ozone)\nlines(data$Temp[order(data$Temp)], pred[order(data$Temp)], col = \"red\")\nsqrt(mean((data$Ozone - pred)^2)) # RMSE\n\nTry different mincut parameters and see what happens. (Compare the root mean squared error for different mincut parameters and explain what you see. Compare predictions for different mincut parameters and explain what happens.) What was wrong in the snippet above?\n\n\n\n\nClick here to see the solution\n\n\nlibrary(tree)\nset.seed(123)\n\ndata = airquality[complete.cases(airquality),]\n\ndoTask = function(mincut){\n  rt = tree(Ozone~., data = data,\n            control = tree.control(mincut = mincut, nobs = nrow(data)))\n\n  pred = predict(rt, data)\n  plot(data$Temp, data$Ozone,\n       main = paste0(\n         \"mincut: \", mincut,\n         \"\\nRMSE: \", round(sqrt(mean((data$Ozone - pred)^2)), 2)\n      )\n  )\n  lines(data$Temp[order(data$Temp)], pred[order(data$Temp)], col = \"red\")\n}\n\nfor(i in c(1, 2, 3, 5, 10, 15, 25, 50, 54, 55, 56, 57, 75, 100)){ doTask(i) }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nApproximately at mincut = 15, prediction is the best (mind overfitting). After mincut = 56, the prediction has no information at all and the RMSE stays constant.\nMind the complete cases of the airquality data set, that was the error.\n\n\n\n\n\n\n\nQuestion: Random forest\n\n\n\nWe will use the following code snippet to explore a random forest:\n\nlibrary(randomForest)\nset.seed(123)\n\ndata = airquality[complete.cases(airquality),]\n\nrf = randomForest(Ozone~., data = data)\n\npred = predict(rf, data)\nimportance(rf)\n\n        IncNodePurity\nSolar.R      17969.59\nWind         31978.36\nTemp         34176.71\nMonth        10753.73\nDay          15436.47\n\ncat(\"RMSE: \", sqrt(mean((data$Ozone - pred)^2)), \"\\n\")\n\nRMSE:  9.507848 \n\nplot(data$Temp, data$Ozone)\nlines(data$Temp[order(data$Temp)], pred[order(data$Temp)], col = \"red\")\n\n\n\n\n\n\n\n\nTry different values for the nodesize describe how the predictions depend on this parameter.\n\n\n\n\nClick here to see the solution\n\n\nlibrary(randomForest)\nset.seed(123)\n\ndata = airquality[complete.cases(airquality),]\n\n\nfor(nodesize in c(1, 15, 50, 100)){\n  for(mtry in c(1, 3, 5)){\n    rf = randomForest(Ozone~., data = data, nodesize = nodesize)\n    \n    pred = predict(rf, data)\n    \n    plot(data$Temp, data$Ozone, main = paste0(\n        \"    nodesize: \", nodesize,\n        \"\\nRMSE: \", round(sqrt(mean((data$Ozone - pred)^2)), 2)\n      )\n    )\n    lines(data$Temp[order(data$Temp)], pred[order(data$Temp)], col = \"red\")\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNodesize affects the complexity. In other words: The bigger the nodesize, the smaller the trees and the more bias/less variance.\n\n\n\n\n\n\n\nQuestion: Boosted regression trees\n\n\n\n\nlibrary(xgboost)\nlibrary(animation)\nset.seed(123)\n\nx1 = seq(-3, 3, length.out = 100)\nx2 = seq(-3, 3, length.out = 100)\nx = expand.grid(x1, x2)\ny = apply(x, 1, function(t) exp(-t[1]^2 - t[2]^2))\n\n\nimage(matrix(y, 100, 100), main = \"Original image\", axes = FALSE, las = 2)\naxis(1, at = seq(0, 1, length.out = 10),\n     labels = round(seq(-3, 3, length.out = 10), 1))\naxis(2, at = seq(0, 1, length.out = 10),\n     labels = round(seq(-3, 3, length.out = 10), 1), las = 2)\n\n\nmodel = xgboost::xgboost(xgb.DMatrix(data = as.matrix(x), label = y),\n                         nrounds = 500L, verbose = 0L)\npred = predict(model, newdata = xgb.DMatrix(data = as.matrix(x)),\n               ntreelimit = 10L)\n\nsaveGIF(\n  {\n    for(i in c(1, 2, 4, 8, 12, 20, 40, 80, 200)){\n      pred = predict(model, newdata = xgb.DMatrix(data = as.matrix(x)),\n                     ntreelimit = i)\n      image(matrix(pred, 100, 100), main = paste0(\"Trees: \", i),\n            axes = FALSE, las = 2)\n      axis(1, at = seq(0, 1, length.out = 10),\n           labels = round(seq(-3, 3, length.out = 10), 1))\n      axis(2, at = seq(0, 1, length.out = 10),\n           labels = round(seq(-3, 3, length.out = 10), 1), las = 2)\n    }\n  },\n  movie.name = \"boosting.gif\", autobrowse = FALSE\n)\n\n\nRun the code above and play with different values for max_depth and describe what you see!\nTip: have a look at the boosting.gif.\n\n\n\n\nClick here to see the solution\n\n\nlibrary(xgboost)\nlibrary(animation)\nset.seed(123)\n\nx1 = seq(-3, 3, length.out = 100)\nx2 = seq(-3, 3, length.out = 100)\nx = expand.grid(x1, x2)\ny = apply(x, 1, function(t) exp(-t[1]^2 - t[2]^2))\n\nimage(matrix(y, 100, 100), main = \"Original image\", axes = FALSE, las = 2)\naxis(1, at = seq(0, 1, length.out = 10),\n     labels = round(seq(-3, 3, length.out = 10), 1))\naxis(2, at = seq(0, 1, length.out = 10),\n     labels = round(seq(-3, 3, length.out = 10), 1), las = 2)\n\nfor(max_depth in c(3, 6, 10, 20)){\n  model = xgboost::xgboost(xgb.DMatrix(data = as.matrix(x), label = y),\n                           max_depth = max_depth,\n                           nrounds = 500, verbose = 0L)\n\n  saveGIF(\n    {\n      for(i in c(1, 2, 4, 8, 12, 20, 40, 80, 200)){\n        pred = predict(model, newdata = xgb.DMatrix(data = as.matrix(x)),\n                       ntreelimit = i)\n        image(matrix(pred, 100, 100),\n              main = paste0(\"eta: \", eta,\n                            \"    max_depth: \", max_depth,\n                            \"    Trees: \", i),\n              axes = FALSE, las = 2)\n        axis(1, at = seq(0, 1, length.out = 10),\n             labels = round(seq(-3, 3, length.out = 10), 1))\n        axis(2, at = seq(0, 1, length.out = 10),\n             labels = round(seq(-3, 3, length.out = 10), 1), las = 2)\n      }\n    },\n    movie.name = paste0(\"boosting_\", max_depth, \"_\", eta, \".gif\"),\n    autobrowse = FALSE\n  )\n}\n\nWe see that for high values of max_depth, the predictions “smooth out” faster. On the other hand, with a low max_depth (low complexity of the individual trees), more trees are required in the ensemble to achieve a smooth prediction surface.\n\n?xgboost::xgboost\n\nJust some examples:\n\n\n\n\n\n\n\n\n\n\n\n\nQuestion: Hyperparameter tuning of random forest\n\n\n\n\n\n\n\n\n\n\nHyperparameter\nExplanation\n\n\n\n\nmtry\nSubset of features randomly selected in each node (from which the algorithm can select the feature that will be used to split the data).\n\n\nminimum node size\nMinimal number of observations allowed in a node (before the branching is canceled)\n\n\nmax depth\nMaximum number of tree depth\n\n\n\nCombing back to the titanic dataset from the morning, we want to optimize min node size in our RF using a simple CV.\nPrepare the data:\n\nlibrary(EcoData)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following object is masked from 'package:xgboost':\n\n    slice\n\n\nThe following object is masked from 'package:randomForest':\n\n    combine\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(missRanger)\ndata(titanic_ml)\ndata = titanic_ml\ndata = \n  data %&gt;% select(survived, sex, age, fare, pclass)\ndata[,-1] = missRanger(data[,-1], verbose = 0)\n\ndata_sub =\n  data %&gt;%\n    mutate(age = scales::rescale(age, c(0, 1)),\n           fare = scales::rescale(fare, c(0, 1))) %&gt;%\n    mutate(sex = as.integer(sex) - 1L,\n           pclass = as.integer(pclass - 1L))\ndata_new = data_sub[is.na(data_sub$survived),] # for which we want to make predictions at the end\ndata_obs = data_sub[!is.na(data_sub$survived),] # data with known response\ndata_sub$survived = as.factor(data_sub$survived)\ndata_obs$survived = as.factor(data_obs$survived)\n\nHints:\n\nadjust the ‘type’ argument in the predict(…) method (the default is to predict classes)\nwhen predicting probabilities, the randomForest will return a matrix, a column for each class, we are interested in the probability of surviving (so the second column)\n\nBonus:\n\ntune min node size (and mtry)\nuse more features\n\n\n\n\n\n\n\nCode template\n\n\n\n\n\n\nlibrary(ranger)\ndata_obs = data_sub[!is.na(data_sub$survived),] \nset.seed(42)\n\ncv = 3\nhyper_minnodesize = ...\n\ntuning_results =\n    sapply(1:length(hyper_minnodesize), function(k) {\n        auc_inner = NULL\n        for(j in 1:cv) {\n          inner_split = as.integer(cut(1:nrow(data_obs), breaks = cv))\n          train_inner = data_obs[inner_split != j, ]\n          test_inner = data_obs[inner_split == j, ]\n          \n          model = ranger(survived~.,data = train_inner, min.node.size = hyper_minnodesize[k], probability = TRUE)\n          predictions = predict(model, test_inner)$predictions[,2]\n          \n          auc_inner[j]= Metrics::auc(test_inner$survived, predictions)\n        }\n      return(mean(auc_inner))\n    })\n\nresults = data.frame(minnodesize = hyper_minnodesize, AUC = tuning_results)\n\nprint(results)\n\n\n\n\n\n\n\n\nClick here to see the solution\n\n\nlibrary(ranger)\n\n\nAttaching package: 'ranger'\n\n\nThe following object is masked from 'package:randomForest':\n\n    importance\n\ndata_obs = data_sub[!is.na(data_sub$survived),] \nset.seed(42)\n\ncv = 3\nhyper_minnodesize = sample(300, 20)\n\ntuning_results =\n    sapply(1:length(hyper_minnodesize), function(k) {\n        auc_inner = NULL\n        for(j in 1:cv) {\n          inner_split = as.integer(cut(1:nrow(data_obs), breaks = cv))\n          train_inner = data_obs[inner_split != j, ]\n          test_inner = data_obs[inner_split == j, ]\n          model = ranger(survived~.,data = train_inner, min.node.size = hyper_minnodesize[k], probability = TRUE)\n          predictions = predict(model, test_inner)$predictions[,2]\n          \n          auc_inner[j]= Metrics::auc(test_inner$survived, predictions)\n        }\n      return(mean(auc_inner))\n    })\n\nresults = data.frame(minnodesize = hyper_minnodesize, AUC = tuning_results)\n\nprint(results)\n\n   minnodesize       AUC\n1           49 0.8272006\n2          153 0.8191819\n3           74 0.8201019\n4          228 0.8142277\n5          146 0.8177973\n6          122 0.8193057\n7          300 0.8084753\n8          128 0.8214541\n9           24 0.8312464\n10          89 0.8212586\n11         165 0.8174452\n12         110 0.8201894\n13          20 0.8296517\n14         291 0.8090517\n15         283 0.8108152\n16         109 0.8217839\n17           5 0.8302420\n18         212 0.8132403\n19         259 0.8119411\n20         292 0.8083235\n\n\nMake predictions:\n\nmodel = ranger(survived~.,data = data_obs, min.node.size = results[which.max(results$AUC),1], probability = TRUE)\n\nwrite.csv(data.frame(y = predict(model, data_new)$predictions[,1]), file = \"Max_titanic_rf.csv\")\n\n\n\n\n\n\n\n\nQuestion: Hyperparameter tuning of boosted regression trees\n\n\n\nImportant hyperparameters:\n\n\n\n\n\n\n\nHyperparameter\nExplanation\n\n\n\n\neta\nlearning rate (weighting of the sequential trees)\n\n\nmax depth\nmaximal depth in the trees (small = low complexity, large = high complexity)\n\n\nsubsample\nsubsample ratio of the data (bootstrap ratio)\n\n\nlambda\nregularization strength of the individual trees\n\n\nmax tree\nmaximal number of trees in the ensemble\n\n\n\nCombing back to the titanic dataset from the morning, we want to optimize max depth and the eta parameter in xgboost.\nPrepare the data:\n\nlibrary(EcoData)\nlibrary(dplyr)\nlibrary(missRanger)\ndata(titanic_ml)\ndata = titanic_ml\ndata = \n  data %&gt;% select(survived, sex, age, fare, pclass)\ndata[,-1] = missRanger(data[,-1], verbose = 0)\n\ndata_sub =\n  data %&gt;%\n    mutate(age = scales::rescale(age, c(0, 1)),\n           fare = scales::rescale(fare, c(0, 1))) %&gt;%\n    mutate(sex = as.integer(sex) - 1L,\n           pclass = as.integer(pclass - 1L))\ndata_new = data_sub[is.na(data_sub$survived),] # for which we want to make predictions at the end\ndata_obs = data_sub[!is.na(data_sub$survived),] # data with known response\n\n\n\n\n\n\n\nCode template\n\n\n\n\n\n\nlibrary(xgboost)\nset.seed(42)\ndata_obs = data_sub[!is.na(data_sub$survived),] \ncv = 3\n\nouter_split = as.integer(cut(1:nrow(data_obs), breaks = cv))\n\n# sample minnodesize values (must be integers)\nhyper_depth = ...\nhyper_eta = ...\n\ntuning_results =\n    sapply(1:length(hyper_minnodesize), function(k) {\n        auc_inner = NULL\n        for(j in 1:cv) {\n          inner_split = as.integer(cut(1:nrow(data_obs), breaks = cv))\n          train_inner = data_obs[inner_split != j, ]\n          test_inner = data_obs[inner_split == j, ]\n          \n          data_xg = xgb.DMatrix(data = as.matrix(train_inner[,-1]), label = train_inner$survived)\n          \n          model = xgboost(data_xg, nrounds = 16L, eta = hyper_eta[k], max_depth = hyper_depth[k], objective = \"reg:logistic\")\n          predictions = predict(model, newdata = as.matrix(test_inner)[,-1])\n          \n          auc_inner[j]= Metrics::auc(test_inner$survived, predictions)\n        }\n      return(mean(auc_inner))\n    })\n\nresults = data.frame(depth = hyper_depth, eta = hyper_eta, AUC = tuning_results)\n\nprint(results)\n\n\n\n\n\n\n\n\nClick here to see the solution\n\n\nlibrary(xgboost)\nset.seed(42)\ndata_obs = data_sub[!is.na(data_sub$survived),] \ncv = 3\n\nouter_split = as.integer(cut(1:nrow(data_obs), breaks = cv))\n\n# sample minnodesize values (must be integers)\nhyper_depth = sample(200, 20)\nhyper_eta = runif(20, 0, 1)\n\n\ntuning_results =\n    sapply(1:length(hyper_minnodesize), function(k) {\n        auc_inner = NULL\n        for(j in 1:cv) {\n          inner_split = as.integer(cut(1:nrow(data_obs), breaks = cv))\n          train_inner = data_obs[inner_split != j, ]\n          test_inner = data_obs[inner_split == j, ]\n          \n          data_xg = xgb.DMatrix(data = as.matrix(train_inner[,-1]), label = train_inner$survived)\n          \n          model = xgboost(data_xg, nrounds = 16L, eta = hyper_eta[k], max_depth = hyper_depth[k], objective = \"reg:logistic\")\n          predictions = predict(model, newdata = as.matrix(test_inner)[,-1])\n          \n          auc_inner[j]= Metrics::auc(test_inner$survived, predictions)\n        }\n      return(mean(auc_inner))\n    })\n\n[1] train-rmse:0.342302 \n[2] train-rmse:0.296557 \n[3] train-rmse:0.263769 \n[4] train-rmse:0.241327 \n[5] train-rmse:0.217183 \n[6] train-rmse:0.201909 \n[7] train-rmse:0.189654 \n[8] train-rmse:0.183617 \n[9] train-rmse:0.173235 \n[10]    train-rmse:0.166394 \n[11]    train-rmse:0.161046 \n[12]    train-rmse:0.155769 \n[13]    train-rmse:0.151022 \n[14]    train-rmse:0.147104 \n[15]    train-rmse:0.144162 \n[16]    train-rmse:0.140758 \n[1] train-rmse:0.354493 \n[2] train-rmse:0.305145 \n[3] train-rmse:0.275617 \n[4] train-rmse:0.256898 \n[5] train-rmse:0.236243 \n[6] train-rmse:0.225320 \n[7] train-rmse:0.216780 \n[8] train-rmse:0.206392 \n[9] train-rmse:0.200376 \n[10]    train-rmse:0.192735 \n[11]    train-rmse:0.185090 \n[12]    train-rmse:0.179520 \n[13]    train-rmse:0.173707 \n[14]    train-rmse:0.171483 \n[15]    train-rmse:0.167530 \n[16]    train-rmse:0.164484 \n[1] train-rmse:0.353920 \n[2] train-rmse:0.315997 \n[3] train-rmse:0.290410 \n[4] train-rmse:0.263742 \n[5] train-rmse:0.247020 \n[6] train-rmse:0.229175 \n[7] train-rmse:0.214455 \n[8] train-rmse:0.199326 \n[9] train-rmse:0.194674 \n[10]    train-rmse:0.184985 \n[11]    train-rmse:0.180155 \n[12]    train-rmse:0.174841 \n[13]    train-rmse:0.170210 \n[14]    train-rmse:0.165885 \n[15]    train-rmse:0.162765 \n[16]    train-rmse:0.157283 \n[1] train-rmse:0.344811 \n[2] train-rmse:0.300368 \n[3] train-rmse:0.266761 \n[4] train-rmse:0.237761 \n[5] train-rmse:0.220317 \n[6] train-rmse:0.207316 \n[7] train-rmse:0.198329 \n[8] train-rmse:0.188430 \n[9] train-rmse:0.183203 \n[10]    train-rmse:0.176577 \n[11]    train-rmse:0.169758 \n[12]    train-rmse:0.163186 \n[13]    train-rmse:0.157300 \n[14]    train-rmse:0.153470 \n[15]    train-rmse:0.147181 \n[16]    train-rmse:0.144844 \n[1] train-rmse:0.356759 \n[2] train-rmse:0.304838 \n[3] train-rmse:0.274020 \n[4] train-rmse:0.255291 \n[5] train-rmse:0.243225 \n[6] train-rmse:0.229671 \n[7] train-rmse:0.219460 \n[8] train-rmse:0.206061 \n[9] train-rmse:0.197987 \n[10]    train-rmse:0.188549 \n[11]    train-rmse:0.182957 \n[12]    train-rmse:0.177919 \n[13]    train-rmse:0.175019 \n[14]    train-rmse:0.170526 \n[15]    train-rmse:0.166915 \n[16]    train-rmse:0.162403 \n[1] train-rmse:0.356097 \n[2] train-rmse:0.317622 \n[3] train-rmse:0.292497 \n[4] train-rmse:0.273470 \n[5] train-rmse:0.254577 \n[6] train-rmse:0.240930 \n[7] train-rmse:0.231185 \n[8] train-rmse:0.216655 \n[9] train-rmse:0.206242 \n[10]    train-rmse:0.197043 \n[11]    train-rmse:0.189754 \n[12]    train-rmse:0.181673 \n[13]    train-rmse:0.176834 \n[14]    train-rmse:0.171924 \n[15]    train-rmse:0.167137 \n[16]    train-rmse:0.162462 \n[1] train-rmse:0.479481 \n[2] train-rmse:0.461296 \n[3] train-rmse:0.444451 \n[4] train-rmse:0.429059 \n[5] train-rmse:0.415414 \n[6] train-rmse:0.402186 \n[7] train-rmse:0.390414 \n[8] train-rmse:0.379435 \n[9] train-rmse:0.369452 \n[10]    train-rmse:0.360190 \n[11]    train-rmse:0.351835 \n[12]    train-rmse:0.344269 \n[13]    train-rmse:0.336940 \n[14]    train-rmse:0.330170 \n[15]    train-rmse:0.324636 \n[16]    train-rmse:0.319224 \n[1] train-rmse:0.480872 \n[2] train-rmse:0.463671 \n[3] train-rmse:0.446699 \n[4] train-rmse:0.431160 \n[5] train-rmse:0.417340 \n[6] train-rmse:0.404995 \n[7] train-rmse:0.394284 \n[8] train-rmse:0.384497 \n[9] train-rmse:0.375554 \n[10]    train-rmse:0.367333 \n[11]    train-rmse:0.359942 \n[12]    train-rmse:0.352282 \n[13]    train-rmse:0.346492 \n[14]    train-rmse:0.341002 \n[15]    train-rmse:0.335982 \n[16]    train-rmse:0.331736 \n[1] train-rmse:0.480609 \n[2] train-rmse:0.463264 \n[3] train-rmse:0.447044 \n[4] train-rmse:0.432491 \n[5] train-rmse:0.419710 \n[6] train-rmse:0.407421 \n[7] train-rmse:0.396677 \n[8] train-rmse:0.386282 \n[9] train-rmse:0.377689 \n[10]    train-rmse:0.369330 \n[11]    train-rmse:0.361271 \n[12]    train-rmse:0.353993 \n[13]    train-rmse:0.347109 \n[14]    train-rmse:0.340902 \n[15]    train-rmse:0.335439 \n[16]    train-rmse:0.330551 \n[1] train-rmse:0.391331 \n[2] train-rmse:0.336196 \n[3] train-rmse:0.305060 \n[4] train-rmse:0.283270 \n[5] train-rmse:0.265297 \n[6] train-rmse:0.253524 \n[7] train-rmse:0.241562 \n[8] train-rmse:0.229415 \n[9] train-rmse:0.216797 \n[10]    train-rmse:0.209464 \n[11]    train-rmse:0.201144 \n[12]    train-rmse:0.195527 \n[13]    train-rmse:0.191203 \n[14]    train-rmse:0.185738 \n[15]    train-rmse:0.182161 \n[16]    train-rmse:0.177461 \n[1] train-rmse:0.399304 \n[2] train-rmse:0.347299 \n[3] train-rmse:0.315269 \n[4] train-rmse:0.294179 \n[5] train-rmse:0.280553 \n[6] train-rmse:0.267001 \n[7] train-rmse:0.251934 \n[8] train-rmse:0.244570 \n[9] train-rmse:0.236971 \n[10]    train-rmse:0.229536 \n[11]    train-rmse:0.224027 \n[12]    train-rmse:0.218198 \n[13]    train-rmse:0.214238 \n[14]    train-rmse:0.208287 \n[15]    train-rmse:0.205090 \n[16]    train-rmse:0.200239 \n[1] train-rmse:0.398243 \n[2] train-rmse:0.350427 \n[3] train-rmse:0.321054 \n[4] train-rmse:0.303792 \n[5] train-rmse:0.288216 \n[6] train-rmse:0.274223 \n[7] train-rmse:0.263454 \n[8] train-rmse:0.252615 \n[9] train-rmse:0.245005 \n[10]    train-rmse:0.234036 \n[11]    train-rmse:0.225401 \n[12]    train-rmse:0.218698 \n[13]    train-rmse:0.213294 \n[14]    train-rmse:0.208168 \n[15]    train-rmse:0.202857 \n[16]    train-rmse:0.196321 \n[1] train-rmse:0.412613 \n[2] train-rmse:0.358420 \n[3] train-rmse:0.326669 \n[4] train-rmse:0.303319 \n[5] train-rmse:0.286022 \n[6] train-rmse:0.273749 \n[7] train-rmse:0.263153 \n[8] train-rmse:0.251950 \n[9] train-rmse:0.243505 \n[10]    train-rmse:0.236474 \n[11]    train-rmse:0.228569 \n[12]    train-rmse:0.221599 \n[13]    train-rmse:0.212299 \n[14]    train-rmse:0.205074 \n[15]    train-rmse:0.200964 \n[16]    train-rmse:0.194888 \n[1] train-rmse:0.418903 \n[2] train-rmse:0.368349 \n[3] train-rmse:0.335454 \n[4] train-rmse:0.314156 \n[5] train-rmse:0.298537 \n[6] train-rmse:0.284029 \n[7] train-rmse:0.273099 \n[8] train-rmse:0.263954 \n[9] train-rmse:0.252246 \n[10]    train-rmse:0.244578 \n[11]    train-rmse:0.239407 \n[12]    train-rmse:0.234422 \n[13]    train-rmse:0.228069 \n[14]    train-rmse:0.223888 \n[15]    train-rmse:0.218094 \n[16]    train-rmse:0.215078 \n[1] train-rmse:0.417948 \n[2] train-rmse:0.367809 \n[3] train-rmse:0.336307 \n[4] train-rmse:0.314008 \n[5] train-rmse:0.297239 \n[6] train-rmse:0.285473 \n[7] train-rmse:0.275437 \n[8] train-rmse:0.266708 \n[9] train-rmse:0.258052 \n[10]    train-rmse:0.250290 \n[11]    train-rmse:0.242443 \n[12]    train-rmse:0.236872 \n[13]    train-rmse:0.229573 \n[14]    train-rmse:0.224046 \n[15]    train-rmse:0.219750 \n[16]    train-rmse:0.214634 \n[1] train-rmse:0.347540 \n[2] train-rmse:0.303626 \n[3] train-rmse:0.272683 \n[4] train-rmse:0.243109 \n[5] train-rmse:0.223824 \n[6] train-rmse:0.210663 \n[7] train-rmse:0.199044 \n[8] train-rmse:0.188770 \n[9] train-rmse:0.178904 \n[10]    train-rmse:0.173196 \n[11]    train-rmse:0.167350 \n[12]    train-rmse:0.163099 \n[13]    train-rmse:0.155632 \n[14]    train-rmse:0.152195 \n[15]    train-rmse:0.147318 \n[16]    train-rmse:0.144478 \n[1] train-rmse:0.359231 \n[2] train-rmse:0.308544 \n[3] train-rmse:0.278949 \n[4] train-rmse:0.256349 \n[5] train-rmse:0.241120 \n[6] train-rmse:0.227070 \n[7] train-rmse:0.217868 \n[8] train-rmse:0.206924 \n[9] train-rmse:0.202159 \n[10]    train-rmse:0.193935 \n[11]    train-rmse:0.187499 \n[12]    train-rmse:0.182944 \n[13]    train-rmse:0.179975 \n[14]    train-rmse:0.174656 \n[15]    train-rmse:0.171647 \n[16]    train-rmse:0.168707 \n[1] train-rmse:0.358490 \n[2] train-rmse:0.315554 \n[3] train-rmse:0.288114 \n[4] train-rmse:0.262765 \n[5] train-rmse:0.247720 \n[6] train-rmse:0.236217 \n[7] train-rmse:0.219483 \n[8] train-rmse:0.206180 \n[9] train-rmse:0.198773 \n[10]    train-rmse:0.190334 \n[11]    train-rmse:0.184461 \n[12]    train-rmse:0.178594 \n[13]    train-rmse:0.173868 \n[14]    train-rmse:0.170536 \n[15]    train-rmse:0.166593 \n[16]    train-rmse:0.163310 \n[1] train-rmse:0.402424 \n[2] train-rmse:0.346928 \n[3] train-rmse:0.314267 \n[4] train-rmse:0.293571 \n[5] train-rmse:0.275489 \n[6] train-rmse:0.263132 \n[7] train-rmse:0.249888 \n[8] train-rmse:0.239288 \n[9] train-rmse:0.233887 \n[10]    train-rmse:0.224376 \n[11]    train-rmse:0.215130 \n[12]    train-rmse:0.209099 \n[13]    train-rmse:0.201128 \n[14]    train-rmse:0.194383 \n[15]    train-rmse:0.190227 \n[16]    train-rmse:0.185943 \n[1] train-rmse:0.409511 \n[2] train-rmse:0.357163 \n[3] train-rmse:0.324910 \n[4] train-rmse:0.303323 \n[5] train-rmse:0.286659 \n[6] train-rmse:0.275220 \n[7] train-rmse:0.265906 \n[8] train-rmse:0.253159 \n[9] train-rmse:0.246518 \n[10]    train-rmse:0.237044 \n[11]    train-rmse:0.231812 \n[12]    train-rmse:0.224940 \n[13]    train-rmse:0.220676 \n[14]    train-rmse:0.216981 \n[15]    train-rmse:0.213305 \n[16]    train-rmse:0.209319 \n[1] train-rmse:0.408495 \n[2] train-rmse:0.360470 \n[3] train-rmse:0.327066 \n[4] train-rmse:0.305746 \n[5] train-rmse:0.292335 \n[6] train-rmse:0.280373 \n[7] train-rmse:0.270363 \n[8] train-rmse:0.262649 \n[9] train-rmse:0.254465 \n[10]    train-rmse:0.244795 \n[11]    train-rmse:0.238356 \n[12]    train-rmse:0.228929 \n[13]    train-rmse:0.223343 \n[14]    train-rmse:0.218370 \n[15]    train-rmse:0.212266 \n[16]    train-rmse:0.208432 \n[1] train-rmse:0.352912 \n[2] train-rmse:0.309031 \n[3] train-rmse:0.277692 \n[4] train-rmse:0.256625 \n[5] train-rmse:0.235777 \n[6] train-rmse:0.214268 \n[7] train-rmse:0.199580 \n[8] train-rmse:0.194155 \n[9] train-rmse:0.185362 \n[10]    train-rmse:0.177677 \n[11]    train-rmse:0.171369 \n[12]    train-rmse:0.168394 \n[13]    train-rmse:0.159508 \n[14]    train-rmse:0.156477 \n[15]    train-rmse:0.150386 \n[16]    train-rmse:0.147333 \n[1] train-rmse:0.364115 \n[2] train-rmse:0.312819 \n[3] train-rmse:0.281496 \n[4] train-rmse:0.257388 \n[5] train-rmse:0.240136 \n[6] train-rmse:0.226296 \n[7] train-rmse:0.219283 \n[8] train-rmse:0.210615 \n[9] train-rmse:0.203212 \n[10]    train-rmse:0.196874 \n[11]    train-rmse:0.190957 \n[12]    train-rmse:0.186694 \n[13]    train-rmse:0.181710 \n[14]    train-rmse:0.178089 \n[15]    train-rmse:0.173809 \n[16]    train-rmse:0.170155 \n[1] train-rmse:0.363254 \n[2] train-rmse:0.319160 \n[3] train-rmse:0.294411 \n[4] train-rmse:0.273299 \n[5] train-rmse:0.251156 \n[6] train-rmse:0.240591 \n[7] train-rmse:0.228331 \n[8] train-rmse:0.217241 \n[9] train-rmse:0.211002 \n[10]    train-rmse:0.201419 \n[11]    train-rmse:0.193850 \n[12]    train-rmse:0.186100 \n[13]    train-rmse:0.181138 \n[14]    train-rmse:0.174777 \n[15]    train-rmse:0.171032 \n[16]    train-rmse:0.166749 \n[1] train-rmse:0.362176 \n[2] train-rmse:0.314899 \n[3] train-rmse:0.283499 \n[4] train-rmse:0.263383 \n[5] train-rmse:0.239849 \n[6] train-rmse:0.226875 \n[7] train-rmse:0.212486 \n[8] train-rmse:0.205695 \n[9] train-rmse:0.195985 \n[10]    train-rmse:0.191229 \n[11]    train-rmse:0.179409 \n[12]    train-rmse:0.172459 \n[13]    train-rmse:0.167844 \n[14]    train-rmse:0.164455 \n[15]    train-rmse:0.159117 \n[16]    train-rmse:0.156624 \n[1] train-rmse:0.372569 \n[2] train-rmse:0.326729 \n[3] train-rmse:0.298524 \n[4] train-rmse:0.276214 \n[5] train-rmse:0.259725 \n[6] train-rmse:0.246788 \n[7] train-rmse:0.235435 \n[8] train-rmse:0.225300 \n[9] train-rmse:0.215375 \n[10]    train-rmse:0.209135 \n[11]    train-rmse:0.203847 \n[12]    train-rmse:0.199532 \n[13]    train-rmse:0.193989 \n[14]    train-rmse:0.188594 \n[15]    train-rmse:0.184746 \n[16]    train-rmse:0.181138 \n[1] train-rmse:0.371580 \n[2] train-rmse:0.328379 \n[3] train-rmse:0.303459 \n[4] train-rmse:0.279450 \n[5] train-rmse:0.260896 \n[6] train-rmse:0.243199 \n[7] train-rmse:0.233772 \n[8] train-rmse:0.227453 \n[9] train-rmse:0.217446 \n[10]    train-rmse:0.211120 \n[11]    train-rmse:0.203136 \n[12]    train-rmse:0.196808 \n[13]    train-rmse:0.190861 \n[14]    train-rmse:0.185876 \n[15]    train-rmse:0.180722 \n[16]    train-rmse:0.175697 \n[1] train-rmse:0.355068 \n[2] train-rmse:0.310701 \n[3] train-rmse:0.278834 \n[4] train-rmse:0.259903 \n[5] train-rmse:0.238338 \n[6] train-rmse:0.218278 \n[7] train-rmse:0.206588 \n[8] train-rmse:0.193913 \n[9] train-rmse:0.188071 \n[10]    train-rmse:0.182172 \n[11]    train-rmse:0.177608 \n[12]    train-rmse:0.172018 \n[13]    train-rmse:0.165400 \n[14]    train-rmse:0.161438 \n[15]    train-rmse:0.157206 \n[16]    train-rmse:0.149544 \n[1] train-rmse:0.366080 \n[2] train-rmse:0.314497 \n[3] train-rmse:0.283504 \n[4] train-rmse:0.258938 \n[5] train-rmse:0.244948 \n[6] train-rmse:0.231373 \n[7] train-rmse:0.221023 \n[8] train-rmse:0.213963 \n[9] train-rmse:0.205689 \n[10]    train-rmse:0.199176 \n[11]    train-rmse:0.194188 \n[12]    train-rmse:0.189800 \n[13]    train-rmse:0.183892 \n[14]    train-rmse:0.179431 \n[15]    train-rmse:0.175402 \n[16]    train-rmse:0.173047 \n[1] train-rmse:0.365181 \n[2] train-rmse:0.320673 \n[3] train-rmse:0.296988 \n[4] train-rmse:0.271807 \n[5] train-rmse:0.249580 \n[6] train-rmse:0.237423 \n[7] train-rmse:0.222919 \n[8] train-rmse:0.213172 \n[9] train-rmse:0.205728 \n[10]    train-rmse:0.197945 \n[11]    train-rmse:0.192628 \n[12]    train-rmse:0.184720 \n[13]    train-rmse:0.180063 \n[14]    train-rmse:0.174582 \n[15]    train-rmse:0.170291 \n[16]    train-rmse:0.166534 \n[1] train-rmse:0.413003 \n[2] train-rmse:0.358879 \n[3] train-rmse:0.327087 \n[4] train-rmse:0.303711 \n[5] train-rmse:0.286390 \n[6] train-rmse:0.274090 \n[7] train-rmse:0.260314 \n[8] train-rmse:0.249955 \n[9] train-rmse:0.241820 \n[10]    train-rmse:0.234428 \n[11]    train-rmse:0.226885 \n[12]    train-rmse:0.219616 \n[13]    train-rmse:0.212639 \n[14]    train-rmse:0.207428 \n[15]    train-rmse:0.203291 \n[16]    train-rmse:0.197492 \n[1] train-rmse:0.419262 \n[2] train-rmse:0.368771 \n[3] train-rmse:0.335856 \n[4] train-rmse:0.314520 \n[5] train-rmse:0.298882 \n[6] train-rmse:0.284372 \n[7] train-rmse:0.272740 \n[8] train-rmse:0.264158 \n[9] train-rmse:0.256454 \n[10]    train-rmse:0.246102 \n[11]    train-rmse:0.239338 \n[12]    train-rmse:0.234446 \n[13]    train-rmse:0.228276 \n[14]    train-rmse:0.223703 \n[15]    train-rmse:0.219541 \n[16]    train-rmse:0.216816 \n[1] train-rmse:0.418311 \n[2] train-rmse:0.368219 \n[3] train-rmse:0.336701 \n[4] train-rmse:0.314359 \n[5] train-rmse:0.297552 \n[6] train-rmse:0.285764 \n[7] train-rmse:0.275737 \n[8] train-rmse:0.267016 \n[9] train-rmse:0.258368 \n[10]    train-rmse:0.251282 \n[11]    train-rmse:0.245400 \n[12]    train-rmse:0.237171 \n[13]    train-rmse:0.231113 \n[14]    train-rmse:0.223861 \n[15]    train-rmse:0.219796 \n[16]    train-rmse:0.215306 \n[1] train-rmse:0.367975 \n[2] train-rmse:0.319321 \n[3] train-rmse:0.287144 \n[4] train-rmse:0.262513 \n[5] train-rmse:0.247351 \n[6] train-rmse:0.231291 \n[7] train-rmse:0.223033 \n[8] train-rmse:0.209622 \n[9] train-rmse:0.200868 \n[10]    train-rmse:0.191819 \n[11]    train-rmse:0.182173 \n[12]    train-rmse:0.178936 \n[13]    train-rmse:0.174043 \n[14]    train-rmse:0.171584 \n[15]    train-rmse:0.167346 \n[16]    train-rmse:0.162605 \n[1] train-rmse:0.377873 \n[2] train-rmse:0.317379 \n[3] train-rmse:0.292246 \n[4] train-rmse:0.273028 \n[5] train-rmse:0.257528 \n[6] train-rmse:0.247641 \n[7] train-rmse:0.233587 \n[8] train-rmse:0.225675 \n[9] train-rmse:0.217171 \n[10]    train-rmse:0.211252 \n[11]    train-rmse:0.205052 \n[12]    train-rmse:0.198105 \n[13]    train-rmse:0.193092 \n[14]    train-rmse:0.190016 \n[15]    train-rmse:0.185144 \n[16]    train-rmse:0.181247 \n[1] train-rmse:0.376839 \n[2] train-rmse:0.330142 \n[3] train-rmse:0.304843 \n[4] train-rmse:0.287958 \n[5] train-rmse:0.273168 \n[6] train-rmse:0.258587 \n[7] train-rmse:0.243581 \n[8] train-rmse:0.231554 \n[9] train-rmse:0.223641 \n[10]    train-rmse:0.214984 \n[11]    train-rmse:0.206594 \n[12]    train-rmse:0.200954 \n[13]    train-rmse:0.195729 \n[14]    train-rmse:0.192239 \n[15]    train-rmse:0.187588 \n[16]    train-rmse:0.181316 \n[1] train-rmse:0.499000 \n[2] train-rmse:0.498010 \n[3] train-rmse:0.497026 \n[4] train-rmse:0.496047 \n[5] train-rmse:0.495073 \n[6] train-rmse:0.494104 \n[7] train-rmse:0.493140 \n[8] train-rmse:0.492181 \n[9] train-rmse:0.491226 \n[10]    train-rmse:0.490275 \n[11]    train-rmse:0.489330 \n[12]    train-rmse:0.488389 \n[13]    train-rmse:0.487453 \n[14]    train-rmse:0.486522 \n[15]    train-rmse:0.485596 \n[16]    train-rmse:0.484675 \n[1] train-rmse:0.499066 \n[2] train-rmse:0.498148 \n[3] train-rmse:0.497234 \n[4] train-rmse:0.496325 \n[5] train-rmse:0.495422 \n[6] train-rmse:0.494523 \n[7] train-rmse:0.493629 \n[8] train-rmse:0.492739 \n[9] train-rmse:0.491855 \n[10]    train-rmse:0.490975 \n[11]    train-rmse:0.490100 \n[12]    train-rmse:0.489230 \n[13]    train-rmse:0.488364 \n[14]    train-rmse:0.487503 \n[15]    train-rmse:0.486647 \n[16]    train-rmse:0.485795 \n[1] train-rmse:0.499053 \n[2] train-rmse:0.498134 \n[3] train-rmse:0.497183 \n[4] train-rmse:0.496237 \n[5] train-rmse:0.495290 \n[6] train-rmse:0.494354 \n[7] train-rmse:0.493465 \n[8] train-rmse:0.492519 \n[9] train-rmse:0.491570 \n[10]    train-rmse:0.490634 \n[11]    train-rmse:0.489702 \n[12]    train-rmse:0.488775 \n[13]    train-rmse:0.487852 \n[14]    train-rmse:0.486929 \n[15]    train-rmse:0.486016 \n[16]    train-rmse:0.485108 \n[1] train-rmse:0.353172 \n[2] train-rmse:0.309652 \n[3] train-rmse:0.279091 \n[4] train-rmse:0.254916 \n[5] train-rmse:0.236239 \n[6] train-rmse:0.223144 \n[7] train-rmse:0.205658 \n[8] train-rmse:0.195707 \n[9] train-rmse:0.186813 \n[10]    train-rmse:0.178283 \n[11]    train-rmse:0.172189 \n[12]    train-rmse:0.166345 \n[13]    train-rmse:0.161567 \n[14]    train-rmse:0.155295 \n[15]    train-rmse:0.153612 \n[16]    train-rmse:0.150238 \n[1] train-rmse:0.364352 \n[2] train-rmse:0.313021 \n[3] train-rmse:0.281973 \n[4] train-rmse:0.257413 \n[5] train-rmse:0.243398 \n[6] train-rmse:0.231083 \n[7] train-rmse:0.221349 \n[8] train-rmse:0.213183 \n[9] train-rmse:0.206201 \n[10]    train-rmse:0.197767 \n[11]    train-rmse:0.191407 \n[12]    train-rmse:0.187852 \n[13]    train-rmse:0.184400 \n[14]    train-rmse:0.179506 \n[15]    train-rmse:0.176823 \n[16]    train-rmse:0.173508 \n[1] train-rmse:0.363486 \n[2] train-rmse:0.319342 \n[3] train-rmse:0.294568 \n[4] train-rmse:0.273495 \n[5] train-rmse:0.251407 \n[6] train-rmse:0.240850 \n[7] train-rmse:0.228615 \n[8] train-rmse:0.217545 \n[9] train-rmse:0.211308 \n[10]    train-rmse:0.201726 \n[11]    train-rmse:0.194161 \n[12]    train-rmse:0.186420 \n[13]    train-rmse:0.181458 \n[14]    train-rmse:0.175103 \n[15]    train-rmse:0.171353 \n[16]    train-rmse:0.167058 \n[1] train-rmse:0.498143 \n[2] train-rmse:0.496315 \n[3] train-rmse:0.494504 \n[4] train-rmse:0.492711 \n[5] train-rmse:0.490936 \n[6] train-rmse:0.489174 \n[7] train-rmse:0.487429 \n[8] train-rmse:0.485702 \n[9] train-rmse:0.483991 \n[10]    train-rmse:0.482297 \n[11]    train-rmse:0.480619 \n[12]    train-rmse:0.478958 \n[13]    train-rmse:0.477314 \n[14]    train-rmse:0.475685 \n[15]    train-rmse:0.474073 \n[16]    train-rmse:0.472476 \n[1] train-rmse:0.498267 \n[2] train-rmse:0.496570 \n[3] train-rmse:0.494890 \n[4] train-rmse:0.493226 \n[5] train-rmse:0.491580 \n[6] train-rmse:0.489950 \n[7] train-rmse:0.488336 \n[8] train-rmse:0.486738 \n[9] train-rmse:0.485157 \n[10]    train-rmse:0.483591 \n[11]    train-rmse:0.482041 \n[12]    train-rmse:0.480509 \n[13]    train-rmse:0.478952 \n[14]    train-rmse:0.477410 \n[15]    train-rmse:0.475883 \n[16]    train-rmse:0.474411 \n[1] train-rmse:0.498243 \n[2] train-rmse:0.496476 \n[3] train-rmse:0.494727 \n[4] train-rmse:0.493062 \n[5] train-rmse:0.491346 \n[6] train-rmse:0.489608 \n[7] train-rmse:0.487887 \n[8] train-rmse:0.486183 \n[9] train-rmse:0.484496 \n[10]    train-rmse:0.482825 \n[11]    train-rmse:0.481171 \n[12]    train-rmse:0.479533 \n[13]    train-rmse:0.477911 \n[14]    train-rmse:0.476288 \n[15]    train-rmse:0.474681 \n[16]    train-rmse:0.473104 \n[1] train-rmse:0.450145 \n[2] train-rmse:0.412640 \n[3] train-rmse:0.381502 \n[4] train-rmse:0.356750 \n[5] train-rmse:0.339371 \n[6] train-rmse:0.323218 \n[7] train-rmse:0.310643 \n[8] train-rmse:0.300609 \n[9] train-rmse:0.290099 \n[10]    train-rmse:0.282061 \n[11]    train-rmse:0.274355 \n[12]    train-rmse:0.266716 \n[13]    train-rmse:0.261058 \n[14]    train-rmse:0.254808 \n[15]    train-rmse:0.249140 \n[16]    train-rmse:0.245194 \n[1] train-rmse:0.453614 \n[2] train-rmse:0.419638 \n[3] train-rmse:0.389756 \n[4] train-rmse:0.367082 \n[5] train-rmse:0.347280 \n[6] train-rmse:0.334347 \n[7] train-rmse:0.321853 \n[8] train-rmse:0.312025 \n[9] train-rmse:0.302219 \n[10]    train-rmse:0.294317 \n[11]    train-rmse:0.287712 \n[12]    train-rmse:0.280739 \n[13]    train-rmse:0.275178 \n[14]    train-rmse:0.270555 \n[15]    train-rmse:0.265659 \n[16]    train-rmse:0.261061 \n[1] train-rmse:0.453005 \n[2] train-rmse:0.416664 \n[3] train-rmse:0.389075 \n[4] train-rmse:0.367094 \n[5] train-rmse:0.348915 \n[6] train-rmse:0.334227 \n[7] train-rmse:0.322698 \n[8] train-rmse:0.312483 \n[9] train-rmse:0.305062 \n[10]    train-rmse:0.297309 \n[11]    train-rmse:0.291410 \n[12]    train-rmse:0.285525 \n[13]    train-rmse:0.279639 \n[14]    train-rmse:0.274354 \n[15]    train-rmse:0.269579 \n[16]    train-rmse:0.266029 \n[1] train-rmse:0.347479 \n[2] train-rmse:0.303578 \n[3] train-rmse:0.272632 \n[4] train-rmse:0.243045 \n[5] train-rmse:0.223750 \n[6] train-rmse:0.210591 \n[7] train-rmse:0.198969 \n[8] train-rmse:0.188693 \n[9] train-rmse:0.178825 \n[10]    train-rmse:0.173116 \n[11]    train-rmse:0.167271 \n[12]    train-rmse:0.163023 \n[13]    train-rmse:0.155557 \n[14]    train-rmse:0.152120 \n[15]    train-rmse:0.147244 \n[16]    train-rmse:0.144406 \n[1] train-rmse:0.359176 \n[2] train-rmse:0.308494 \n[3] train-rmse:0.278888 \n[4] train-rmse:0.256292 \n[5] train-rmse:0.241052 \n[6] train-rmse:0.226995 \n[7] train-rmse:0.218274 \n[8] train-rmse:0.209522 \n[9] train-rmse:0.199627 \n[10]    train-rmse:0.192022 \n[11]    train-rmse:0.186685 \n[12]    train-rmse:0.182298 \n[13]    train-rmse:0.178081 \n[14]    train-rmse:0.172377 \n[15]    train-rmse:0.168291 \n[16]    train-rmse:0.165210 \n[1] train-rmse:0.358436 \n[2] train-rmse:0.315512 \n[3] train-rmse:0.288076 \n[4] train-rmse:0.262708 \n[5] train-rmse:0.247654 \n[6] train-rmse:0.236151 \n[7] train-rmse:0.219405 \n[8] train-rmse:0.206097 \n[9] train-rmse:0.198689 \n[10]    train-rmse:0.190249 \n[11]    train-rmse:0.184376 \n[12]    train-rmse:0.178509 \n[13]    train-rmse:0.173784 \n[14]    train-rmse:0.170455 \n[15]    train-rmse:0.166512 \n[16]    train-rmse:0.163231 \n[1] train-rmse:0.377154 \n[2] train-rmse:0.324208 \n[3] train-rmse:0.292133 \n[4] train-rmse:0.271497 \n[5] train-rmse:0.257482 \n[6] train-rmse:0.242916 \n[7] train-rmse:0.231218 \n[8] train-rmse:0.219051 \n[9] train-rmse:0.209261 \n[10]    train-rmse:0.198130 \n[11]    train-rmse:0.191151 \n[12]    train-rmse:0.187403 \n[13]    train-rmse:0.182459 \n[14]    train-rmse:0.174673 \n[15]    train-rmse:0.171358 \n[16]    train-rmse:0.166835 \n[1] train-rmse:0.386284 \n[2] train-rmse:0.332859 \n[3] train-rmse:0.303453 \n[4] train-rmse:0.282584 \n[5] train-rmse:0.267558 \n[6] train-rmse:0.253924 \n[7] train-rmse:0.243237 \n[8] train-rmse:0.233537 \n[9] train-rmse:0.228959 \n[10]    train-rmse:0.220471 \n[11]    train-rmse:0.216135 \n[12]    train-rmse:0.209025 \n[13]    train-rmse:0.204661 \n[14]    train-rmse:0.199754 \n[15]    train-rmse:0.193463 \n[16]    train-rmse:0.190947 \n[1] train-rmse:0.385215 \n[2] train-rmse:0.338777 \n[3] train-rmse:0.313665 \n[4] train-rmse:0.292796 \n[5] train-rmse:0.273568 \n[6] train-rmse:0.262789 \n[7] train-rmse:0.253421 \n[8] train-rmse:0.239860 \n[9] train-rmse:0.231593 \n[10]    train-rmse:0.222955 \n[11]    train-rmse:0.214456 \n[12]    train-rmse:0.209434 \n[13]    train-rmse:0.203434 \n[14]    train-rmse:0.196974 \n[15]    train-rmse:0.192222 \n[16]    train-rmse:0.187100 \n[1] train-rmse:0.414606 \n[2] train-rmse:0.360780 \n[3] train-rmse:0.328471 \n[4] train-rmse:0.305099 \n[5] train-rmse:0.287631 \n[6] train-rmse:0.273785 \n[7] train-rmse:0.263390 \n[8] train-rmse:0.251786 \n[9] train-rmse:0.242704 \n[10]    train-rmse:0.236481 \n[11]    train-rmse:0.229636 \n[12]    train-rmse:0.224726 \n[13]    train-rmse:0.216931 \n[14]    train-rmse:0.211102 \n[15]    train-rmse:0.204097 \n[16]    train-rmse:0.199598 \n[1] train-rmse:0.420741 \n[2] train-rmse:0.370518 \n[3] train-rmse:0.337584 \n[4] train-rmse:0.315976 \n[5] train-rmse:0.300921 \n[6] train-rmse:0.287629 \n[7] train-rmse:0.275361 \n[8] train-rmse:0.267142 \n[9] train-rmse:0.257956 \n[10]    train-rmse:0.250070 \n[11]    train-rmse:0.243369 \n[12]    train-rmse:0.237665 \n[13]    train-rmse:0.233758 \n[14]    train-rmse:0.226786 \n[15]    train-rmse:0.222565 \n[16]    train-rmse:0.218776 \n[1] train-rmse:0.419801 \n[2] train-rmse:0.369922 \n[3] train-rmse:0.338655 \n[4] train-rmse:0.317072 \n[5] train-rmse:0.301808 \n[6] train-rmse:0.290401 \n[7] train-rmse:0.281845 \n[8] train-rmse:0.272699 \n[9] train-rmse:0.263939 \n[10]    train-rmse:0.255474 \n[11]    train-rmse:0.249697 \n[12]    train-rmse:0.244840 \n[13]    train-rmse:0.236976 \n[14]    train-rmse:0.230660 \n[15]    train-rmse:0.227605 \n[16]    train-rmse:0.221605 \n[1] train-rmse:0.404374 \n[2] train-rmse:0.349048 \n[3] train-rmse:0.316196 \n[4] train-rmse:0.295271 \n[5] train-rmse:0.277377 \n[6] train-rmse:0.265640 \n[7] train-rmse:0.252072 \n[8] train-rmse:0.242512 \n[9] train-rmse:0.235533 \n[10]    train-rmse:0.227548 \n[11]    train-rmse:0.218565 \n[12]    train-rmse:0.210250 \n[13]    train-rmse:0.205741 \n[14]    train-rmse:0.201760 \n[15]    train-rmse:0.195132 \n[16]    train-rmse:0.191336 \n[1] train-rmse:0.411308 \n[2] train-rmse:0.359166 \n[3] train-rmse:0.326783 \n[4] train-rmse:0.304912 \n[5] train-rmse:0.290269 \n[6] train-rmse:0.279429 \n[7] train-rmse:0.268528 \n[8] train-rmse:0.256203 \n[9] train-rmse:0.246645 \n[10]    train-rmse:0.240052 \n[11]    train-rmse:0.233840 \n[12]    train-rmse:0.228318 \n[13]    train-rmse:0.223129 \n[14]    train-rmse:0.218653 \n[15]    train-rmse:0.215338 \n[16]    train-rmse:0.211162 \n[1] train-rmse:0.410302 \n[2] train-rmse:0.362318 \n[3] train-rmse:0.328783 \n[4] train-rmse:0.307210 \n[5] train-rmse:0.293495 \n[6] train-rmse:0.281758 \n[7] train-rmse:0.272646 \n[8] train-rmse:0.262005 \n[9] train-rmse:0.253085 \n[10]    train-rmse:0.246850 \n[11]    train-rmse:0.239128 \n[12]    train-rmse:0.232936 \n[13]    train-rmse:0.226476 \n[14]    train-rmse:0.220414 \n[15]    train-rmse:0.213686 \n[16]    train-rmse:0.209723 \n\nresults = data.frame(depth = hyper_depth, eta = hyper_eta, AUC = tuning_results)\n\nprint(results)\n\n   depth         eta       AUC\n1     49 0.988891729 0.7904927\n2     65 0.946668233 0.7985711\n3    153 0.082437558 0.8174663\n4     74 0.514211784 0.8109768\n5    146 0.390203467 0.8064756\n6    122 0.905738131 0.7992766\n7    200 0.446969628 0.8092398\n8    128 0.836004260 0.8053466\n9     47 0.737595618 0.8027806\n10    24 0.811055141 0.8008673\n11    71 0.388108283 0.8094556\n12   100 0.685169729 0.8011198\n13    89 0.003948339 0.8044831\n14   165 0.832916080 0.8052938\n15   110 0.007334147 0.8065934\n16    20 0.207658973 0.8189459\n17   154 0.906601408 0.8000982\n18   114 0.611778643 0.8011920\n19   111 0.379559241 0.8060280\n20   131 0.435771585 0.8069872\n\n\nMake predictions:\n\ndata_xg = xgb.DMatrix(data = as.matrix(data_obs[,-1]), label = data_obs$survived)\n\nmodel = xgboost(data_xg, nrounds = 16L, eta = results[which.max(results$AUC), 2], max_depth = results[which.max(results$AUC), 1], objective = \"reg:logistic\")\n\npredictions = predict(model, newdata = as.matrix(data_new)[,-1])\n\n# Single predictions from the ensemble model:\nwrite.csv(data.frame(y = predictions), file = \"Max_titanic_xgboost.csv\")\n\n\n\n\n\n\n\n\nBonus: Implement a BRT on your own!\n\n\n\nYou can easily implement a BRT or boosted linear model using the rpart package or the lm function.\n\n\n\n\nClick here to see the solution\n\nGo through the code line by line and try to understand it. Ask, if you have any questions:\nLet’s try it:\n\ndata = model.matrix(~. , data = airquality)\n\nmodel = get_boosting_model(x = data[,-2], y = data[,2], n_trees = 5L )\npred = predict(model, newdata = data[,-2])\nplot(data[,2], pred, xlab = \"observed\", ylab = \"predicted\")",
    "crumbs": [
      "Understanding ML Algorithms",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Tree-based Algorithms</span>"
    ]
  },
  {
    "objectID": "B2-Distance.html",
    "href": "B2-Distance.html",
    "title": "6  Distance-based Algorithms",
    "section": "",
    "text": "6.1 K-Nearest-Neighbor\nIn this chapter, we introduce support-vector machines (SVMs) and other distance-based methods Hint: Distance-based models need scaling!\nK-nearest-neighbor (kNN) is a simple algorithm that stores all the available cases and classifies the new data based on a similarity measure. It is mostly used to classify a data point based on how its \\(k\\) nearest neighbors are classified.\nLet us first see an example:\nx = scale(iris[,1:4])\ny = iris[,5]\nplot(x[-100,1], x[-100, 3], col = y)\npoints(x[100,1], x[100, 3], col = \"blue\", pch = 18, cex = 1.3)\nWhich class would you decide for the blue point? What are the classes of the nearest points? Well, this procedure is used by the k-nearest-neighbors classifier and thus there is actually no “real” learning in a k-nearest-neighbors classification.\nFor applying a k-nearest-neighbors classification, we first have to scale the data set, because we deal with distances and want the same influence of all predictors. Imagine one variable has values from -10.000 to 10.000 and another from -1 to 1. Then the influence of the first variable on the distance to the other points is much stronger than the influence of the second variable. On the iris data set, we have to split the data into training and test set on our own. Then we will follow the usual pipeline.\ndata = iris\ndata[,1:4] = apply(data[,1:4],2, scale)\nindices = sample.int(nrow(data), 0.7*nrow(data))\ntrain = data[indices,]\ntest = data[-indices,]\nFit model and create predictions:\nlibrary(kknn)\nset.seed(123)\n\nknn = kknn(Species~., train = train, test = test)\nsummary(knn)\n\n\nCall:\nkknn(formula = Species ~ ., train = train, test = test)\n\nResponse: \"nominal\"\n          fit prob.setosa prob.versicolor prob.virginica\n1      setosa           1      0.00000000     0.00000000\n2      setosa           1      0.00000000     0.00000000\n3      setosa           1      0.00000000     0.00000000\n4      setosa           1      0.00000000     0.00000000\n5      setosa           1      0.00000000     0.00000000\n6      setosa           1      0.00000000     0.00000000\n7      setosa           1      0.00000000     0.00000000\n8      setosa           1      0.00000000     0.00000000\n9      setosa           1      0.00000000     0.00000000\n10     setosa           1      0.00000000     0.00000000\n11     setosa           1      0.00000000     0.00000000\n12     setosa           1      0.00000000     0.00000000\n13     setosa           1      0.00000000     0.00000000\n14     setosa           1      0.00000000     0.00000000\n15 versicolor           0      1.00000000     0.00000000\n16 versicolor           0      1.00000000     0.00000000\n17 versicolor           0      1.00000000     0.00000000\n18 versicolor           0      1.00000000     0.00000000\n19 versicolor           0      1.00000000     0.00000000\n20 versicolor           0      1.00000000     0.00000000\n21  virginica           0      0.27541743     0.72458257\n22 versicolor           0      1.00000000     0.00000000\n23  virginica           0      0.06450608     0.93549392\n24 versicolor           0      1.00000000     0.00000000\n25 versicolor           0      1.00000000     0.00000000\n26 versicolor           0      0.98430840     0.01569160\n27 versicolor           0      1.00000000     0.00000000\n28 versicolor           0      1.00000000     0.00000000\n29 versicolor           0      1.00000000     0.00000000\n30 versicolor           0      0.82711887     0.17288113\n31  virginica           0      0.04881448     0.95118552\n32  virginica           0      0.00000000     1.00000000\n33 versicolor           0      0.93549392     0.06450608\n34  virginica           0      0.00000000     1.00000000\n35  virginica           0      0.00000000     1.00000000\n36  virginica           0      0.00000000     1.00000000\n37  virginica           0      0.00000000     1.00000000\n38 versicolor           0      0.65252004     0.34747996\n39  virginica           0      0.12578435     0.87421565\n40  virginica           0      0.01569160     0.98430840\n41  virginica           0      0.00000000     1.00000000\n42  virginica           0      0.00000000     1.00000000\n43  virginica           0      0.00000000     1.00000000\n44  virginica           0      0.00000000     1.00000000\n45  virginica           0      0.08512700     0.91487300\n\ntable(test$Species, fitted(knn))\n\n            \n             setosa versicolor virginica\n  setosa         14          0         0\n  versicolor      0         13         2\n  virginica       0          3        13",
    "crumbs": [
      "Understanding ML Algorithms",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Distance-based Algorithms</span>"
    ]
  },
  {
    "objectID": "B2-Distance.html#support-vector-machines-svms",
    "href": "B2-Distance.html#support-vector-machines-svms",
    "title": "6  Distance-based Algorithms",
    "section": "6.2 Support Vector Machines (SVMs)",
    "text": "6.2 Support Vector Machines (SVMs)\nSupport vectors machines have a different approach. They try to divide the predictor space into sectors for each class. To do so, a support-vector machine fits the parameters of a hyperplane (a \\(n-1\\) dimensional subspace in a \\(n\\)-dimensional space) in the predictor space by optimizing the distance between the hyperplane and the nearest point from each class.\nFitting a support-vector machine:\n\nlibrary(e1071)\n\ndata = iris\ndata[,1:4] = apply(data[,1:4], 2, scale)\nindices = sample.int(nrow(data), 0.7*nrow(data))\ntrain = data[indices,]\ntest = data[-indices,]\n\nsm = svm(Species~., data = train, kernel = \"linear\")\npred = predict(sm, newdata = test)\n\n\noldpar = par(mfrow = c(1, 2))\nplot(test$Sepal.Length, test$Petal.Length,\n     col =  pred, main = \"predicted\")\nplot(test$Sepal.Length, test$Petal.Length,\n     col =  test$Species, main = \"observed\")\n\n\n\n\n\n\n\npar(oldpar)\n\nmean(pred == test$Species) # Accuracy.\n\n[1] 0.9777778\n\n\nSupport-vector machines can only work on linearly separable problems. (A problem is called linearly separable if there exists at least one line in the plane with all of the points of one class on one side of the hyperplane and all the points of the others classes on the other side).\nIf this is not possible, we however, can use the so called kernel trick, which maps the predictor space into a (higher dimensional) space in which the problem is linear separable. After having identified the boundaries in the higher-dimensional space, we can project them back into the original dimensions.\n\nx1 = seq(-3, 3, length.out = 100)\nx2 = seq(-3, 3, length.out = 100)\nX = expand.grid(x1, x2)\ny = apply(X, 1, function(t) exp(-t[1]^2 - t[2]^2))\ny = ifelse(1/(1+exp(-y)) &lt; 0.62, 0, 1)\n\nimage(matrix(y, 100, 100))\nanimation::saveGIF(\n  {\n    for(i in c(\"truth\", \"linear\", \"radial\", \"sigmoid\")){\n      if(i == \"truth\"){\n        image(matrix(y, 100,100),\n        main = \"Ground truth\", axes = FALSE, las = 2)\n      }else{\n        sv = e1071::svm(x = x, y = factor(y), kernel = i)\n        image(matrix(as.numeric(as.character(predict(sv, x))), 100, 100),\n        main = paste0(\"Kernel: \", i), axes = FALSE, las = 2)\n        axis(1, at = seq(0,1, length.out = 10),\n        labels = round(seq(-3, 3, length.out = 10), 1))\n        axis(2, at = seq(0,1, length.out = 10),\n        labels = round(seq(-3, 3, length.out = 10), 1), las = 2)\n      }\n    }\n  },\n  movie.name = \"svm.gif\", autobrowse = FALSE, interval = 2\n)\n\n\n\n\n\n\n\n\n\n\nAs you have seen, this does not work with every kernel. Hence, the problem is to find the actual correct kernel, which is again an optimization procedure and can thus be approximated.",
    "crumbs": [
      "Understanding ML Algorithms",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Distance-based Algorithms</span>"
    ]
  },
  {
    "objectID": "B2-Distance.html#clustering-methods",
    "href": "B2-Distance.html#clustering-methods",
    "title": "6  Distance-based Algorithms",
    "section": "6.3 Clustering methods",
    "text": "6.3 Clustering methods\nIn unsupervised learning, we want to identify patterns in data without having any examples (supervision) about what the correct patterns / classes are. As an example, consider the iris data set. Here, we have 150 observations of 4 floral traits:\n\niris = datasets::iris\ncolors = hcl.colors(3)\ntraits = as.matrix(iris[,1:4])\nspecies = iris$Species\nimage(y = 1:4, x = 1:length(species) , z = traits,\n      ylab = \"Floral trait\", xlab = \"Individual\")\nsegments(50.5, 0, 50.5, 5, col = \"black\", lwd = 2)\nsegments(100.5, 0, 100.5, 5, col = \"black\", lwd = 2)\n\n\n\n\nTrait distributions of iris dataset\n\n\n\n\nThe observations are from 3 species and indeed those species tend to have different traits, meaning that the observations form 3 clusters.\n\npairs(traits, pch = as.integer(species), col = colors[as.integer(species)])\n\n\n\n\nScatterplots for trait-trait combinations.\n\n\n\n\nHowever, imagine we don’t know what species are, what is basically the situation in which people in the antique have been. The people just noted that some plants have different flowers than others, and decided to give them different names. This kind of process is what unsupervised learning does.\n\n6.3.1 Hierarchical Clustering\nA cluster refers to a collection of data points aggregated together because of certain similarities.\nIn hierarchical clustering, a hierarchy (tree) between data points is built.\n\nAgglomerative: Start with each data point in their own cluster, merge them up hierarchically.\nDivisive: Start with all data points in one cluster, and split hierarchically.\n\nMerges / splits are done according to linkage criterion, which measures distance between (potential) clusters. Cut the tree at a certain height to get clusters.\nHere an example\n\nset.seed(123)\n\n#Reminder: traits = as.matrix(iris[,1:4]).\n\nd = dist(traits)\nhc = hclust(d, method = \"complete\")\n\nplot(hc, main=\"\")\nrect.hclust(hc, k = 3)  # Draw rectangles around the branches.\n\n\n\n\nResults of hierarchical clustering. Red rectangle is drawn around the corresponding clusters.\n\n\n\n\nSame plot, but with colors for true species identity\n\nlibrary(ape)\n\nplot(as.phylo(hc),\n     tip.color = colors[as.integer(species)],\n     direction = \"downwards\")\n\n\n\n\nResults of hierarchical clustering. Colors correspond to the three species classes.\n\n\n\nhcRes3 = cutree(hc, k = 3)   #Cut a dendrogram tree into groups.\n\nCalculate confusion matrix. Note we are switching labels here so that it fits to the species.\n\ntmp = hcRes3\ntmp[hcRes3 == 2] = 3\ntmp[hcRes3 == 3] = 2\nhcRes3 = tmp\ntable(hcRes3, species)\n\n\n\n\nConfusion matrix for predicted and observed species classes.\n\n\nsetosa\nversicolor\nvirginica\n\n\n\n\n50\n0\n0\n\n\n0\n27\n1\n\n\n0\n23\n49\n\n\n\n\n\nNote that results might change if you choose a different agglomeration method, distance metric or scale of your variables. Compare, e.g. to this example:\n\nhc = hclust(d, method = \"ward.D2\")\n\nplot(as.phylo(hc),\n     tip.color = colors[as.integer(species)],\n     direction = \"downwards\")\n\n\n\n\nResults of hierarchical clustering. Colors correspond to the three species classes. Different agglomeration method\n\n\n\n\n\nhcRes3 = cutree(hc, k = 3)   #Cut a dendrogram tree into groups.\ntable(hcRes3, species)\n\n\n\n\nConfusion matrix for predicted and observed species classes.\n\n\nsetosa\nversicolor\nvirginica\n\n\n\n\n50\n0\n0\n\n\n0\n49\n15\n\n\n0\n1\n35\n\n\n\n\n\nWhich method is best? firstsecond\n\nlibrary(dendextend)\n\n\nset.seed(123)\n\nmethods = c(\"ward.D\", \"single\", \"complete\", \"average\",\n             \"mcquitty\", \"median\", \"centroid\", \"ward.D2\")\nout = dendlist()   # Create a dendlist object from several dendrograms.\nfor(method in methods){\n  res = hclust(d, method = method)\n  out = dendlist(out, as.dendrogram(res))\n}\nnames(out) = methods\nprint(out)\n\n$ward.D\n'dendrogram' with 2 branches and 150 members total, at height 199.6205 \n\n$single\n'dendrogram' with 2 branches and 150 members total, at height 1.640122 \n\n$complete\n'dendrogram' with 2 branches and 150 members total, at height 7.085196 \n\n$average\n'dendrogram' with 2 branches and 150 members total, at height 4.062683 \n\n$mcquitty\n'dendrogram' with 2 branches and 150 members total, at height 4.497283 \n\n$median\n'dendrogram' with 2 branches and 150 members total, at height 2.82744 \n\n$centroid\n'dendrogram' with 2 branches and 150 members total, at height 2.994307 \n\n$ward.D2\n'dendrogram' with 2 branches and 150 members total, at height 32.44761 \n\nattr(,\"class\")\n[1] \"dendlist\"\n\nget_ordered_3_clusters = function(dend){\n  # order.dendrogram function returns the order (index)\n  # or the \"label\" attribute for the leaves.\n  # cutree: Cut the tree (dendrogram) into groups of data.\n  cutree(dend, k = 3)[order.dendrogram(dend)]\n}\ndend_3_clusters = lapply(out, get_ordered_3_clusters)\n\n# Calculate Fowlkes-Mallows Index (determine the similarity between clusterings)\ncompare_clusters_to_iris = function(clus){\n  FM_index(clus, rep(1:3, each = 50), assume_sorted_vectors = TRUE)\n}\n\nclusters_performance = sapply(dend_3_clusters, compare_clusters_to_iris)\ndotchart(sort(clusters_performance), xlim = c(0.3, 1),\n         xlab = \"Fowlkes-Mallows index\",\n         main = \"Performance of linkage methods\n         in detecting the 3 species \\n in our example\",\n         pch = 19)\n\n\n\n\n\n\n\n\nWe might conclude that ward.D2 works best here. However, as we will learn later, optimizing the method without a hold-out for testing implies that our model may be overfitting. We should check this using cross-validation.\n\n\n6.3.2 K-means Clustering\nAnother example for an unsupervised learning algorithm is k-means clustering, one of the simplest and most popular unsupervised machine learning algorithms.\nTo start with the algorithm, you first have to specify the number of clusters (for our example the number of species). Each cluster has a centroid, which is the assumed or real location representing the center of the cluster (for our example this would be how an average plant of a specific species would look like). The algorithm starts by randomly putting centroids somewhere. Afterwards each data point is assigned to the respective cluster that raises the overall in-cluster sum of squares (variance) related to the distance to the centroid least of all. After the algorithm has placed all data points into a cluster the centroids get updated. By iterating this procedure until the assignment doesn’t change any longer, the algorithm can find the (locally) optimal centroids and the data points belonging to this cluster. Note that results might differ according to the initial positions of the centroids. Thus several (locally) optimal solutions might be found.\nThe “k” in K-means refers to the number of clusters and the ‘means’ refers to averaging the data-points to find the centroids.\nA typical pipeline for using k-means clustering looks the same as for other algorithms. After having visualized the data, we fit a model, visualize the results and have a look at the performance by use of the confusion matrix. By setting a fixed seed, we can ensure that results are reproducible.\n\nset.seed(123)\n\n#Reminder: traits = as.matrix(iris[,1:4]).\n\nkc = kmeans(traits, 3)\nprint(kc)\n\nK-means clustering with 3 clusters of sizes 50, 62, 38\n\nCluster means:\n  Sepal.Length Sepal.Width Petal.Length Petal.Width\n1     5.006000    3.428000     1.462000    0.246000\n2     5.901613    2.748387     4.393548    1.433871\n3     6.850000    3.073684     5.742105    2.071053\n\nClustering vector:\n  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n [75] 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 3 3 3 3 2 3 3 3 3\n[112] 3 3 2 2 3 3 3 3 2 3 2 3 2 3 3 2 2 3 3 3 3 3 2 3 3 3 3 2 3 3 3 2 3 3 3 2 3\n[149] 3 2\n\nWithin cluster sum of squares by cluster:\n[1] 15.15100 39.82097 23.87947\n (between_SS / total_SS =  88.4 %)\n\nAvailable components:\n\n[1] \"cluster\"      \"centers\"      \"totss\"        \"withinss\"     \"tot.withinss\"\n[6] \"betweenss\"    \"size\"         \"iter\"         \"ifault\"      \n\n\nVisualizing the results. Color codes true species identity, symbol shows cluster result.\n\nplot(iris[c(\"Sepal.Length\", \"Sepal.Width\")],\n     col =  colors[as.integer(species)], pch = kc$cluster)\npoints(kc$centers[, c(\"Sepal.Length\", \"Sepal.Width\")],\n       col = colors, pch = 1:3, cex = 3)\n\n\n\n\n\n\n\n\nWe see that there are are some discrepancies. Confusion matrix:\n\ntable(iris$Species, kc$cluster)\n\n            \n              1  2  3\n  setosa     50  0  0\n  versicolor  0 48  2\n  virginica   0 14 36\n\n\nIf you want to animate the clustering process, you could run\n\nlibrary(animation)\n\nsaveGIF(kmeans.ani(x = traits[,1:2], col = colors),\n        interval = 1, ani.width = 800, ani.height = 800)\n\nElbow technique to determine the probably best suited number of clusters:\n\nset.seed(123)\n\ngetSumSq = function(k){ kmeans(traits, k, nstart = 25)$tot.withinss }\n\n#Perform algorithm for different cluster sizes and retrieve variance.\niris.kmeans1to10 = sapply(1:10, getSumSq)\nplot(1:10, iris.kmeans1to10, type = \"b\", pch = 19, frame = FALSE,\n     xlab = \"Number of clusters K\",\n     ylab = \"Total within-clusters sum of squares\",\n     col = c(\"black\", \"red\", rep(\"black\", 8)))\n\n\n\n\n\n\n\n\nOften, one is interested in sparse models. Furthermore, higher k than necessary tends to overfitting. At the kink in the picture, the sum of squares dropped enough and k is still low enough. But keep in mind, this is only a rule of thumb and might be wrong in some special cases.\n\n\n6.3.3 Density-based Clustering\nDetermine the affinity of a data point according to the affinity of its k nearest neighbors. This is a very general description as there are many ways to do so.\n\n#Reminder: traits = as.matrix(iris[,1:4]).\n\nlibrary(dbscan)\n\n\nAttaching package: 'dbscan'\n\n\nThe following object is masked from 'package:stats':\n\n    as.dendrogram\n\nset.seed(123)\n\nkNNdistplot(traits, k = 4)   # Calculate and plot k-nearest-neighbor distances.\nabline(h = 0.4, lty = 2)\n\n\n\n\n\n\n\ndc = dbscan(traits, eps = 0.4, minPts = 6)\nprint(dc)\n\nDBSCAN clustering for 150 objects.\nParameters: eps = 0.4, minPts = 6\nUsing euclidean distances and borderpoints = TRUE\nThe clustering contains 4 cluster(s) and 32 noise points.\n\n 0  1  2  3  4 \n32 46 36 14 22 \n\nAvailable fields: cluster, eps, minPts, dist, borderPoints\n\n\n\nlibrary(factoextra)\n\n\nfviz_cluster(dc, traits, geom = \"point\", ggtheme = theme_light())\n\n\n\n\n\n\n\n\n\n\n6.3.4 Model-based Clustering\nThe last class of methods for unsupervised clustering are so-called model-based clustering methods.\n\nlibrary(mclust)\n\nPackage 'mclust' version 6.1.1\nType 'citation(\"mclust\")' for citing this R package in publications.\n\n\n\nmb = Mclust(traits)\n\nMclust automatically compares a number of candidate models (clusters, shape) according to BIC (The BIC is a criterion for classifying algorithms depending their prediction quality and their usage of parameters). We can look at the selected model via:\n\nmb$G # Two clusters.\n\n[1] 2\n\nmb$modelName # &gt; Ellipsoidal, equal shape.\n\n[1] \"VEV\"\n\n\nWe see that the algorithm prefers having 2 clusters. For better comparability to the other 2 methods, we will override this by setting:\n\nmb3 = Mclust(traits, 3)\n\nResult in terms of the predicted densities for 3 clusters\n\nplot(mb3, \"density\")\n\n\n\n\n\n\n\n\nPredicted clusters:\n\nplot(mb3, what=c(\"classification\"), add = T)\n\n\n\n\n\n\n\n\nConfusion matrix:\n\ntable(iris$Species, mb3$classification)\n\n\n\n\n\n\nsetosa\nversicolor\nvirginica\n\n\n\n\n50\n0\n0\n\n\n0\n49\n15\n\n\n0\n1\n35\n\n\n\n\n\n\n\n6.3.5 Ordination\nOrdination is used in explorative analysis and compared to clustering, similar objects are ordered together. So there is a relationship between clustering and ordination. Here a PCA ordination on on the iris data set.\n\npcTraits = prcomp(traits, center = TRUE, scale. = TRUE)\nbiplot(pcTraits, xlim = c(-0.25, 0.25), ylim = c(-0.25, 0.25))\n\n\n\n\n\n\n\n\nYou can cluster the results of this ordination, ordinate before clustering, or superimpose one on the other.",
    "crumbs": [
      "Understanding ML Algorithms",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Distance-based Algorithms</span>"
    ]
  },
  {
    "objectID": "B2-Distance.html#exercise---knn-and-svm",
    "href": "B2-Distance.html#exercise---knn-and-svm",
    "title": "6  Distance-based Algorithms",
    "section": "6.4 Exercise - kNN and SVM",
    "text": "6.4 Exercise - kNN and SVM\n\n\n\n\n\n\nQuestion: Hyperparameter tuning of kNN\n\n\n\nCombing back to the titanic dataset from the morning, we want to optimize the number of neighbors (k) and the kernel of the kNN:\nPrepare the data:\n\nlibrary(EcoData)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following object is masked from 'package:ape':\n\n    where\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(missRanger)\ndata(titanic_ml)\ndata = titanic_ml\ndata = \n  data %&gt;% select(survived, sex, age, fare, pclass)\ndata[,-1] = missRanger(data[,-1], verbose = 0)\n\ndata_sub =\n  data %&gt;%\n    mutate(age = scales::rescale(age, c(0, 1)),\n           fare = scales::rescale(fare, c(0, 1))) %&gt;%\n    mutate(sex = as.integer(sex) - 1L,\n           pclass = as.integer(pclass - 1L))\ndata_new = data_sub[is.na(data_sub$survived),] # for which we want to make predictions at the end\ndata_obs = data_sub[!is.na(data_sub$survived),] # data with known response\n\nHints:\n\ncheck the help of the kNN function to get an idea about the hyperparameters\n\n\n\n\n\n\n\nCode template\n\n\n\n\n\n\nlibrary(kknn)\nset.seed(42)\ndata_obs = data_sub[!is.na(data_sub$survived),] \ncv = 3\n\nouter_split = as.integer(cut(1:nrow(data_obs), breaks = cv))\n\nhyper_k = ... # must be integer vector\nhyper_kernel = ... # must be character vector\n\nresults = data.frame(\n  set = rep(NA, cv),\n  k = rep(NA, cv),\n  kernel = rep(NA, cv),\n  AUC = rep(NA, cv)\n)\n\nfor(i in 1:cv) {\n  train_outer = data_obs[outer_split != i, ]\n  test_outer = data_obs[outer_split == i, ]\n  \n  tuning_results = \n      sapply(1:length(hyper_k), function(k) {\n        predictions = kknn(as.factor(survived)~., train = train_outer, test = test_outer, k = hyper_k[k], scale = FALSE, kernel = hyper_kernel[k])\n        return(Metrics::auc(test_outer$survived, predictions$prob[,2]))\n      })\n  \n  results[i, 1] = i\n  results[i, 2] = hyper_k[which.max(tuning_results)]\n  results[i, 3] = hyper_kernel[which.max(tuning_results)]  \n  results[i, 4] = max(tuning_results)\n}\n\nprint(results)\n\n\n\n\n\n\n\n\nClick here to see the solution\n\n\nlibrary(kknn)\nset.seed(42)\ndata_obs = data_sub[!is.na(data_sub$survived),] \ncv = 3\n\nouter_split = as.integer(cut(1:nrow(data_obs), breaks = cv))\n\n# sample minnodesize values (must be integers)\nhyper_k = sample(10, 10)\nhyper_kernel = sample(c(\"triangular\", \"inv\", \"gaussian\", \"rank\"), 10, replace = TRUE)\n\nresults = data.frame(\n  set = rep(NA, cv),\n  k = rep(NA, cv),\n  kernel = rep(NA, cv),\n  AUC = rep(NA, cv)\n)\n\nfor(i in 1:cv) {\n  train_outer = data_obs[outer_split != i, ]\n  test_outer = data_obs[outer_split == i, ]\n  \n  tuning_results = \n      sapply(1:length(hyper_k), function(k) {\n        predictions = kknn(as.factor(survived)~., train = train_outer, test = test_outer, k = hyper_k[k], scale = FALSE, kernel = hyper_kernel[k])\n        return(Metrics::auc(test_outer$survived, predictions$prob[,2]))\n      })\n  \n  results[i, 1] = i\n  results[i, 2] = hyper_k[which.max(tuning_results)]\n  results[i, 3] = hyper_kernel[which.max(tuning_results)]  \n  results[i, 4] = max(tuning_results)\n}\n\nprint(results)\n\n  set  k   kernel       AUC\n1   1 10 gaussian 0.8078358\n2   2  9     rank 0.8047081\n3   3  6      inv 0.8299800\n\n\nMake predictions:\n\nprediction_ensemble = \n  sapply(1:nrow(results), function(i) {\n    predictions = kknn(as.factor(survived)~., train = data_obs, test = data_new, k = results$k[i], scale = FALSE, kernel = results$kernel[i])\n    return(predictions$prob[,2])\n  })\n\n# Single predictions from the ensemble model:\nwrite.csv(data.frame(y = apply(prediction_ensemble, 1, mean)), file = \"Max_titanic_ensemble.csv\")\n\n\n\n\n\n\n\n\nQuestion: kNN and SVM\n\n\n\nFit a standard k-nearest-neighbor classifier and a support vector machine with a linear kernel (check help) on the Sonar dataset, and report what fitted better.\nPrepare dataset:\n\nlibrary(mlbench)\nset.seed(123)\n\ndata(Sonar)\ndata = Sonar\n#str(data)\n\n# Do not forget scaling! This may be done implicitly by most functions.\n# Here, it's done explicitly for teaching purposes.\ndata = cbind.data.frame(\n  scale(data[,-length(data)]),\n  \"class\" = data[,length(data)]\n)\n\nn = length(data[,1])\nindicesTrain = sample.int(n, (n+1) %/% 2) # Take (at least) 50 % of the data.\n\ntrain = data[indicesTrain,]\ntest = data[-indicesTrain,]\n\nTasks:\n\nFit a svm (from the e1071 package) on the train dataset and make predictions for the test dataset\nFit a kNN (from the kknn package) on the train dataset and make predictions for the test dataset\nCalculate confusion matrices to compare the performance\n\n\n\n\n\nClick here to see the solution\n\n\nlibrary(e1071)\nlibrary(kknn)\n\nknn = kknn(class~., train = train, test = test, scale = FALSE,\n           kernel = \"rectangular\")\npredKNN = predict(knn, newdata = test)\n\nsm = svm(class~., data = train, scale = FALSE, kernel = \"linear\")\npredSVM = predict(sm, newdata = test)\n\n\n\nK-nearest-neighbor, standard (rectangular) kernel:\n\n\n       labelsTest\npredKNN  M  R\n      M 46 29\n      R  8 21\n\n\nCorrectly classified:  67  /  104\n\n\n\n\nSupport-vector machine, linear kernel:\n\n\n       labelsTest\npredSVM  M  R\n      M 41 15\n      R 13 35\n\n\nCorrectly classified:  76  /  104\n\n\nK-nearest neighbor fitted (slightly) better.",
    "crumbs": [
      "Understanding ML Algorithms",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Distance-based Algorithms</span>"
    ]
  },
  {
    "objectID": "B2-Distance.html#exercise---unsupervised-learning",
    "href": "B2-Distance.html#exercise---unsupervised-learning",
    "title": "6  Distance-based Algorithms",
    "section": "6.5 Exercise - Unsupervised learning",
    "text": "6.5 Exercise - Unsupervised learning\n\n\n\n\n\n\nTask\n\n\n\nGo through the 4(5) unsupervised algorithms from the supervised chapter Section 2.2, and check\n\nif they are sensitive (i.e. if results change)\nif you scale the input features (= predictors), instead of using the raw data.\n\nDiscuss in your group: Which is more appropriate for this analysis and/or in general: Scaling or not scaling?\n\n\n\n\nClick here to see the solution for hierarchical clustering\n\n\nlibrary(dendextend)\n\nmethods = c(\"ward.D\", \"single\", \"complete\", \"average\",\n            \"mcquitty\", \"median\", \"centroid\", \"ward.D2\")\n\ncluster_all_methods = function(distances){\n  out = dendlist()\n  for(method in methods){\n    res = hclust(distances, method = method)\n    out = dendlist(out, as.dendrogram(res))\n  }\n  names(out) = methods\n\n  return(out)\n}\n\nget_ordered_3_clusters = function(dend){\n  return(cutree(dend, k = 3)[order.dendrogram(dend)])\n}\n\ncompare_clusters_to_iris = function(clus){\n  return(FM_index(clus, rep(1:3, each = 50), assume_sorted_vectors = TRUE))\n}\n\ndo_clustering = function(traits, scale = FALSE){\n  set.seed(123)\n  headline = \"Performance of linkage methods\\nin detecting the 3 species\\n\"\n\n  if(scale){\n    traits = scale(traits)  # Do scaling on copy of traits.\n    headline = paste0(headline, \"Scaled\")\n  }else{ headline = paste0(headline, \"Not scaled\") }\n\n  distances = dist(traits)\n  out = cluster_all_methods(distances)\n  dend_3_clusters = lapply(out, get_ordered_3_clusters)\n  clusters_performance = sapply(dend_3_clusters, compare_clusters_to_iris)\n  dotchart(sort(clusters_performance), xlim = c(0.3,1),\n           xlab = \"Fowlkes-Mallows index\",\n           main = headline,\n           pch = 19)\n}\n\ntraits = as.matrix(iris[,1:4])\n\n# Do clustering on unscaled data.\ndo_clustering(traits, FALSE)\n\n\n\n\n\n\n\n# Do clustering on scaled data.\ndo_clustering(traits, TRUE)\n\n\n\n\n\n\n\n\nIt seems that scaling is harmful for hierarchical clustering. But this might be a deception. Be careful: If you have data on different units or magnitudes, scaling is definitely useful! Otherwise variables with higher values get higher influence.\n\n\n\nClick here to see the solution for K-means\n\n\ndo_clustering = function(traits, scale = FALSE){\n  set.seed(123)\n\n  if(scale){\n    traits = scale(traits)  # Do scaling on copy of traits.\n    headline = \"K-means Clustering\\nScaled\\nSum of all tries: \"\n  }else{ headline = \"K-means Clustering\\nNot scaled\\nSum of all tries: \" }\n\n  getSumSq = function(k){ kmeans(traits, k, nstart = 25)$tot.withinss }\n  iris.kmeans1to10 = sapply(1:10, getSumSq)\n\n  headline = paste0(headline, round(sum(iris.kmeans1to10), 2))\n\n  plot(1:10, iris.kmeans1to10, type = \"b\", pch = 19, frame = FALSE,\n       main = headline,\n       xlab = \"Number of clusters K\",\n       ylab = \"Total within-clusters sum of squares\",\n       col = c(\"black\", \"red\", rep(\"black\", 8)) )\n}\n\ntraits = as.matrix(iris[,1:4])\n\n# Do clustering on unscaled data.\ndo_clustering(traits, FALSE)\n\n\n\n\n\n\n\n# Do clustering on scaled data.\ndo_clustering(traits, TRUE)\n\n\n\n\n\n\n\n\nIt seems that scaling is harmful for K-means clustering. But this might be a deception. Be careful: If you have data on different units or magnitudes, scaling is definitely useful! Otherwise variables with higher values get higher influence.\n\n\n\nClick here to see the solution for density-based clustering\n\n\nlibrary(dbscan)\n\ncorrect = as.factor(iris[,5])\n# Start at 1. Noise points will get 0 later.\nlevels(correct) = 1:length(levels(correct))\ncorrect\n\n  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n [75] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3\n[112] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n[149] 3 3\nLevels: 1 2 3\n\ndo_clustering = function(traits, scale = FALSE){\n  set.seed(123)\n\n  if(scale){ traits = scale(traits) } # Do scaling on copy of traits.\n\n  #####\n  # Play around with the parameters \"eps\" and \"minPts\" on your own!\n  #####\n  dc = dbscan(traits, eps = 0.41, minPts = 4)\n\n  labels = as.factor(dc$cluster)\n  noise = sum(dc$cluster == 0)\n  levels(labels) = c(\"noise\", 1:( length(levels(labels)) - 1))\n\n  tbl = table(correct, labels)\n  correct_classified = 0\n  for(i in 1:length(levels(correct))){\n    correct_classified = correct_classified + tbl[i, i + 1]\n  }\n\n  cat( if(scale){ \"Scaled\" }else{ \"Not scaled\" }, \"\\n\\n\" )\n  cat(\"Confusion matrix:\\n\")\n  print(tbl)\n  cat(\"\\nCorrect classified points: \", correct_classified, \" / \", length(iris[,5]))\n  cat(\"\\nSum of noise points: \", noise, \"\\n\")\n}\n\ntraits = as.matrix(iris[,1:4])\n\n# Do clustering on unscaled data.\ndo_clustering(traits, FALSE)\n\nNot scaled \n\nConfusion matrix:\n       labels\ncorrect noise  1  2  3  4\n      1     3 47  0  0  0\n      2     5  0 38  3  4\n      3    17  0  0 33  0\n\nCorrect classified points:  118  /  150\nSum of noise points:  25 \n\n# Do clustering on scaled data.\ndo_clustering(traits, TRUE)\n\nScaled \n\nConfusion matrix:\n       labels\ncorrect noise  1  2  3  4\n      1     9 41  0  0  0\n      2    14  0 36  0  0\n      3    36  0  1  4  9\n\nCorrect classified points:  81  /  150\nSum of noise points:  59 \n\n\nIt seems that scaling is harmful for density based clustering. But this might be a deception. Be careful: If you have data on different units or magnitudes, scaling is definitely useful! Otherwise variables with higher values get higher influence.\n\n\n\nClick here to see the solution for model-based clustering\n\n\nlibrary(mclust)\n\ndo_clustering = function(traits, scale = FALSE){\n  set.seed(123)\n\n  if(scale){ traits = scale(traits) } # Do scaling on copy of traits.\n\n  mb3 = Mclust(traits, 3)\n\n  tbl = table(iris$Species, mb3$classification)\n\n  cat( if(scale){ \"Scaled\" }else{ \"Not scaled\" }, \"\\n\\n\" )\n  cat(\"Confusion matrix:\\n\")\n  print(tbl)\n  cat(\"\\nCorrect classified points: \", sum(diag(tbl)), \" / \", length(iris[,5]))\n}\n\ntraits = as.matrix(iris[,1:4])\n\n# Do clustering on unscaled data.\ndo_clustering(traits, FALSE)\n\nNot scaled \n\nConfusion matrix:\n            \n              1  2  3\n  setosa     50  0  0\n  versicolor  0 45  5\n  virginica   0  0 50\n\nCorrect classified points:  145  /  150\n\n# Do clustering on scaled data.\ndo_clustering(traits, TRUE)\n\nScaled \n\nConfusion matrix:\n            \n              1  2  3\n  setosa     50  0  0\n  versicolor  0 45  5\n  virginica   0  0 50\n\nCorrect classified points:  145  /  150\n\n\nFor model based clustering, scaling does not matter.\n\n\n\nClick here to see the solution for ordination\n\n\ntraits = as.matrix(iris[,1:4])\n\nbiplot(prcomp(traits, center = TRUE, scale. = TRUE),\n       main = \"Use integrated scaling\")\n\n\n\n\n\n\n\nbiplot(prcomp(scale(traits), center = FALSE, scale. = FALSE),\n       main = \"Scale explicitly\")\n\n\n\n\n\n\n\nbiplot(prcomp(traits, center = FALSE, scale. = FALSE),\n       main = \"No scaling at all\")\n\n\n\n\n\n\n\n\nFor PCA ordination, scaling matters. Because we are interested in directions of maximal variance, all parameters should be scaled, or the one with the highest values might dominate all others.",
    "crumbs": [
      "Understanding ML Algorithms",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Distance-based Algorithms</span>"
    ]
  },
  {
    "objectID": "B3-NeuralNetworks.html",
    "href": "B3-NeuralNetworks.html",
    "title": "7  Artificial Neural Networks",
    "section": "",
    "text": "7.1 Loss\nArtificial neural networks are biologically inspired, the idea is that inputs are processed by weights, the neurons, the signals then accumulate at hidden nodes (axioms), and only if the sum of activations of several neurons exceed a certain threshold, the signal will be passed on.\nTasks such as regression and classification are fundamentally different; the former has continuous responses, while the latter has a discrete response. In ML algorithms, these different tasks can be represented by different loss functions (Classical ML algorithms also use loss functions but often they are automatically inferred, also neural networks are much more versatile, supporting more loss functions). Moreover, the tasks can differ even within regression or classification (e.g., in classification, we have binary classification (0 or 1) or multi-class classification (0, 1, or 2)). As a result, especially in DL, we have different specialized loss functions available for specific response types. The table below shows a list of supported loss functions in cito:\nIn the iris data, we model Species which has 3 response levels, so this is was what we call multilabel and it requires a softmax link and a cross-entropy loss function, in cito we specify that by using the softmax loss:\nlibrary(cito)\nmodel&lt;- dnn(Species~., data = datasets::iris, loss = \"softmax\", verbose = FALSE)\n\n\n\n\n\n\n\nhead(predict(model, type = \"response\"))\n\n        setosa  versicolor    virginica\n[1,] 0.9971139 0.002886094 1.488425e-10\n[2,] 0.9940364 0.005963516 7.447284e-10\n[3,] 0.9961911 0.003808888 3.997651e-10\n[4,] 0.9929588 0.007041195 1.311017e-09\n[5,] 0.9973817 0.002618186 1.354965e-10\n[6,] 0.9961315 0.003868487 2.131664e-10",
    "crumbs": [
      "Understanding ML Algorithms",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Artificial Neural Networks</span>"
    ]
  },
  {
    "objectID": "B3-NeuralNetworks.html#loss",
    "href": "B3-NeuralNetworks.html#loss",
    "title": "7  Artificial Neural Networks",
    "section": "",
    "text": "Loss\nType\nExample\n\n\n\n\nmse (mean squared error)\nRegression\nNumeric values\n\n\nmae (mean absolute error)\nRegression\nNumeric values, often used for skewed data\n\n\nsoftmax\nClassification, multi-label\nSpecies\n\n\ncross-entropy\nClassification, binary or multi-class\nSurvived/non-survived, Multi-species/communities\n\n\nbinomial\nClassification, binary or multi-class\nBinomial likelihood\n\n\npoisson\nRegression\nCount data",
    "crumbs": [
      "Understanding ML Algorithms",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Artificial Neural Networks</span>"
    ]
  },
  {
    "objectID": "B3-NeuralNetworks.html#validation",
    "href": "B3-NeuralNetworks.html#validation",
    "title": "7  Artificial Neural Networks",
    "section": "7.2 Validation",
    "text": "7.2 Validation\nA holdout, or validation data, is important for detecting (and preventing) overfitting. In cito, we can directly tell the dnn function to automatically use a random subset of the data as validation data, which is validated after each epoch (each iteration of the optimization), allowing us to monitor the training:\n\ndata = airquality[complete.cases(airquality),] # DNN cannot handle NAs!\ndata = scale(data)\n\nmodel = dnn(Ozone~., \n            validation = 0.2,\n            loss = \"mse\",data = data, verbose = FALSE)\n\n\n\n\n\n\n\n\nThe validation argument ranges from 0 and 1 is the percent of the data that should be used for validation\n\n7.2.1 Baseline loss\nSince training DNNs can be quite challenging, we provide in cito a baseline loss that is computed from an intercept-only model (e.g., just the mean of the response). And the absolute minimum performance our DNN should achieve is to outperform the baseline model!",
    "crumbs": [
      "Understanding ML Algorithms",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Artificial Neural Networks</span>"
    ]
  },
  {
    "objectID": "B3-NeuralNetworks.html#trainings-parameter",
    "href": "B3-NeuralNetworks.html#trainings-parameter",
    "title": "7  Artificial Neural Networks",
    "section": "7.3 Trainings parameter",
    "text": "7.3 Trainings parameter\nIn DL, the optimization (the training of the DNN) is challenging as we have to optimize up to millions of parameters (which are not really identifiable, it is accepted that the optimization does not find a global minimum but just a good local minimum). We have a few important hyperparameters that affect only the optimization:\n\n\n\n\n\n\n\n\nHyperparameter\nMeaning\nRange\n\n\n\n\nlearning rate\nthe step size of the parameter updating in the iterative optimization routine, if too high, the optimizer will step over good local optima, if too small, the optimizer will be stuck in a bad local optima\n[0.00001, 0.5]\n\n\nbatch size\nNNs are optimized via stochastic gradient descent, i.e. only a batch of the data is used to update the parameters at a time\nDepends on the data:\n10-250\n\n\nepoch\nthe data is fed into the optimization in batches, once the entire data set has been used in the optimization, the epoch is complete (so e.g. n = 100, batch size = 20, it takes 5 steps to complete an epoch)\n100+ (use early stopping)\n\n\n\n\n7.3.1 Learning rate\ncito visualizes the training (see graphic). The reason for this is that the training can easily fail if the learning rate (lr) is poorly chosen. If the lr is too high, the optimizer “jumps” over good local optima, while it gets stuck in local optima if the lr is too small:\n\nmodel = dnn(Ozone~., \n            hidden = c(10L, 10L), \n            activation = c(\"selu\", \"selu\"), \n            loss = \"mse\", lr = 0.4, data = data, epochs = 150L, verbose = FALSE)\n\nIf too high, the training will either directly fail (because the loss jumps to infinity) or the loss will be very wiggly and doesn’t decrease over the number of epochs.\n\nmodel = dnn(Ozone~., \n            hidden = c(10L, 10L), \n            activation = c(\"selu\", \"selu\"), \n            loss = \"mse\", lr = 0.0001, data = data, epochs = 150L, verbose = FALSE)\n\n\n\n\n\n\n\n\nIf too low, the loss will be very wiggly but doesn’t decrease.\n\n\n\n\n\n\nLearning rate scheduler\n\n\n\nAdjusting / reducing the learning rate during training is a common approach in neural networks. The idea is to start with a larger learning rate and then steadily decrease it during training (either systematically or based on specific properties):\n\nmodel = dnn(Ozone~., \n            hidden = c(10L, 10L), \n            activation = c(\"selu\", \"selu\"), \n            loss = \"mse\", \n            lr = 0.1,\n            lr_scheduler = config_lr_scheduler(\"step\", step_size = 30, gamma = 0.1),\n            # reduce learning all 30 epochs (new lr = 0.1* old lr)\n            data = data, epochs = 150L, verbose = FALSE)",
    "crumbs": [
      "Understanding ML Algorithms",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Artificial Neural Networks</span>"
    ]
  },
  {
    "objectID": "B3-NeuralNetworks.html#architecture",
    "href": "B3-NeuralNetworks.html#architecture",
    "title": "7  Artificial Neural Networks",
    "section": "7.4 Architecture",
    "text": "7.4 Architecture\nThe architecture of the NN can be specified by the hidden argument, it is a vector where the length corresponds to the number of hidden layers and value of entry to the number of hidden neurons in each layer (and the same applies for the activation argument that specifies the activation functions in the hidden layers). It is hard to make recommendations about the architecture, a kind of general rule is that the width of the hidden layers is more important than the depth of the NN.\nExample:\n\ndata = airquality[complete.cases(airquality),] # DNN cannot handle NAs!\ndata = scale(data)\n\nmodel = dnn(Ozone~., \n            hidden = c(10L, 10L), # Architecture, number of hidden layers and nodes in each layer\n            activation = c(\"selu\", \"selu\"), # activation functions for the specific hidden layer\n            loss = \"mse\", lr = 0.01, data = data, epochs = 150L, verbose = FALSE)\n\n\n\n\n\n\n\nplot(model)\n\n\n\n\n\n\n\nsummary(model)\n\nSummary of Deep Neural Network Model\n\nFeature Importance:\n  variable importance_1\n1  Solar.R   0.25258571\n2     Wind   1.28593985\n3     Temp   2.18595677\n4    Month   0.11113260\n5      Day   0.05585356\n\nAverage Conditional Effects:\n         Response_1\nSolar.R  0.15693689\nWind    -0.36343492\nTemp     0.52156922\nMonth   -0.07966598\nDay      0.05614600\n\nStandard Deviation of Conditional Effects:\n        Response_1\nSolar.R 0.08068032\nWind    0.15842261\nTemp    0.17761755\nMonth   0.06756073\nDay     0.03988055",
    "crumbs": [
      "Understanding ML Algorithms",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Artificial Neural Networks</span>"
    ]
  },
  {
    "objectID": "B3-NeuralNetworks.html#regularization",
    "href": "B3-NeuralNetworks.html#regularization",
    "title": "7  Artificial Neural Networks",
    "section": "7.5 Regularization",
    "text": "7.5 Regularization\nWe can use \\(\\lambda\\) and \\(\\alpha\\) to set L1 and L2 regularization on the weights in our NN:\n\nmodel = dnn(Ozone~., \n            hidden = c(10L, 10L), \n            activation = c(\"selu\", \"selu\"), \n            loss = \"mse\", \n            lr = 0.01,\n            lambda = 0.01, # regularization strength\n            alpha = 0.5,\n            lr_scheduler = config_lr_scheduler(\"step\", step_size = 30, gamma = 0.1),\n            # reduce learning all 30 epochs (new lr = 0.1* old lr)\n            data = data, epochs = 150L, verbose = FALSE)\n\n\n\n\n\n\n\nsummary(model)\n\nSummary of Deep Neural Network Model\n\nFeature Importance:\n  variable importance_1\n1  Solar.R   0.19730536\n2     Wind   0.89466544\n3     Temp   1.85003890\n4    Month   0.10298765\n5      Day   0.04207865\n\nAverage Conditional Effects:\n         Response_1\nSolar.R  0.13358239\nWind    -0.36069701\nTemp     0.53011482\nMonth   -0.09347387\nDay      0.07908972\n\nStandard Deviation of Conditional Effects:\n        Response_1\nSolar.R 0.05372532\nWind    0.13375143\nTemp    0.13652699\nMonth   0.08010081\nDay     0.05217821\n\n\nBe careful that you don’t accidentally set all weights to 0 because of a too high regularization. We check the weights of the first layer:\n\nfields::image.plot(coef(model)[[1]][[1]]) # weights of the first layer",
    "crumbs": [
      "Understanding ML Algorithms",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Artificial Neural Networks</span>"
    ]
  },
  {
    "objectID": "B3-NeuralNetworks.html#hyperparameter-tuning",
    "href": "B3-NeuralNetworks.html#hyperparameter-tuning",
    "title": "7  Artificial Neural Networks",
    "section": "7.6 Hyperparameter tuning",
    "text": "7.6 Hyperparameter tuning\ncito has a feature to automatically tune hyperparameters under Cross Validation!\n\nif you pass the function tune(...) to a hyperparameter, this hyperparameter will be automatically tuned\nin the tuning = config_tuning(...) argument, you can specify the cross-validation strategy and the number of hyperparameters that shoudl be tested\nafter the tuning, cito will fit automatically a model with the best hyperparameters on the full data and will return this model\n\nMinimal example with the iris dataset:\n\ndf = iris\ndf[,1:4] = scale(df[,1:4])\n\nmodel_tuned = dnn(Species~., \n                  loss = \"softmax\",\n                  data = iris,\n                  lambda = tune(lower = 0.0, upper = 0.2), # you can pass the \"tune\" function to a hyerparameter\n                  tuning = config_tuning(CV = 3, steps = 20L),\n                  verbose = FALSE\n                  )\n\nStarting hyperparameter tuning...\nFitting final model...\n\n# tuning results\nmodel_tuned$tuning\n\n# A tibble: 20 × 5\n   steps  test train models   lambda\n   &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt;     &lt;dbl&gt;\n 1     1  88.5     0 NA     0.117   \n 2     2  33.1     0 NA     0.0214  \n 3     3 169.      0 NA     0.154   \n 4     4 169.      0 NA     0.179   \n 5     5  37.2     0 NA     0.0253  \n 6     6 168.      0 NA     0.157   \n 7     7  18.8     0 NA     0.000983\n 8     8 124.      0 NA     0.121   \n 9     9  86.0     0 NA     0.0970  \n10    10  21.9     0 NA     0.00477 \n11    11  36.2     0 NA     0.0234  \n12    12 121.      0 NA     0.128   \n13    13  34.9     0 NA     0.0222  \n14    14 169.      0 NA     0.160   \n15    15 122.      0 NA     0.131   \n16    16  61.2     0 NA     0.0514  \n17    17 148.      0 NA     0.152   \n18    18  66.9     0 NA     0.0621  \n19    19 169.      0 NA     0.144   \n20    20 169.      0 NA     0.192   \n\n# model_tuned is now already the best model!",
    "crumbs": [
      "Understanding ML Algorithms",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Artificial Neural Networks</span>"
    ]
  },
  {
    "objectID": "B3-NeuralNetworks.html#exercise",
    "href": "B3-NeuralNetworks.html#exercise",
    "title": "7  Artificial Neural Networks",
    "section": "7.7 Exercise",
    "text": "7.7 Exercise\n\n\n\n\n\n\nQuestion: Hyperparameter tuning dnn - Titanic dataset\n\n\n\nTune architecture\n\nTune training parameters (learning rate, batch size) and regularization\n\nHints\ncito has a feature to automatically tune hyperparameters under Cross Validation!\n\npassing tune(...) to a hyperparameter will tell cito to tune this specific hyperparameter\nthe tuning = config_tuning(...) let you specify the cross-validation strategy and the number of hyperparameters that should be tested (steps = number of hyperparameter combinations that should be tried)\nafter tuning, cito will fit automatically a model with the best hyperparameters on the full data and will return this model\n\nMinimal example with the iris dataset:\n\nlibrary(cito)\ndf = iris\ndf[,1:4] = scale(df[,1:4])\n\nmodel_tuned = dnn(Species~.,\n                  loss = \"softmax\",\n                  data = iris,\n                  lambda = tune(lower = 0.0, upper = 0.2), # you can pass the \"tune\" function to a hyerparameter\n                  tuning = config_tuning(CV = 3, steps = 20L)\n                  )\n\n# tuning results\nmodel_tuned$tuning\n\n\n# model_tuned is now already the best model!\n\n\nlibrary(EcoData)\nlibrary(dplyr)\nlibrary(missRanger)\ndata(titanic_ml)\ndata = titanic_ml\ndata =\n  data %&gt;% select(survived, sex, age, fare, pclass)\ndata[,-1] = missRanger(data[,-1], verbose = 0)\n\ndata_sub =\n  data %&gt;%\n    mutate(age = scales::rescale(age, c(0, 1)),\n           fare = scales::rescale(fare, c(0, 1))) %&gt;%\n    mutate(sex = as.integer(sex) - 1L,\n           pclass = as.integer(pclass - 1L))\ndata_new = data_sub[is.na(data_sub$survived),] # for which we want to make predictions at the end\ndata_obs = data_sub[!is.na(data_sub$survived),] # data with known response\n\n\nmodel = dnn(survived~.,\n          hidden = c(10L, 10L), # change\n          activation = c(\"selu\", \"selu\"), # change\n          loss = \"binomial\",\n          lr = 0.05, #change\n          validation = 0.2,\n          lambda = 0.001, # change\n          alpha = 0.1, # change\n          lr_scheduler = config_lr_scheduler(\"reduce_on_plateau\", patience = 10, factor = 0.9),\n          data = data_obs, epochs = 40L, verbose = FALSE, plot= TRUE)\n\n# Predictions:\n\npredictions = predict(model, newdata = data_new, type = \"response\") # change prediction type to response so that cito predicts probabilities\n\nwrite.csv(data.frame(y = predictions[,1]), file = \"Max_titanic_dnn.csv\")\n\n\n\n\n\n\n\n\n\nQuestion: Hyperparameter tuning - Plant-pollinator dataset\n\n\n\nThe plant-pollinator database is a collection of plant-pollinator interactions with traits for plants and pollinators. The idea is pollinators interact with plants when their traits fit (e.g. the tongue of a bee needs to match the shape of a flower). We explored the advantage of machine learning algorithms over traditional statistical models in predicting species interactions in our paper. If you are interested you can have a look here.\nsee Section A.3 for more information about the dataset.\nPrepare the data:\n\nlibrary(EcoData)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\ndata(plantPollinator_df)\nplant_poll = plantPollinator_df\nsummary(plant_poll)\n\n                   crop                       insect          type          \n Vaccinium_corymbosum:  256   Andrena_wilkella   :   80   Length:20480      \n Brassica_napus      :  256   Andrena_barbilabris:   80   Class :character  \n Carum_carvi         :  256   Andrena_cineraria  :   80   Mode  :character  \n Coriandrum_sativum  :  256   Andrena_flavipes   :   80                     \n Daucus_carota       :  256   Andrena_gravida    :   80                     \n Malus_domestica     :  256   Andrena_haemorrhoa :   80                     \n (Other)             :18944   (Other)            :20000                     \n    season             diameter        corolla             colour         \n Length:20480       Min.   :  2.00   Length:20480       Length:20480      \n Class :character   1st Qu.:  5.00   Class :character   Class :character  \n Mode  :character   Median : 19.00   Mode  :character   Mode  :character  \n                    Mean   : 27.03                                        \n                    3rd Qu.: 25.00                                        \n                    Max.   :150.00                                        \n                    NA's   :9472                                          \n    nectar            b.system         s.pollination      inflorescence     \n Length:20480       Length:20480       Length:20480       Length:20480      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n  composite            guild               tongue            body      \n Length:20480       Length:20480       Min.   : 2.000   Min.   : 2.00  \n Class :character   Class :character   1st Qu.: 4.800   1st Qu.: 8.00  \n Mode  :character   Mode  :character   Median : 6.600   Median :10.50  \n                                       Mean   : 8.104   Mean   :10.66  \n                                       3rd Qu.:10.500   3rd Qu.:13.00  \n                                       Max.   :26.400   Max.   :25.00  \n                                       NA's   :17040    NA's   :6160   \n  sociality           feeding          interaction \n Length:20480       Length:20480       0   :14095  \n Class :character   Class :character   1   :  595  \n Mode  :character   Mode  :character   NA's: 5790  \n                                                   \n                                                   \n                                                   \n                                                   \n\n# scale numeric features\nplant_poll[, sapply(plant_poll, is.numeric)] = scale(plant_poll[, sapply(plant_poll, is.numeric)])\n\n# remove NAs\ndf = plant_poll[complete.cases(plant_poll),] # remove NAs\n\n# remove factors with only one level \ndata_obs = df %&gt;% select(-crop, -insect, -season, -colour, -guild, -feeding, -composite)\n\n# change response to integer (because cito wants integer 0/1 for binomial data)\ndata_obs$interaction = as.integer(data_obs$interaction) - 1 \n\n\n\n# prepare the test data\nnewdata = plant_poll[is.na(plantPollinator_df$interaction), ]\nnewdata_imputed = missRanger::missRanger(data = newdata[,-ncol(newdata)], verbose = 0) # fill NAs\nnewdata_imputed$interaction = NA\n\nMinimal example in cito:\n\nlibrary(cito)\nset.seed(42)\nmodel = dnn(interaction~., \n    hidden = c(50, 50), \n    activation = \"selu\", \n    loss = \"binomial\", \n    lr = tune(values = seq(0.0001, 0.03, length.out = 10)),\n    batchsize = 100L, # increasing the batch size will reduce the runtime\n    data = data_obs, \n    epochs = 200L, \n    burnin = 200L,\n    tuning = config_tuning(CV = 3, steps = 10))\n\n\nprint(model$tuning)\n\n# make final predictions\npredictions = predict(model, newdata_imputed, type = \"response\")[,1]\n\n# prepare submissions\nwrite.csv(data.frame(y = predictions), file = \"my_submission.csv\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYour Tasks:\n\nUse cito to tune learning parameters and the regularization\nSubmit your predictions to http://rhsbio7.uni-regensburg.de:8500/\n\n\n\n\n\nClick here to see the solution\n\nMinimal example:\n\nlibrary(cito)\nset.seed(42)\nmodel = dnn(interaction~., \n    hidden = c(50, 50), \n    activation = \"selu\", \n    loss = \"binomial\", \n    lr = tune(values = seq(0.0001, 0.03, length.out = 10)),\n    lambda = tune(values = seq(0.0001, 0.1, length.out = 10)),\n    alpha = tune(),\n    batchsize = 100L, # increasing the batch size will reduce the runtime\n    data = data_obs, \n    epochs = 100L, \n    tuning = config_tuning(CV = 3, steps = 15))\n\nStarting hyperparameter tuning...\nFitting final model...\n\nprint(model$tuning)\n\n# A tibble: 15 × 7\n   steps  test train models lambda  alpha      lr\n   &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt;   &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;\n 1     1  392.     0 NA     0.0889 0.197  0.00674\n 2     2  356.     0 NA     0.1    0.501  0.0134 \n 3     3  332.     0 NA     0.0334 0.825  0.0200 \n 4     4  335.     0 NA     0.0112 0.0921 0.0134 \n 5     5  341.     0 NA     0.0778 0.470  0.0234 \n 6     6  332.     0 NA     0.0445 0.881  0.0134 \n 7     7  357.     0 NA     0.0445 0.436  0.00674\n 8     8  340.     0 NA     0.0667 0.277  0.0200 \n 9     9  517.     0 NA     0.1    0.0571 0.0001 \n10    10  322.     0 NA     0.0112 0.885  0.0234 \n11    11  332.     0 NA     0.0112 0.148  0.0234 \n12    12  344.     0 NA     0.0667 0.317  0.0167 \n13    13  335.     0 NA     0.0001 0.681  0.00342\n14    14  588.     0 NA     0.1    0.283  0.0001 \n15    15  358.     0 NA     0.0556 0.425  0.0101 \n\n\nMake predictions:\n\npredictions = predict(model, newdata_imputed, type = \"response\")[,1]\n\nwrite.csv(data.frame(y = predictions), file = \"Max_plant_.csv\")",
    "crumbs": [
      "Understanding ML Algorithms",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Artificial Neural Networks</span>"
    ]
  },
  {
    "objectID": "D2-explainableAI.html",
    "href": "D2-explainableAI.html",
    "title": "8  Explainable AI",
    "section": "",
    "text": "8.1 A Practical Example\nThe goal of explainable AI (xAI, aka interpretable machine learning) is to explain why a fitted machine learning model makes certain predictions. A typical example is to understand how important different variables are for predictions. The incentives for doing so range from a better technical understanding of the models over understanding which data is important for improving predictions to questions of fairness and discrimination (e.g. to understand if an algorithm uses skin color to make a decision).\nIn this lecture we will work with an African Elephant occurrence dataset.\nWe will fit a random forest and use the iml package for xAI, see https://christophm.github.io/interpretable-ml-book/.\nlibrary(iml)\nlibrary(ranger) # different random Forest package!\nlibrary(EcoData)\nlibrary(cito)\nset.seed(123)\n\n\ndata = EcoData::elephant$occurenceData\nhead(data)\n?EcoData::elephant\nMeaning of the bioclim variables:\nrf = ranger(as.factor(Presence) ~ ., data = data, probability = TRUE)\nThe cito package has quite extensive xAI functionalities. However, ranger, as most other machine learning packages, has no extensive xAI functionalities. Thus, to do xAI with ranger, we have to use a generic xAI package that can handle almost all machine learning models.\nWhen we want to use such a generic package, we first have to create a predictor object, that holds the model and the data. The iml package uses R6 classes, that means new objects can be created by calling Predictor$new(). (Do not worry if you do not know what R6 classes are, just use the command.)\nWe often have to warp our predict function inside a so called wrapper function so that the output of the predict function fits to iml (iml expects that the predict function returns a vector of predictions:\npredict_wrapper = function(model, newdata) predict(model, data=newdata)$predictions[,2]\n\npredictor = Predictor$new(rf, data = data[,-1], y = data[,1], predict.function = predict_wrapper)\npredictor$task = \"classif\" # set task to classification\n# \"Predictor\" is an object generator.",
    "crumbs": [
      "Explainable AI and causal ML",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Explainable AI</span>"
    ]
  },
  {
    "objectID": "D2-explainableAI.html#a-practical-example",
    "href": "D2-explainableAI.html#a-practical-example",
    "title": "8  Explainable AI",
    "section": "",
    "text": "Bioclim variable\nMeaning\n\n\n\n\nbio1\nAnnual Mean Temperature\n\n\nbio2\nMean Diurnal Range (Mean of monthly (max temp - min temp))\n\n\nbio3\nIsothermality (BIO2/BIO7) (×100)\n\n\nbio4\nTemperature Seasonality (standard deviation ×100)\n\n\nbio5\nMax Temperature of Warmest Month\n\n\nbio6\nMin Temperature of Coldest Month\n\n\nbio7\nTemperature Annual Range (BIO5-BIO6)\n\n\nbio8\nMean Temperature of Wettest Quarter\n\n\nbio9\nMean Temperature of Driest Quarter\n\n\nbio10\nMean Temperature of Warmest Quarter\n\n\nbio11\nMean Temperature of Coldest Quarter\n\n\nbio12\nAnnual Precipitation\n\n\nbio13\nPrecipitation of Wettest Month\n\n\nbio14\nPrecipitation of Driest Month\n\n\nbio15\nPrecipitation Seasonality (Coefficient of Variation)\n\n\nbio16\nPrecipitation of Wettest Quarter\n\n\nbio17\nPrecipitation of Driest Quarter\n\n\nbio18\nPrecipitation of Warmest Quarter\n\n\nbio19\nPrecipitation of Coldest Quarter",
    "crumbs": [
      "Explainable AI and causal ML",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Explainable AI</span>"
    ]
  },
  {
    "objectID": "D2-explainableAI.html#feature-importance",
    "href": "D2-explainableAI.html#feature-importance",
    "title": "8  Explainable AI",
    "section": "8.2 Feature Importance",
    "text": "8.2 Feature Importance\nFeature importance should not be mistaken with the random forest variable importance though they are related. It tells us how important the individual variables are for predictions, can be calculated for all machine learning models and is based on a permutation approach (have a look at the book):\n\nimp = FeatureImp$new(predictor, loss = \"ce\")\nplot(imp)\n\nbio9 (Precipitation of the wettest Quarter) is the most important variable.",
    "crumbs": [
      "Explainable AI and causal ML",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Explainable AI</span>"
    ]
  },
  {
    "objectID": "D2-explainableAI.html#partial-dependencies",
    "href": "D2-explainableAI.html#partial-dependencies",
    "title": "8  Explainable AI",
    "section": "8.3 Partial Dependencies",
    "text": "8.3 Partial Dependencies\nPartial dependencies are similar to allEffects plots for normal regressions. The idea is to visualize “marginal effects” of predictors (with the “feature” argument we specify the variable we want to visualize):\n\neff = FeatureEffect$new(predictor, feature = \"bio9\", method = \"pdp\",\n                        grid.size = 30)\nplot(eff)\n\nOne disadvantage of partial dependencies is that they are sensitive to correlated predictors. Accumulated local effects can be used for accounting for correlation of predictors.",
    "crumbs": [
      "Explainable AI and causal ML",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Explainable AI</span>"
    ]
  },
  {
    "objectID": "D2-explainableAI.html#accumulated-local-effects",
    "href": "D2-explainableAI.html#accumulated-local-effects",
    "title": "8  Explainable AI",
    "section": "8.4 Accumulated Local Effects",
    "text": "8.4 Accumulated Local Effects\nAccumulated local effects (ALE) are basically partial dependencies plots but try to correct for correlations between predictors.\n\nale = FeatureEffect$new(predictor, feature = \"bio9\", method = \"ale\")\nale$plot()\n\nIf there is no collinearity, you shouldn’t see much difference between partial dependencies and ALE plots.",
    "crumbs": [
      "Explainable AI and causal ML",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Explainable AI</span>"
    ]
  },
  {
    "objectID": "D2-explainableAI.html#friedmans-h-statistic",
    "href": "D2-explainableAI.html#friedmans-h-statistic",
    "title": "8  Explainable AI",
    "section": "8.5 Friedman’s H-statistic",
    "text": "8.5 Friedman’s H-statistic\nThe H-statistic can be used to find interactions between predictors. However, again, keep in mind that the H-statistic is sensible to correlation between predictors:\n\ninteract = Interaction$new(predictor, \"bio9\",grid.size = 5L)\nplot(interact)",
    "crumbs": [
      "Explainable AI and causal ML",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Explainable AI</span>"
    ]
  },
  {
    "objectID": "D2-explainableAI.html#global-explainer---simplifying-the-machine-learning-model",
    "href": "D2-explainableAI.html#global-explainer---simplifying-the-machine-learning-model",
    "title": "8  Explainable AI",
    "section": "8.6 Global Explainer - Simplifying the Machine Learning Model",
    "text": "8.6 Global Explainer - Simplifying the Machine Learning Model\nAnother idea is simplifying the machine learning model with another simpler model such as a decision tree. We create predictions with the machine learning model for a lot of different input values and then we fit a decision tree on these predictions. We can then interpret the easier model.\n\nlibrary(partykit)\n\ntree = TreeSurrogate$new(predictor, maxdepth = 2)\nplot(tree$tree)",
    "crumbs": [
      "Explainable AI and causal ML",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Explainable AI</span>"
    ]
  },
  {
    "objectID": "D2-explainableAI.html#local-explainer---lime-explaining-single-instances-observations",
    "href": "D2-explainableAI.html#local-explainer---lime-explaining-single-instances-observations",
    "title": "8  Explainable AI",
    "section": "8.7 Local Explainer - LIME Explaining Single Instances (observations)",
    "text": "8.7 Local Explainer - LIME Explaining Single Instances (observations)\nThe global approach is to simplify the entire machine learning-black-box model via a simpler model, which is then interpretable.\nHowever, sometimes we are only interested in understanding how single predictions are generated. The LIME (Local interpretable model-agnostic explanations) approach explores the feature space around one observation and based on this locally fits a simpler model (e.g. a linear model):\n\nlime.explain = LocalModel$new(predictor, x.interest = data[1,-1])\nlime.explain$results\nplot(lime.explain)",
    "crumbs": [
      "Explainable AI and causal ML",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Explainable AI</span>"
    ]
  },
  {
    "objectID": "D2-explainableAI.html#local-explainer---shapley",
    "href": "D2-explainableAI.html#local-explainer---shapley",
    "title": "8  Explainable AI",
    "section": "8.8 Local Explainer - Shapley",
    "text": "8.8 Local Explainer - Shapley\nThe Shapley method computes the so called Shapley value, feature contributions for single predictions, and is based on an approach from cooperative game theory. The idea is that each feature value of the instance is a “player” in a game, where the prediction is the reward. The Shapley value tells us how to fairly distribute the reward among the features.\n\nshapley = Shapley$new(predictor, x.interest = data[1,-1])\nshapley$plot()",
    "crumbs": [
      "Explainable AI and causal ML",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Explainable AI</span>"
    ]
  },
  {
    "objectID": "D2-explainableAI.html#uncertainties---the-bootstrap",
    "href": "D2-explainableAI.html#uncertainties---the-bootstrap",
    "title": "8  Explainable AI",
    "section": "8.9 Uncertainties - the bootstrap",
    "text": "8.9 Uncertainties - the bootstrap\nStandard xAI method do not provide reliable uncertainties on the fitted curves. If you want uncertainties or p-values, the most common method is the bootstrap.\nIn a bootstrap, is instead of splitting up the data in test / validation, we sample from the data with replacement and fit the models repeatedly. The idea is to get an estimate about the variability we would expect if we created another dataset of the same size.\n\nk = 10 # bootstrap samples\nn = nrow(data)\nerror = rep(NA, k)\n\nfor(i in 1:k){\n  bootSample = sample.int(n, n, replace = TRUE)\n  rf = ranger(as.factor(Presence) ~ ., data = data[bootSample,], probability = TRUE)\n  error[i] = rf$prediction.error\n}\n\nhist(error, main = \"uncertainty of in-sample error\")\n\nNote that the distinction between bootstrap and validation / cross-validation is as follows:\n\nValidation / cross-validation estimates out-of-sample predictive error\nBootstrap estimates uncertainty / confidence interval on all model outputs (could be prediction and inference).",
    "crumbs": [
      "Explainable AI and causal ML",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Explainable AI</span>"
    ]
  },
  {
    "objectID": "D2-explainableAI.html#exercises",
    "href": "D2-explainableAI.html#exercises",
    "title": "8  Explainable AI",
    "section": "8.10 Exercises",
    "text": "8.10 Exercises\n\n\n\n\n\n\nxAI in cito\n\n\n\nData preparation\n\nlibrary(iml)\nlibrary(cito)\nlibrary(EcoData)\nlibrary(cito)\n\n\ndata = EcoData::elephant$occurenceData\nhead(data)\n?EcoData::elephant\n\n# we will subsample data (absences) to reduce runtime\ndata_sub = data[sample.int(nrow(data), 500),]\n\nCito includes a lot of xAI methods directly out of the box\n\nmodel = dnn(Presence~., data = data_sub, batchsize = 200L,loss = \"binomial\", verbose = FALSE, lr = 0.15, epochs = 300)\n\nTry the following commands:\n\nsummary(dnn, n_permute = 10)\nPDP(dnn)\nALE(dnn)\n\nMoreover, try to refit the model with the option bootstrap = 5. This may take a short while. Observe how the xAI options change.\n\n\n\n\nClick here to see the solution for cito\n\n\nmodel = dnn(Presence~., data = data_sub, batchsize = 200L, bootstrap = 5L, loss = \"binomial\", verbose = FALSE, lr = 0.15, epochs = 300)\n\n\nsummary(model, n_permute = 10L)\n\n\nPDP(model)\nALE(model)\n\n\n\n\n\n\n\n\nQuestion\n\n\n\nUse the Titanic_ml dataset and fit a random forest, dnn or a BRT using xgboost. Explore / interpret the fitted model using iml (see also the book: https://christophm.github.io/interpretable-ml-book/).\nTip:\nIf you use iml, you need to provide a proper prediction function wrapper:\n\n# random Forest (ranger), regression:\npredict_wrapper = function(model, newdata) predict(model, data=newdata)$predictions\n\n# random Forest (ranger), classification:\npredict_wrapper = function(model, newdata) predict(model, data=newdata)$predictions[,2]\n\n# xgboost:\npredict_wrapper = function(model, newdata) predict(model, as.matrix(newdata))\n\nPrepare the data\n\nlibrary(EcoData)\nlibrary(dplyr)\nlibrary(missRanger) # for imputation\n\n\ndata = titanic_ml\n\n# feature selection\ndata = data %&gt;% select(survived, sex, age, fare, pclass)# play around with the features\n\n# imputation - remove response variable!\nhead(data)\ndata_imputed = data\ndata_imputed[,-1] = missRanger(data_imputed[,-1])\nsummary(data_imputed)\n\ndata_imputed = data_imputed %&gt;% \n  mutate(age = (age - mean(age))/sd(age), fare = (fare - mean(fare))/sd(fare),\n         sex = as.integer(sex), pclass = as.integer(pclass))\n\ndata_obs = data_imputed[!is.na(data_imputed$survived), ]\ndata_new = data_imputed[is.na(data_imputed$survived), ]\n\n\n\n\n\nClick here to see the solution for RF\n\n\nlibrary(ranger)\nlibrary(\"iml\")\nset.seed(1234)\ndata_obs$survived = as.factor(data_obs$survived)\n\nrf = ranger(survived ~ ., data = data_obs, importance = \"impurity\", probability = TRUE)\n\n# For submission:\n#write.csv(data.frame(y=predict(rf, data_new)$predictions[,2]), file = \"wine_RF.csv\")\n\n# Standard depiction of importance:\nranger::importance(rf)\n\n# Setup wrapper\npredict_wrapper = function(model, newdata) predict(model, data=newdata)$predictions[,2]\n\n\n# IML:\npredictor = Predictor$new(\n    rf, data = data_obs[,which(names(data_obs) != \"survived\")], y = as.integer(data_obs$survived)-1,\n    predict.function = predict_wrapper\n    )\n\n# Mind: This is stochastical!\nimportance = FeatureImp$new(predictor, loss = \"logLoss\")\n\nplot(importance)\n\n# Comparison between standard importance and IML importance:\nimportanceRf = names(rf$variable.importance)[order(rf$variable.importance, decreasing = TRUE)]\nimportanceIML = importance$results[1]\ncomparison = cbind(importanceIML, importanceRf)\ncolnames(comparison) = c(\"IML\", \"RF\")\nas.matrix(comparison)\n\nMind that feature importance, and the random forest’s variable importance are related but not equal! Variable importance is a measure for determining importance while creating the forest (i.e. for fitting). Feature importance is a measure for how important a variable is for prediction.\nMaybe you want to see other explanation methods as well. Surely you can use the other techniques of this section on your own.\n\n\n\nClick here to see the solution for xgboost\n\n\nlibrary(xgboost)\nlibrary(\"iml\")\nset.seed(1234)\n\n\ndata_xg = xgb.DMatrix(\n  data = as.matrix(data_obs[,which(names(data_obs) != \"survived\")]),\n  label = as.integer(data_obs$survived)-1\n)\nbrt = xgboost(data_xg, nrounds = 24, objective = \"reg:logistic\")\n\n\n# For submission:\n#write.csv(round(predict(brt, data_new)), file = \"wine_RF.csv\")\n\n# Standard depiction of importance:\nxgboost::xgb.importance(model = brt)\n\n# Setup wrapper\npredict_wrapper = function(model, newdata) predict(model, as.matrix(newdata))\n\n\n# IML:\npredictor = Predictor$new(\n    brt, data = data_obs[,which(names(data_obs) != \"survived\")], y = as.integer(data_obs$survived)-1,\n    predict.function = predict_wrapper\n    )\n\n# Mind: This is stochastical!\nimportance = FeatureImp$new(predictor, loss = \"logLoss\")\n\nplot(importance)\n\n\n\n\nClick here to see the solution for cito\n\n\nlibrary(cito)\ndata_obs$survived = as.integer(data_obs$survived) - 1\nnn = dnn(survived~., data = data_obs, loss = \"binomial\", lr= 0.03, epochs = 300)\n\nsummary(nn)",
    "crumbs": [
      "Explainable AI and causal ML",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Explainable AI</span>"
    ]
  },
  {
    "objectID": "D1-causality.html",
    "href": "D1-causality.html",
    "title": "9  Causal Inference and Machine Learning",
    "section": "",
    "text": "9.1 Causal Inference on Static Data\nxAI aims at explaining how predictions are being made. In general, xAI != causality. xAI methods measure which variables are used for predictions by the algorithm, or how far variables improve predictions. The important point to note here: If a variable causes something, we could also expect that it helps predicting the very thing. The opposite, however, is not generally true - very often it is possible that a variable that doesn’t cause anything can predict something.\nIn statistics courses (in particular our course: Advanced Biostatistics), we discuss the issue of causality at full length. Here, we don’t want to go into the details, but again, you should in general resist to interpret indicators of importance in xAI as causal effects. They tell you something about what’s going on in the algorithm, not about what’s going on in reality.\nMethods for causal inference depend on whether we have dynamic or static data. The latter is the more common case. With static data, the problem is confounding. If you have several correlated predictors, you can get spurious correlations between a given predictor and the response, although there is no causal effect in general.\nMultiple regression and few other methods are able to correct for other predictors and thus isolate the causal effect. The same is not necessarily true for machine learning algorithms and xAI methods. This is not a bug, but a feature - for making good predictions, it is often no problem, but rather an advantage to also use non-causal predictors.\nHere an example for the indicators of variable importance in the random forest algorithm. The purpose of this script is to show that random forest variable importance will split importance values for collinear variables evenly, even if collinearity is low enough so that variables are separable and would be correctly separated by an lm / ANOVA.\nWe first simulate a data set with 2 predictors that are strongly correlated, but only one of them has an effect on the response.\nlibrary(randomForest)\nset.seed(123)\n\n# Simulation parameters.\nn = 1000\ncol = 0.7\n\n# Create collinear predictors.\nx1 = runif(n)\nx2 = col * x1 + (1-col) * runif(n)\n\n# Response is only influenced by x1.\ny = x1 + rnorm(n)\nlm / anova correctly identify \\(x1\\) as causal variable.\nsummary(lm(y ~ x1 + x2))\nFit random forest and show variable importance:\nset.seed(123)\n\nfit = randomForest(y ~ x1 + x2, importance = TRUE)\nvarImpPlot(fit)\nVariable importance is now split nearly evenly.\nTask: understand why this is - remember:",
    "crumbs": [
      "Explainable AI and causal ML",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Causal Inference and Machine Learning</span>"
    ]
  },
  {
    "objectID": "D1-causality.html#causalInference",
    "href": "D1-causality.html#causalInference",
    "title": "9  Causal Inference and Machine Learning",
    "section": "",
    "text": "How the random forest works - variables are randomly hidden from the regression tree when the trees for the forest are built.\nRemember that as \\(x1 \\propto x2\\), we can use \\(x2\\) as a replacement for \\(x1\\).\nRemember that the variable importance measures the average contributions of the different variables in the trees of the forest.",
    "crumbs": [
      "Explainable AI and causal ML",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Causal Inference and Machine Learning</span>"
    ]
  },
  {
    "objectID": "D1-causality.html#structural-equation-models",
    "href": "D1-causality.html#structural-equation-models",
    "title": "9  Causal Inference and Machine Learning",
    "section": "9.2 Structural Equation Models",
    "text": "9.2 Structural Equation Models\nIf causal relationships get more complicated, it will not be possible to adjust correctly with a simple lm. In this case, in statistics, we will usually use structural equation models (SEMs). Structural equation models are designed to estimate entire causal diagrams. There are two main SEM packages in R: For anything that is non-normal, you will currently have to estimate the directed acyclic graph (that depicts causal relations) piece-wise with CRAN package piecewiseSEM. Example for a vegetation data set:\n\nlibrary(piecewiseSEM)\n\nmod = psem(\n lm(rich ~ distance + elev + abiotic + age + hetero + firesev + cover,\n    data = keeley),\n lm(firesev ~ elev + age + cover, data = keeley),\n lm(cover ~ age + elev + hetero + abiotic, data = keeley)\n)\nsummary(mod)\nplot(mod)\n\nFor linear structural equation models, we can estimate the entire directed acyclic graph at once. This also allows having unobserved variables in the directed acyclic graph. One of the most popular packages for this is lavaan.\n\nlibrary(lavaan)\n\nmod = \"\n rich ~ distance + elev + abiotic + age + hetero + firesev + cover\n firesev ~ elev + age + cover\n cover ~ age + elev + abiotic\n\"\nfit = sem(mod, data = keeley)\nsummary(fit)\n\nThe default plot options are not so nice as before.\n\nlibrary(lavaanPlot)\n\nlavaanPlot(model = fit)\n\nAnother plotting option is using semPlot.\n\nlibrary(semPlot)\n\nsemPaths(fit)",
    "crumbs": [
      "Explainable AI and causal ML",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Causal Inference and Machine Learning</span>"
    ]
  },
  {
    "objectID": "D1-causality.html#automatic-causal-discovery",
    "href": "D1-causality.html#automatic-causal-discovery",
    "title": "9  Causal Inference and Machine Learning",
    "section": "9.3 Automatic Causal Discovery",
    "text": "9.3 Automatic Causal Discovery\nBut how to get the causal graph? In statistics, it is common to “guess” it and afterwards do residual checks, in the same way as we guess the structure of a regression. For more complicated problems, however, this is unsatisfying. Some groups therefore work on so-called causal discovery algorithms, i.e. algorithms that automatically generate causal graphs from data. One of the most classic algorithms of this sort is the PC algorithm. Here an example using the pcalg package:\n\nlibrary(pcalg)\n\nLoading the data:\n\ndata(\"gmG\", package = \"pcalg\") # Loads data sets gmG and gmG8.\nsuffStat = list(C = cor(gmG8$x), n = nrow(gmG8$x))\nvarNames = gmG8$g@nodes\n\nFirst, the skeleton algorithm creates a basic graph without connections (a skeleton of the graph).\n\nskel.gmG8 = skeleton(suffStat, indepTest = gaussCItest,\nlabels = varNames, alpha = 0.01)\nRgraphviz::plot(skel.gmG8@graph)\n\nWhat is missing here is the direction of the errors. The PC algorithm now makes tests for conditional independence, which allows fixing a part (but typically not all) of the directions of the causal arrows.\n\npc.gmG8 = pc(suffStat, indepTest = gaussCItest,\nlabels = varNames, alpha = 0.01)\nRgraphviz::plot(pc.gmG8@graph )",
    "crumbs": [
      "Explainable AI and causal ML",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Causal Inference and Machine Learning</span>"
    ]
  },
  {
    "objectID": "D1-causality.html#causal-inference-on-dynamic-data",
    "href": "D1-causality.html#causal-inference-on-dynamic-data",
    "title": "9  Causal Inference and Machine Learning",
    "section": "9.4 Causal Inference on Dynamic Data",
    "text": "9.4 Causal Inference on Dynamic Data\nWhen working with dynamic data, we can use an additional piece of information - the cause usually precedes the effect, which means that we can test for a time-lag between cause and effect to determine the direction of causality. This way of testing for causality is known as Granger causality, or Granger methods. Here an example:\n\nlibrary(lmtest)\n\n## What came first: the chicken or the egg?\ndata(ChickEgg)\ngrangertest(egg ~ chicken, order = 3, data = ChickEgg)\ngrangertest(chicken ~ egg, order = 3, data = ChickEgg)",
    "crumbs": [
      "Explainable AI and causal ML",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Causal Inference and Machine Learning</span>"
    ]
  },
  {
    "objectID": "D1-causality.html#outlook-for-machine-learning",
    "href": "D1-causality.html#outlook-for-machine-learning",
    "title": "9  Causal Inference and Machine Learning",
    "section": "9.5 Outlook for Machine Learning",
    "text": "9.5 Outlook for Machine Learning\nAs we have seen, there are already a few methods / algorithms for discovering causality from large data sets, but the systematic transfer of these concepts to machine learning, in particular deep learning, is still at its infancy. At the moment, this field is actively researched and changes extremely fast, so we recommend using Google to see what is currently going on. Particular in business and industry, there is a large interest in learning about causal effect from large data sets. In our opinion, a great topic for young scientists to specialize on.",
    "crumbs": [
      "Explainable AI and causal ML",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Causal Inference and Machine Learning</span>"
    ]
  },
  {
    "objectID": "Appendix-Datasets.html",
    "href": "Appendix-Datasets.html",
    "title": "Appendix A — Datasets",
    "section": "",
    "text": "A.1 Machine learning pipeline / workflow\nYou can download the data sets we use in the course here (ignore browser warnings) or by installing the EcoData package:",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Datasets</span>"
    ]
  },
  {
    "objectID": "Appendix-Datasets.html#machine-learning-pipeline-workflow",
    "href": "Appendix-Datasets.html#machine-learning-pipeline-workflow",
    "title": "Appendix A — Datasets",
    "section": "",
    "text": "Machine Learning pipeline",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Datasets</span>"
    ]
  },
  {
    "objectID": "Appendix-Datasets.html#titanic",
    "href": "Appendix-Datasets.html#titanic",
    "title": "Appendix A — Datasets",
    "section": "A.2 Titanic",
    "text": "A.2 Titanic\nThe data set is a collection of Titanic passengers with information about their age, class, sex, and their survival status. The competition is simple here: Train a machine learning model and predict the survival probability.\nThe Titanic data set is very well explored and serves as a stepping stone in many machine learning careers. For inspiration and data exploration notebooks, check out this kaggle competition.\nResponse variable: “survived”\nA minimal working example:\n\nLoad data set:\n\n\nlibrary(EcoData)\n\ndata(titanic_ml)\ntitanic = titanic_ml\nsummary(titanic)\n\n     pclass         survived          name               sex     \n Min.   :1.000   Min.   :0.0000   Length:1309        female:466  \n 1st Qu.:2.000   1st Qu.:0.0000   Class :character   male  :843  \n Median :3.000   Median :0.0000   Mode  :character               \n Mean   :2.295   Mean   :0.3853                                  \n 3rd Qu.:3.000   3rd Qu.:1.0000                                  \n Max.   :3.000   Max.   :1.0000                                  \n                 NA's   :655                                     \n      age              sibsp            parch            ticket    \n Min.   : 0.1667   Min.   :0.0000   Min.   :0.000   CA. 2343:  11  \n 1st Qu.:21.0000   1st Qu.:0.0000   1st Qu.:0.000   1601    :   8  \n Median :28.0000   Median :0.0000   Median :0.000   CA 2144 :   8  \n Mean   :29.8811   Mean   :0.4989   Mean   :0.385   3101295 :   7  \n 3rd Qu.:39.0000   3rd Qu.:1.0000   3rd Qu.:0.000   347077  :   7  \n Max.   :80.0000   Max.   :8.0000   Max.   :9.000   347082  :   7  \n NA's   :263                                        (Other) :1261  \n      fare                     cabin      embarked      boat    \n Min.   :  0.000                  :1014    :  2           :823  \n 1st Qu.:  7.896   C23 C25 C27    :   6   C:270    13     : 39  \n Median : 14.454   B57 B59 B63 B66:   5   Q:123    C      : 38  \n Mean   : 33.295   G6             :   5   S:914    15     : 37  \n 3rd Qu.: 31.275   B96 B98        :   4            14     : 33  \n Max.   :512.329   C22 C26        :   4            4      : 31  \n NA's   :1         (Other)        : 271            (Other):308  \n      body                      home.dest  \n Min.   :  1.0                       :564  \n 1st Qu.: 72.0   New York, NY        : 64  \n Median :155.0   London              : 14  \n Mean   :160.8   Montreal, PQ        : 10  \n 3rd Qu.:256.0   Cornwall / Akron, OH:  9  \n Max.   :328.0   Paris, France       :  9  \n NA's   :1188    (Other)             :639  \n\n\n\nImpute missing values (not our response variable!):\n\n\nlibrary(missRanger)\nlibrary(dplyr)\nset.seed(123)\n\ntitanic_imputed = titanic %&gt;% select(-name, -ticket, -cabin, -boat, -home.dest)\ntitanic_imputed = missRanger::missRanger(data = titanic_imputed %&gt;%\n                                           select(-survived), verbose = 0)\ntitanic_imputed$survived = titanic$survived\n\n\nSplit into training and test set:\n\n\ntrain = titanic_imputed[!is.na(titanic$survived), ]\ntest = titanic_imputed[is.na(titanic$survived), ]\n\n\nTrain model:\n\n\nmodel = glm(survived~., data = train, family = binomial())\n\n\nPredictions:\n\n\npreds = predict(model, data = test, type = \"response\")\nhead(preds)\n\n       561        321       1177       1098       1252       1170 \n0.79095923 0.30597519 0.01400693 0.12310859 0.14099292 0.11768284 \n\n\n\nCreate submission csv:\n\n\nwrite.csv(data.frame(y = preds), file = \"glm.csv\")\n\nAnd submit the csv on http://rhsbio7.uni-regensburg.de:8500.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Datasets</span>"
    ]
  },
  {
    "objectID": "Appendix-Datasets.html#sec-plantpoll",
    "href": "Appendix-Datasets.html#sec-plantpoll",
    "title": "Appendix A — Datasets",
    "section": "A.3 Plant-pollinator Database",
    "text": "A.3 Plant-pollinator Database\nThe plant-pollinator database is a collection of plant-pollinator interactions with traits for plants and pollinators. The idea is pollinators interact with plants when their traits fit (e.g. the tongue of a bee needs to match the shape of a flower). We explored the advantage of machine learning algorithms over traditional statistical models in predicting species interactions in our paper. If you are interested you can have a look here.\n\n\n\n\n\n\n\n\n\nResponse variable: “interaction”\nA minimal working example:\n\nLoad data set:\n\n\nlibrary(EcoData)\n\ndata(plantPollinator_df)\nplant_poll = plantPollinator_df\nsummary(plant_poll)\n\n                   crop                       insect          type          \n Vaccinium_corymbosum:  256   Andrena_wilkella   :   80   Length:20480      \n Brassica_napus      :  256   Andrena_barbilabris:   80   Class :character  \n Carum_carvi         :  256   Andrena_cineraria  :   80   Mode  :character  \n Coriandrum_sativum  :  256   Andrena_flavipes   :   80                     \n Daucus_carota       :  256   Andrena_gravida    :   80                     \n Malus_domestica     :  256   Andrena_haemorrhoa :   80                     \n (Other)             :18944   (Other)            :20000                     \n    season             diameter        corolla             colour         \n Length:20480       Min.   :  2.00   Length:20480       Length:20480      \n Class :character   1st Qu.:  5.00   Class :character   Class :character  \n Mode  :character   Median : 19.00   Mode  :character   Mode  :character  \n                    Mean   : 27.03                                        \n                    3rd Qu.: 25.00                                        \n                    Max.   :150.00                                        \n                    NA's   :9472                                          \n    nectar            b.system         s.pollination      inflorescence     \n Length:20480       Length:20480       Length:20480       Length:20480      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n  composite            guild               tongue            body      \n Length:20480       Length:20480       Min.   : 2.000   Min.   : 2.00  \n Class :character   Class :character   1st Qu.: 4.800   1st Qu.: 8.00  \n Mode  :character   Mode  :character   Median : 6.600   Median :10.50  \n                                       Mean   : 8.104   Mean   :10.66  \n                                       3rd Qu.:10.500   3rd Qu.:13.00  \n                                       Max.   :26.400   Max.   :25.00  \n                                       NA's   :17040    NA's   :6160   \n  sociality           feeding          interaction \n Length:20480       Length:20480       0   :14095  \n Class :character   Class :character   1   :  595  \n Mode  :character   Mode  :character   NA's: 5790  \n                                                   \n                                                   \n                                                   \n                                                   \n\n\n\nImpute missing values (not our response variable!) We will select only a few predictors here (you can work with all predictors of course).\n\n\nlibrary(missRanger)\nlibrary(dplyr)\nset.seed(123)\n\nplant_poll_imputed = plant_poll %&gt;% select(diameter,\n                                           corolla,\n                                           tongue,\n                                           body,\n                                           interaction)\nplant_poll_imputed = missRanger::missRanger(data = plant_poll_imputed %&gt;%\n                                              select(-interaction), verbose = 0)\nplant_poll_imputed$interaction = plant_poll$interaction\n\n\nSplit into training and test set:\n\n\ntrain = plant_poll_imputed[!is.na(plant_poll_imputed$interaction), ]\ntest = plant_poll_imputed[is.na(plant_poll_imputed$interaction), ]\n\n\nTrain model:\n\n\nmodel = glm(interaction~., data = train, family = binomial())\n\n\nPredictions:\n\n\npreds = predict(model, newdata = test, type = \"response\")\nhead(preds)\n\n         1          2          3          4          5          6 \n0.02942746 0.05063489 0.03780247 0.03780247 0.02651142 0.04130643 \n\n\n\nCreate submission csv:\n\n\nwrite.csv(data.frame(y = preds), file = \"glm.csv\")",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Datasets</span>"
    ]
  },
  {
    "objectID": "Appendix-Datasets.html#wine",
    "href": "Appendix-Datasets.html#wine",
    "title": "Appendix A — Datasets",
    "section": "A.4 Wine",
    "text": "A.4 Wine\nThe data set is a collection of wines of different quality. The aim is to predict the quality of the wine based on physiochemical predictors.\nFor inspiration and data exploration notebooks, check out this kaggle competition. For instance, check out this very nice notebook which removes a few problems from the data.\nResponse variable: “quality”\nWe could theoretically use a regression model for this task but we will stick with a classification model.\nA minimal working example:\n\nLoad data set:\n\n\nlibrary(EcoData)\n\ndata(wine)\nsummary(wine)\n\n fixed.acidity    volatile.acidity  citric.acid     residual.sugar  \n Min.   : 4.600   Min.   :0.1200   Min.   :0.0000   Min.   : 0.900  \n 1st Qu.: 7.100   1st Qu.:0.3900   1st Qu.:0.0900   1st Qu.: 1.900  \n Median : 7.900   Median :0.5200   Median :0.2600   Median : 2.200  \n Mean   : 8.335   Mean   :0.5284   Mean   :0.2705   Mean   : 2.533  \n 3rd Qu.: 9.300   3rd Qu.:0.6400   3rd Qu.:0.4200   3rd Qu.: 2.600  \n Max.   :15.900   Max.   :1.5800   Max.   :1.0000   Max.   :15.500  \n NA's   :70       NA's   :48       NA's   :41       NA's   :60      \n   chlorides       free.sulfur.dioxide total.sulfur.dioxide    density      \n Min.   :0.01200   Min.   : 1.00       Min.   :  6.00       Min.   :0.9901  \n 1st Qu.:0.07000   1st Qu.: 7.00       1st Qu.: 22.00       1st Qu.:0.9956  \n Median :0.07900   Median :14.00       Median : 38.00       Median :0.9968  \n Mean   :0.08747   Mean   :15.83       Mean   : 46.23       Mean   :0.9968  \n 3rd Qu.:0.09000   3rd Qu.:21.00       3rd Qu.: 62.00       3rd Qu.:0.9979  \n Max.   :0.61100   Max.   :72.00       Max.   :289.00       Max.   :1.0037  \n NA's   :37        NA's   :78          NA's   :78           NA's   :78      \n       pH          sulphates         alcohol         quality     \n Min.   :2.740   Min.   :0.3300   Min.   : 8.40   Min.   :3.000  \n 1st Qu.:3.210   1st Qu.:0.5500   1st Qu.: 9.50   1st Qu.:5.000  \n Median :3.310   Median :0.6200   Median :10.20   Median :6.000  \n Mean   :3.311   Mean   :0.6572   Mean   :10.42   Mean   :5.596  \n 3rd Qu.:3.400   3rd Qu.:0.7300   3rd Qu.:11.10   3rd Qu.:6.000  \n Max.   :4.010   Max.   :2.0000   Max.   :14.90   Max.   :8.000  \n NA's   :25      NA's   :51                       NA's   :905    \n\n\n\nImpute missing values (not our response variable!).\n\n\nlibrary(missRanger)\nlibrary(dplyr)\nset.seed(123)\n\nwine_imputed = missRanger::missRanger(data = wine %&gt;% select(-quality), verbose = 0)\nwine_imputed$quality = wine$quality\n\n\nSplit into training and test set:\n\n\ntrain = wine_imputed[!is.na(wine$quality), ]\ntest = wine_imputed[is.na(wine$quality), ]\n\n\nTrain model:\n\n\nlibrary(ranger)\nset.seed(123)\n\nrf = ranger(quality~., data = train, classification = TRUE)\n\n\nPredictions:\n\n\npreds = predict(rf, data = test)$predictions\nhead(preds)\n\n[1] 6 5 5 7 6 6\n\n\n\nCreate submission csv:\n\n\nwrite.csv(data.frame(y = preds), file = \"rf.csv\")",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Datasets</span>"
    ]
  },
  {
    "objectID": "Appendix-Datasets.html#nasa",
    "href": "Appendix-Datasets.html#nasa",
    "title": "Appendix A — Datasets",
    "section": "A.5 Nasa",
    "text": "A.5 Nasa\nA collection about asteroids and their characteristics from kaggle. The aim is to predict whether the asteroids are hazardous or not. For inspiration and data exploration notebooks, check out this kaggle competition.\nResponse variable: “Hazardous”\n\nLoad data set:\n\n\nlibrary(EcoData)\n\ndata(nasa)\nsummary(nasa)\n\n Neo.Reference.ID       Name         Absolute.Magnitude Est.Dia.in.KM.min.\n Min.   :2000433   Min.   :2000433   Min.   :11.16      Min.   : 0.00101  \n 1st Qu.:3102682   1st Qu.:3102683   1st Qu.:20.10      1st Qu.: 0.03346  \n Median :3514800   Median :3514800   Median :21.90      Median : 0.11080  \n Mean   :3272675   Mean   :3273113   Mean   :22.27      Mean   : 0.20523  \n 3rd Qu.:3690987   3rd Qu.:3690385   3rd Qu.:24.50      3rd Qu.: 0.25384  \n Max.   :3781897   Max.   :3781897   Max.   :32.10      Max.   :15.57955  \n NA's   :53        NA's   :57        NA's   :36         NA's   :60        \n Est.Dia.in.KM.max. Est.Dia.in.M.min.   Est.Dia.in.M.max. \n Min.   : 0.00226   Min.   :    1.011   Min.   :    2.26  \n 1st Qu.: 0.07482   1st Qu.:   33.462   1st Qu.:   74.82  \n Median : 0.24777   Median :  110.804   Median :  247.77  \n Mean   : 0.45754   Mean   :  204.649   Mean   :  458.45  \n 3rd Qu.: 0.56760   3rd Qu.:  253.837   3rd Qu.:  567.60  \n Max.   :34.83694   Max.   :15579.552   Max.   :34836.94  \n NA's   :23         NA's   :29          NA's   :46        \n Est.Dia.in.Miles.min. Est.Dia.in.Miles.max. Est.Dia.in.Feet.min.\n Min.   :0.00063       Min.   : 0.00140      Min.   :    3.32    \n 1st Qu.:0.02079       1st Qu.: 0.04649      1st Qu.:  109.78    \n Median :0.06885       Median : 0.15395      Median :  363.53    \n Mean   :0.12734       Mean   : 0.28486      Mean   :  670.44    \n 3rd Qu.:0.15773       3rd Qu.: 0.35269      3rd Qu.:  832.80    \n Max.   :9.68068       Max.   :21.64666      Max.   :51114.02    \n NA's   :42            NA's   :50            NA's   :21          \n Est.Dia.in.Feet.max. Close.Approach.Date Epoch.Date.Close.Approach\n Min.   :     7.41    2016-07-22:  18     Min.   :7.889e+11        \n 1st Qu.:   245.49    2015-01-15:  17     1st Qu.:1.016e+12        \n Median :   812.88    2015-02-15:  16     Median :1.203e+12        \n Mean   :  1500.77    2007-11-08:  15     Mean   :1.180e+12        \n 3rd Qu.:  1862.19    2012-01-15:  15     3rd Qu.:1.356e+12        \n Max.   :114294.42    (Other)   :4577     Max.   :1.473e+12        \n NA's   :46           NA's      :  29     NA's   :43               \n Relative.Velocity.km.per.sec Relative.Velocity.km.per.hr Miles.per.hour   \n Min.   : 0.3355              Min.   :  1208              Min.   :  750.5  \n 1st Qu.: 8.4497              1st Qu.: 30399              1st Qu.:18846.7  \n Median :12.9370              Median : 46532              Median :28893.7  \n Mean   :13.9848              Mean   : 50298              Mean   :31228.0  \n 3rd Qu.:18.0774              3rd Qu.: 65068              3rd Qu.:40436.9  \n Max.   :44.6337              Max.   :160681              Max.   :99841.2  \n NA's   :27                   NA's   :28                  NA's   :38       \n Miss.Dist..Astronomical. Miss.Dist..lunar.   Miss.Dist..kilometers.\n Min.   :0.00018          Min.   :  0.06919   Min.   :   26610      \n 1st Qu.:0.13341          1st Qu.: 51.89874   1st Qu.:19964907      \n Median :0.26497          Median :103.19415   Median :39685408      \n Mean   :0.25690          Mean   : 99.91366   Mean   :38436154      \n 3rd Qu.:0.38506          3rd Qu.:149.59244   3rd Qu.:57540318      \n Max.   :0.49988          Max.   :194.45491   Max.   :74781600      \n NA's   :60               NA's   :30          NA's   :56            \n Miss.Dist..miles.  Orbiting.Body    Orbit.ID     \n Min.   :   16535   Earth:4665    Min.   :  1.00  \n 1st Qu.:12454813   NA's :  22    1st Qu.:  9.00  \n Median :24662435                 Median : 16.00  \n Mean   :23885560                 Mean   : 28.34  \n 3rd Qu.:35714721                 3rd Qu.: 31.00  \n Max.   :46467132                 Max.   :611.00  \n NA's   :27                       NA's   :33      \n        Orbit.Determination.Date Orbit.Uncertainity Minimum.Orbit.Intersection\n 2017-06-21 06:17:20:   9        Min.   :0.000      Min.   :0.00000           \n 2017-04-06 08:57:13:   8        1st Qu.:0.000      1st Qu.:0.01435           \n 2017-04-06 09:24:24:   8        Median :3.000      Median :0.04653           \n 2017-04-06 08:24:13:   7        Mean   :3.521      Mean   :0.08191           \n 2017-04-06 08:26:19:   7        3rd Qu.:6.000      3rd Qu.:0.12150           \n (Other)            :4622        Max.   :9.000      Max.   :0.47789           \n NA's               :  26        NA's   :49         NA's   :137               \n Jupiter.Tisserand.Invariant Epoch.Osculation   Eccentricity    \n Min.   :2.196               Min.   :2450164   Min.   :0.00752  \n 1st Qu.:4.047               1st Qu.:2458000   1st Qu.:0.24086  \n Median :5.071               Median :2458000   Median :0.37251  \n Mean   :5.056               Mean   :2457723   Mean   :0.38267  \n 3rd Qu.:6.017               3rd Qu.:2458000   3rd Qu.:0.51256  \n Max.   :9.025               Max.   :2458020   Max.   :0.96026  \n NA's   :56                  NA's   :60        NA's   :39       \n Semi.Major.Axis   Inclination       Asc.Node.Longitude Orbital.Period  \n Min.   :0.6159   Min.   : 0.01451   Min.   :  0.0019   Min.   : 176.6  \n 1st Qu.:1.0012   1st Qu.: 4.93290   1st Qu.: 83.1849   1st Qu.: 365.9  \n Median :1.2422   Median :10.27694   Median :172.6347   Median : 504.9  \n Mean   :1.4009   Mean   :13.36159   Mean   :172.1717   Mean   : 635.5  \n 3rd Qu.:1.6782   3rd Qu.:19.47848   3rd Qu.:254.8804   3rd Qu.: 793.1  \n Max.   :5.0720   Max.   :75.40667   Max.   :359.9059   Max.   :4172.2  \n NA's   :53       NA's   :42         NA's   :60         NA's   :46      \n Perihelion.Distance Perihelion.Arg     Aphelion.Dist    Perihelion.Time  \n Min.   :0.08074     Min.   :  0.0069   Min.   :0.8038   Min.   :2450100  \n 1st Qu.:0.63038     1st Qu.: 95.6430   1st Qu.:1.2661   1st Qu.:2457815  \n Median :0.83288     Median :189.7729   Median :1.6182   Median :2457972  \n Mean   :0.81316     Mean   :184.0185   Mean   :1.9864   Mean   :2457726  \n 3rd Qu.:0.99718     3rd Qu.:271.9535   3rd Qu.:2.4497   3rd Qu.:2458108  \n Max.   :1.29983     Max.   :359.9931   Max.   :8.9839   Max.   :2458839  \n NA's   :22          NA's   :48         NA's   :38       NA's   :59       \n  Mean.Anomaly       Mean.Motion       Equinox       Hazardous    \n Min.   :  0.0032   Min.   :0.08628   J2000:4663   Min.   :0.000  \n 1st Qu.: 87.0069   1st Qu.:0.45147   NA's :  24   1st Qu.:0.000  \n Median :186.0219   Median :0.71137                Median :0.000  \n Mean   :181.2882   Mean   :0.73732                Mean   :0.176  \n 3rd Qu.:276.6418   3rd Qu.:0.98379                3rd Qu.:0.000  \n Max.   :359.9180   Max.   :2.03900                Max.   :1.000  \n NA's   :40         NA's   :48                     NA's   :4187   \n\n\n\nImpute missing values (not our response variable!):\n\n\nlibrary(missRanger)\nlibrary(dplyr)\nset.seed(123)\n\nnasa_imputed = missRanger::missRanger(data = nasa %&gt;% select(-Hazardous),\n                                      maxiter = 1, num.trees = 5L, verbose = 0)\nnasa_imputed$Hazardous = nasa$Hazardous\n\n\nSplit into training and test set:\n\n\ntrain = nasa_imputed[!is.na(nasa$Hazardous), ]\ntest = nasa_imputed[is.na(nasa$Hazardous), ]\n\n\nTrain model:\n\n\nlibrary(ranger)\nset.seed(123)\n\nrf = ranger(Hazardous~., data = train, classification = TRUE,\n            probability = TRUE)\n\n\nPredictions:\n\n\npreds = predict(rf, data = test)$predictions[,2]\nhead(preds)\n\n[1] 0.6348055556 0.7525960317 0.0008444444 0.7733373016 0.1404333333\n[6] 0.1509190476\n\n\n\nCreate submission csv:\n\n\nwrite.csv(data.frame(y = preds), file = \"rf.csv\")",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Datasets</span>"
    ]
  },
  {
    "objectID": "Appendix-Datasets.html#flower",
    "href": "Appendix-Datasets.html#flower",
    "title": "Appendix A — Datasets",
    "section": "A.6 Flower",
    "text": "A.6 Flower\nA collection of over 4000 flower images of 5 plant species. The data set is from kaggle but we downsampled the images from \\(320*240\\) to \\(80*80\\) pixels. You can a) download the data set here or b) get it via the EcoData package.\nNotes:\n\nCheck out convolutional neural network notebooks on kaggle (they are often written in Python but you can still copy the architectures), e.g. this one.\nLast year’s winners have used a transfer learning approach (they achieved around 70% accuracy), check out this notebook, see also the section about transfer learning @ref(transfer).\n\nResponse variable: “Plant species”\n\nLoad data set:\n\n\nlibrary(tensorflow)\nlibrary(keras3)\n\ntrain = EcoData::dataset_flower()$train/255\ntest = EcoData::dataset_flower()$test/255\nlabels = EcoData::dataset_flower()$labels\n\nLet’s visualize a flower:\n\ntrain[100,,,] %&gt;%\n  image_to_array() %&gt;%\n  as.raster() %&gt;%\n  plot()\n\n\n\n\n\n\n\n\n\nBuild and train model:\n\n\nmodel = keras_model_sequential()\nmodel %&gt;% \n  layer_conv_2d(filters = 4L, kernel_size = 2L,\n                input_shape = list(80L, 80L, 3L)) %&gt;% \n  layer_max_pooling_2d() %&gt;% \n  layer_flatten() %&gt;% \n  layer_dense(units = 5L, activation = \"softmax\")\n\n### Model fitting ###\n\nmodel %&gt;% \n  compile(loss = loss_categorical_crossentropy, \n          optimizer = optimizer_adamax(learning_rate = 0.01))\n\nmodel %&gt;% \n  fit(x = train, y = keras::k_one_hot(labels, 5L))\n\n\nPredictions:\n\n\n# Prediction on training data:\npred = apply(model %&gt;% predict(train), 1, which.max)\nMetrics::accuracy(pred - 1L, labels)\ntable(pred)\n\n# Prediction for the submission server:\npred = model %&gt;% predict(test) %&gt;% apply(1, which.max) - 1L\ntable(pred)\n\n\nCreate submission csv:\n\n\nwrite.csv(data.frame(y = pred), file = \"cnn.csv\")",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Datasets</span>"
    ]
  },
  {
    "objectID": "A4-MLpipeline-mlr3.html",
    "href": "A4-MLpipeline-mlr3.html",
    "title": "Appendix B — Machine learning framework - mlr3",
    "section": "",
    "text": "B.1 mlr3\nAs we have seen today, many of the machine learning algorithms are distributed over several packages but the general machine learning pipeline is very similar for all models: feature engineering, feature selection, hyperparameter tuning and cross-validation.\nMachine learning frameworks such as mlr3 or tidymodels provide a general interface for the ML pipeline, in particular the training and the hyperparameter tuning with nested CV. They support most ML packages/algorithms.\nThe key features of mlr3 are:\nUseful links:",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Machine learning framework - mlr3</span>"
    ]
  },
  {
    "objectID": "A4-MLpipeline-mlr3.html#sec-mlr",
    "href": "A4-MLpipeline-mlr3.html#sec-mlr",
    "title": "Appendix B — Machine learning framework - mlr3",
    "section": "",
    "text": "All common machine learning packages are integrated into mlr3, you can easily switch between different machine learning algorithms.\nA common ‘language’/workflow to specify machine learning pipelines.\nSupport for different cross-validation strategies.\nHyperparameter tuning for all supported machine learning algorithms.\nEnsemble models.\n\n\n\nmlr3-book (still in work)\nmlr3 website\nmlr3 cheatsheet\n\n\nB.1.1 mlr3 - The Basic Workflow\nThe mlr3 package actually consists of several packages for different tasks (e.g. mlr3tuning for hyperparameter tuning, mlr3pipelines for data preparation pipes). But let’s start with the basic workflow:\n\nlibrary(EcoData)\nlibrary(cito)\nlibrary(tidyverse)\nlibrary(mlr3)\nlibrary(mlr3learners)\nlibrary(mlr3pipelines)\nlibrary(mlr3tuning)\nlibrary(mlr3measures)\ndata(nasa)\nstr(nasa)\n\n'data.frame':   4687 obs. of  40 variables:\n $ Neo.Reference.ID            : int  3449084 3702322 3406893 NA 2363305 3017307 2438430 3653917 3519490 2066391 ...\n $ Name                        : int  NA 3702322 3406893 3082923 2363305 3017307 2438430 3653917 3519490 NA ...\n $ Absolute.Magnitude          : num  18.7 22.1 24.8 21.6 21.4 18.2 20 21 20.9 16.5 ...\n $ Est.Dia.in.KM.min.          : num  0.4837 0.1011 0.0291 0.1272 0.1395 ...\n $ Est.Dia.in.KM.max.          : num  1.0815 0.226 0.0652 0.2845 0.3119 ...\n $ Est.Dia.in.M.min.           : num  483.7 NA 29.1 127.2 139.5 ...\n $ Est.Dia.in.M.max.           : num  1081.5 226 65.2 284.5 311.9 ...\n $ Est.Dia.in.Miles.min.       : num  0.3005 0.0628 NA 0.0791 0.0867 ...\n $ Est.Dia.in.Miles.max.       : num  0.672 0.1404 0.0405 0.1768 0.1938 ...\n $ Est.Dia.in.Feet.min.        : num  1586.9 331.5 95.6 417.4 457.7 ...\n $ Est.Dia.in.Feet.max.        : num  3548 741 214 933 1023 ...\n $ Close.Approach.Date         : Factor w/ 777 levels \"1995-01-01\",\"1995-01-08\",..: 511 712 472 239 273 145 428 694 87 732 ...\n $ Epoch.Date.Close.Approach   : num  NA 1.42e+12 1.21e+12 1.00e+12 1.03e+12 ...\n $ Relative.Velocity.km.per.sec: num  11.22 13.57 5.75 13.84 4.61 ...\n $ Relative.Velocity.km.per.hr : num  40404 48867 20718 49821 16583 ...\n $ Miles.per.hour              : num  25105 30364 12873 30957 10304 ...\n $ Miss.Dist..Astronomical.    : num  NA 0.0671 0.013 0.0583 0.0381 ...\n $ Miss.Dist..lunar.           : num  112.7 26.1 NA 22.7 14.8 ...\n $ Miss.Dist..kilometers.      : num  43348668 10030753 1949933 NA 5694558 ...\n $ Miss.Dist..miles.           : num  26935614 6232821 1211632 5418692 3538434 ...\n $ Orbiting.Body               : Factor w/ 1 level \"Earth\": 1 1 1 1 1 1 1 1 1 1 ...\n $ Orbit.ID                    : int  NA 8 12 12 91 NA 24 NA NA 212 ...\n $ Orbit.Determination.Date    : Factor w/ 2680 levels \"2014-06-13 15:20:44\",..: 69 NA 1377 1774 2275 2554 1919 731 1178 2520 ...\n $ Orbit.Uncertainity          : int  0 8 6 0 0 0 1 1 1 0 ...\n $ Minimum.Orbit.Intersection  : num  NA 0.05594 0.00553 NA 0.0281 ...\n $ Jupiter.Tisserand.Invariant : num  5.58 3.61 4.44 5.5 NA ...\n $ Epoch.Osculation            : num  2457800 2457010 NA 2458000 2458000 ...\n $ Eccentricity                : num  0.276 0.57 0.344 0.255 0.22 ...\n $ Semi.Major.Axis             : num  1.1 NA 1.52 1.11 1.24 ...\n $ Inclination                 : num  20.06 4.39 5.44 23.9 3.5 ...\n $ Asc.Node.Longitude          : num  29.85 1.42 170.68 356.18 183.34 ...\n $ Orbital.Period              : num  419 1040 682 427 503 ...\n $ Perihelion.Distance         : num  0.794 0.864 0.994 0.828 0.965 ...\n $ Perihelion.Arg              : num  41.8 359.3 350 268.2 179.2 ...\n $ Aphelion.Dist               : num  1.4 3.15 2.04 1.39 1.51 ...\n $ Perihelion.Time             : num  2457736 2456941 2457937 NA 2458070 ...\n $ Mean.Anomaly                : num  55.1 NA NA 297.4 310.5 ...\n $ Mean.Motion                 : num  0.859 0.346 0.528 0.843 0.716 ...\n $ Equinox                     : Factor w/ 1 level \"J2000\": 1 1 NA 1 1 1 1 1 1 1 ...\n $ Hazardous                   : int  0 0 0 1 1 0 0 0 1 1 ...\n\n\nLet’s drop time, name and ID variable and create a classification task:\n\ndata = nasa %&gt;% select(-Orbit.Determination.Date,\n                       -Close.Approach.Date, -Name, -Neo.Reference.ID)\ndata$Hazardous = as.factor(data$Hazardous)\n\n# Create a classification task.\ntask = TaskClassif$new(id = \"nasa\", backend = data,\n                       target = \"Hazardous\", positive = \"1\")\n\nCreate a generic pipeline of data transformation (imputation \\(\\rightarrow\\) scaling \\(\\rightarrow\\) encoding of categorical variables):\n\nset.seed(123)\n\n# Let's create the preprocessing graph.\npreprocessing = po(\"imputeoor\") %&gt;&gt;% po(\"scale\") %&gt;&gt;% po(\"encode\") \n\n# Run the task.\ntransformed_task = preprocessing$train(task)[[1]]\n\ntransformed_task$missings()\n\n                   Hazardous           Absolute.Magnitude \n                        4187                            0 \n               Aphelion.Dist           Asc.Node.Longitude \n                           0                            0 \n                Eccentricity    Epoch.Date.Close.Approach \n                           0                            0 \n            Epoch.Osculation         Est.Dia.in.Feet.max. \n                           0                            0 \n        Est.Dia.in.Feet.min.           Est.Dia.in.KM.max. \n                           0                            0 \n          Est.Dia.in.KM.min.            Est.Dia.in.M.max. \n                           0                            0 \n           Est.Dia.in.M.min.        Est.Dia.in.Miles.max. \n                           0                            0 \n       Est.Dia.in.Miles.min.                  Inclination \n                           0                            0 \n Jupiter.Tisserand.Invariant                 Mean.Anomaly \n                           0                            0 \n                 Mean.Motion               Miles.per.hour \n                           0                            0 \n  Minimum.Orbit.Intersection     Miss.Dist..Astronomical. \n                           0                            0 \n      Miss.Dist..kilometers.            Miss.Dist..lunar. \n                           0                            0 \n           Miss.Dist..miles.                     Orbit.ID \n                           0                            0 \n          Orbit.Uncertainity               Orbital.Period \n                           0                            0 \n              Perihelion.Arg          Perihelion.Distance \n                           0                            0 \n             Perihelion.Time  Relative.Velocity.km.per.hr \n                           0                            0 \nRelative.Velocity.km.per.sec              Semi.Major.Axis \n                           0                            0 \n               Equinox.J2000             Equinox..MISSING \n                           0                            0 \n         Orbiting.Body.Earth       Orbiting.Body..MISSING \n                           0                            0 \n\n\nWe can even visualize the preprocessing graph:\n\npreprocessing$plot()\n\n\n\n\n\n\n\n\nTo test our model (glmnet) with 10-fold cross-validated, we will do:\n\nSpecify the missing target rows as validation so that they will be ignored.\nSpecify the cross-validation, the learner (the machine learning model we want to use), and the measurement (AUC).\nRun (benchmark) our model.\n\n\nset.seed(123)\n\ntransformed_task$data()[1,]\n\n   Hazardous Absolute.Magnitude Aphelion.Dist Asc.Node.Longitude Eccentricity\n      &lt;fctr&gt;              &lt;num&gt;         &lt;num&gt;              &lt;num&gt;        &lt;num&gt;\n1:         0         -0.8132265    -0.3804201          -1.140837    -0.315606\n   Epoch.Date.Close.Approach Epoch.Osculation Est.Dia.in.Feet.max.\n                       &lt;num&gt;            &lt;num&gt;                &lt;num&gt;\n1:                 -4.792988        0.1402677            0.2714179\n   Est.Dia.in.Feet.min. Est.Dia.in.KM.max. Est.Dia.in.KM.min. Est.Dia.in.M.max.\n                  &lt;num&gt;              &lt;num&gt;              &lt;num&gt;             &lt;num&gt;\n1:            0.3134076          0.3007134          0.2565687         0.2710953\n   Est.Dia.in.M.min. Est.Dia.in.Miles.max. Est.Dia.in.Miles.min. Inclination\n               &lt;num&gt;                 &lt;num&gt;                 &lt;num&gt;       &lt;num&gt;\n1:         0.2916245             0.2620443              0.258651   0.5442288\n   Jupiter.Tisserand.Invariant Mean.Anomaly Mean.Motion Miles.per.hour\n                         &lt;num&gt;        &lt;num&gt;       &lt;num&gt;          &lt;num&gt;\n1:                   0.3840868    -1.028761   0.3193953     -0.2541306\n   Minimum.Orbit.Intersection Miss.Dist..Astronomical. Miss.Dist..kilometers.\n                        &lt;num&gt;                    &lt;num&gt;                  &lt;num&gt;\n1:                  -5.459119                -7.076926              0.2512296\n   Miss.Dist..lunar. Miss.Dist..miles.  Orbit.ID Orbit.Uncertainity\n               &lt;num&gt;             &lt;num&gt;     &lt;num&gt;              &lt;num&gt;\n1:         0.2398625         0.2381077 -9.651472          -1.007087\n   Orbital.Period Perihelion.Arg Perihelion.Distance Perihelion.Time\n            &lt;num&gt;          &lt;num&gt;               &lt;num&gt;           &lt;num&gt;\n1:     -0.3013135      -1.170536         -0.01831583       0.1052611\n   Relative.Velocity.km.per.hr Relative.Velocity.km.per.sec Semi.Major.Axis\n                         &lt;num&gt;                        &lt;num&gt;           &lt;num&gt;\n1:                  -0.2816782                   -0.2841407      -0.2791037\n   Equinox.J2000 Equinox..MISSING Orbiting.Body.Earth Orbiting.Body..MISSING\n           &lt;num&gt;            &lt;num&gt;               &lt;num&gt;                  &lt;num&gt;\n1:             1                0                   1                      0\n\ntransformed_task$set_row_roles((1:nrow(data))[is.na(data$Hazardous)],\n                               \"holdout\")\n\ncv10 = mlr3::rsmp(\"cv\", folds = 10L)\nEN = lrn(\"classif.glmnet\", predict_type = \"prob\")\nmeasurement =  msr(\"classif.auc\")\n\n\nresult = mlr3::resample(transformed_task,\n                        EN, resampling = cv10, store_models = TRUE)\n\n# Calculate the average AUC of the holdouts.\nresult$aggregate(measurement)\n\nVery cool! Preprocessing + 10-fold cross-validation model evaluation in a few lines of code!\nLet’s create the final predictions:\n\npred = sapply(1:10, function(i) result$learners[[i]]$predict(transformed_task,\nrow_ids = (1:nrow(data))[is.na(data$Hazardous)])$data$prob[, \"1\", drop = FALSE])\ndim(pred)\npredictions = apply(pred, 1, mean)\n\nYou could now submit the predictions here.\nBut we are still not happy with the results, let’s do some hyperparameter tuning!\n\n\nB.1.2 mlr3 - Hyperparameter Tuning\nWith mlr3, we can easily extend the above example to do hyperparameter tuning within nested cross-validation (the tuning has its own inner cross-validation).\nPrint the hyperparameter space of our glmnet learner:\n\nEN$param_set\n\n&lt;ParamSet&gt;\n\n\nWarning: Unknown argument 'on' has been passed.\n\n\nKey: &lt;id&gt;\n                      id    class lower upper nlevels\n                  &lt;char&gt;   &lt;char&gt; &lt;num&gt; &lt;num&gt;   &lt;num&gt;\n 1:                alpha ParamDbl     0     1     Inf\n 2:                  big ParamDbl  -Inf   Inf     Inf\n 3:               devmax ParamDbl     0     1     Inf\n 4:                dfmax ParamInt     0   Inf     Inf\n 5:                  eps ParamDbl     0     1     Inf\n 6:                epsnr ParamDbl     0     1     Inf\n 7:                exact ParamLgl    NA    NA       2\n 8:              exclude ParamInt     1   Inf     Inf\n 9:                 exmx ParamDbl  -Inf   Inf     Inf\n10:                 fdev ParamDbl     0     1     Inf\n11:                gamma ParamDbl  -Inf   Inf     Inf\n12:            intercept ParamLgl    NA    NA       2\n13:               lambda ParamUty    NA    NA     Inf\n14:     lambda.min.ratio ParamDbl     0     1     Inf\n15:         lower.limits ParamUty    NA    NA     Inf\n16:                maxit ParamInt     1   Inf     Inf\n17:                mnlam ParamInt     1   Inf     Inf\n18:                 mxit ParamInt     1   Inf     Inf\n19:               mxitnr ParamInt     1   Inf     Inf\n20:            newoffset ParamUty    NA    NA     Inf\n21:              nlambda ParamInt     1   Inf     Inf\n22:               offset ParamUty    NA    NA     Inf\n23:       penalty.factor ParamUty    NA    NA     Inf\n24:                 pmax ParamInt     0   Inf     Inf\n25:                 pmin ParamDbl     0     1     Inf\n26:                 prec ParamDbl  -Inf   Inf     Inf\n27:                relax ParamLgl    NA    NA       2\n28:                    s ParamDbl     0   Inf     Inf\n29:          standardize ParamLgl    NA    NA       2\n30: standardize.response ParamLgl    NA    NA       2\n31:               thresh ParamDbl     0   Inf     Inf\n32:             trace.it ParamInt     0     1       2\n33:        type.gaussian ParamFct    NA    NA       2\n34:        type.logistic ParamFct    NA    NA       2\n35:     type.multinomial ParamFct    NA    NA       2\n36:         upper.limits ParamUty    NA    NA     Inf\n                      id    class lower upper nlevels\n                                                                                      default\n                                                                                       &lt;list&gt;\n 1:                                                                                         1\n 2:                                                                                   9.9e+35\n 3:                                                                                     0.999\n 4: &lt;NoDefault&gt;\\n  Public:\\n    clone: function (deep = FALSE) \\n    initialize: function () \n 5:                                                                                     1e-06\n 6:                                                                                     1e-08\n 7:                                                                                     FALSE\n 8: &lt;NoDefault&gt;\\n  Public:\\n    clone: function (deep = FALSE) \\n    initialize: function () \n 9:                                                                                       250\n10:                                                                                     1e-05\n11:                                                                                         1\n12:                                                                                      TRUE\n13: &lt;NoDefault&gt;\\n  Public:\\n    clone: function (deep = FALSE) \\n    initialize: function () \n14: &lt;NoDefault&gt;\\n  Public:\\n    clone: function (deep = FALSE) \\n    initialize: function () \n15: &lt;NoDefault&gt;\\n  Public:\\n    clone: function (deep = FALSE) \\n    initialize: function () \n16:                                                                                    100000\n17:                                                                                         5\n18:                                                                                       100\n19:                                                                                        25\n20: &lt;NoDefault&gt;\\n  Public:\\n    clone: function (deep = FALSE) \\n    initialize: function () \n21:                                                                                       100\n22:                                                                                          \n23: &lt;NoDefault&gt;\\n  Public:\\n    clone: function (deep = FALSE) \\n    initialize: function () \n24: &lt;NoDefault&gt;\\n  Public:\\n    clone: function (deep = FALSE) \\n    initialize: function () \n25:                                                                                     1e-09\n26:                                                                                     1e-10\n27:                                                                                     FALSE\n28:                                                                                      0.01\n29:                                                                                      TRUE\n30:                                                                                     FALSE\n31:                                                                                     1e-07\n32:                                                                                         0\n33: &lt;NoDefault&gt;\\n  Public:\\n    clone: function (deep = FALSE) \\n    initialize: function () \n34: &lt;NoDefault&gt;\\n  Public:\\n    clone: function (deep = FALSE) \\n    initialize: function () \n35: &lt;NoDefault&gt;\\n  Public:\\n    clone: function (deep = FALSE) \\n    initialize: function () \n36: &lt;NoDefault&gt;\\n  Public:\\n    clone: function (deep = FALSE) \\n    initialize: function () \n                                                                                      default\n    parents  value\n     &lt;list&gt; &lt;list&gt;\n 1:               \n 2:               \n 3:               \n 4:               \n 5:               \n 6:               \n 7:               \n 8:               \n 9:               \n10:               \n11:   relax       \n12:               \n13:               \n14:               \n15:               \n16:               \n17:               \n18:               \n19:               \n20:               \n21:               \n22:               \n23:               \n24:               \n25:               \n26:               \n27:               \n28:               \n29:               \n30:               \n31:               \n32:               \n33:               \n34:               \n35:               \n36:               \n    parents  value\n\n\nDefine the hyperparameter space of the random forest:\n\nlibrary(paradox)\n\nEN_pars = \n    paradox::ParamSet$new(\n      list(paradox::ParamDbl$new(\"alpha\", lower = 0, upper = 1L),\n           paradox::ParamDbl$new(\"lambda\", lower = 0, upper = 0.5 )) )\nprint(EN_pars)\n\n&lt;ParamSet&gt;\n       id    class lower upper nlevels\n   &lt;char&gt;   &lt;char&gt; &lt;num&gt; &lt;num&gt;   &lt;num&gt;\n1:  alpha ParamDbl     0   1.0     Inf\n2: lambda ParamDbl     0   0.5     Inf\n                                                                                     default\n                                                                                      &lt;list&gt;\n1: &lt;NoDefault&gt;\\n  Public:\\n    clone: function (deep = FALSE) \\n    initialize: function () \n2: &lt;NoDefault&gt;\\n  Public:\\n    clone: function (deep = FALSE) \\n    initialize: function () \n    value\n   &lt;list&gt;\n1:       \n2:       \n\n\nTo set up the tuning pipeline we need:\n\nInner cross-validation resampling object.\nTuning criterion (e.g. AUC).\nTuning method (e.g. random or block search).\nTuning terminator (When should we stop tuning? E.g. after \\(n\\) iterations).\n\n\nset.seed(123)\n\ninner3 = mlr3::rsmp(\"cv\", folds = 3L)\nmeasurement =  msr(\"classif.auc\")\ntuner =  mlr3tuning::tnr(\"random_search\") \nterminator = mlr3tuning::trm(\"evals\", n_evals = 5L)\nEN = lrn(\"classif.glmnet\", predict_type = \"prob\")\n\nlearner_tuner = AutoTuner$new(learner = EN, \n                              measure = measurement, \n                              tuner = tuner, \n                              terminator = terminator,\n                              search_space = EN_pars,\n                              resampling = inner3)\nprint(learner_tuner)\n\n&lt;AutoTuner:classif.glmnet.tuned&gt;\n* Model: list\n* Search Space:\n&lt;ParamSet&gt;\n       id    class lower upper nlevels\n   &lt;char&gt;   &lt;char&gt; &lt;num&gt; &lt;num&gt;   &lt;num&gt;\n1:  alpha ParamDbl     0   1.0     Inf\n2: lambda ParamDbl     0   0.5     Inf\n                                                                                     default\n                                                                                      &lt;list&gt;\n1: &lt;NoDefault&gt;\\n  Public:\\n    clone: function (deep = FALSE) \\n    initialize: function () \n2: &lt;NoDefault&gt;\\n  Public:\\n    clone: function (deep = FALSE) \\n    initialize: function () \n    value\n   &lt;list&gt;\n1:       \n2:       \n* Packages: mlr3, mlr3tuning, mlr3learners, glmnet\n* Predict Type: prob\n* Feature Types: logical, integer, numeric\n* Properties: multiclass, twoclass, weights\n\n\nNow we can wrap it normally into the 10-fold cross-validated setup as done previously:\n\n# Calculate the average AUC of the holdouts.\nresult$aggregate(measurement)\n\nclassif.auc \n  0.6767554 \n\n\nLet’s create the final predictions:\n\npred = sapply(1:3, function(i) result$learners[[i]]$predict(transformed_task,\nrow_ids = (1:nrow(data))[is.na(data$Hazardous)])$data$prob[, \"1\", drop = FALSE])\ndim(pred)\npredictions = apply(pred, 1, mean)",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Machine learning framework - mlr3</span>"
    ]
  },
  {
    "objectID": "A4-MLpipeline-mlr3.html#exercises",
    "href": "A4-MLpipeline-mlr3.html#exercises",
    "title": "Appendix B — Machine learning framework - mlr3",
    "section": "B.2 Exercises",
    "text": "B.2 Exercises\n\nB.2.1 Tuning Regularization\n\n\n\n\n\n\nQuestion: Hyperparameter tuning - Titanic dataset\n\n\n\nTune architecture\n\nTune training parameters (learning rate, batch size) and regularization\n\nHints\ncito has a feature to automatically tune hyperparameters under Cross Validation!\n\npassing tune(...) to a hyperparameter will tell cito to tune this specific hyperparameter\nthe tuning = config_tuning(...) let you specify the cross-validation strategy and the number of hyperparameters that should be tested (steps = number of hyperparameter combinations that should be tried)\nafter tuning, cito will fit automatically a model with the best hyperparameters on the full data and will return this model\n\nMinimal example with the iris dataset:\n\nlibrary(cito)\ndf = iris\ndf[,1:4] = scale(df[,1:4])\n\nmodel_tuned = dnn(Species~., \n                  loss = \"softmax\",\n                  data = iris,\n                  lambda = tune(lower = 0.0, upper = 0.2), # you can pass the \"tune\" function to a hyerparameter\n                  tuning = config_tuning(CV = 3, steps = 20L)\n                  )\n\n# tuning results\nmodel_tuned$tuning\n\n\n# model_tuned is now already the best model!\n\n\nlibrary(EcoData)\nlibrary(dplyr)\nlibrary(missRanger)\ndata(titanic_ml)\ndata = titanic_ml\ndata = \n  data %&gt;% select(survived, sex, age, fare, pclass)\ndata[,-1] = missRanger(data[,-1], verbose = 0)\n\ndata_sub =\n  data %&gt;%\n    mutate(age = scales::rescale(age, c(0, 1)),\n           fare = scales::rescale(fare, c(0, 1))) %&gt;%\n    mutate(sex = as.integer(sex) - 1L,\n           pclass = as.integer(pclass - 1L))\ndata_new = data_sub[is.na(data_sub$survived),] # for which we want to make predictions at the end\ndata_obs = data_sub[!is.na(data_sub$survived),] # data with known response\n\n\nmodel = dnn(survived~., \n          hidden = c(10L, 10L), # change\n          activation = c(\"selu\", \"selu\"), # change\n          loss = \"binomial\", \n          lr = 0.05, #change\n          validation = 0.2,\n          lambda = 0.001, # change\n          alpha = 0.1, # change\n          lr_scheduler = config_lr_scheduler(\"reduce_on_plateau\", patience = 10, factor = 0.9),\n          data = data_obs, epochs = 40L, verbose = TRUE, plot= TRUE)\n\nLoss at epoch 1: training: 0.720, validation: 0.673, lr: 0.05000\n\n\n\n\n\n\n\n\n\nLoss at epoch 2: training: 0.658, validation: 0.811, lr: 0.05000\nLoss at epoch 3: training: 0.654, validation: 0.600, lr: 0.05000\nLoss at epoch 4: training: 0.647, validation: 0.824, lr: 0.05000\nLoss at epoch 5: training: 0.641, validation: 0.586, lr: 0.05000\nLoss at epoch 6: training: 0.611, validation: 0.563, lr: 0.05000\nLoss at epoch 7: training: 0.639, validation: 0.729, lr: 0.05000\nLoss at epoch 8: training: 0.618, validation: 0.565, lr: 0.05000\nLoss at epoch 9: training: 0.604, validation: 0.754, lr: 0.05000\nLoss at epoch 10: training: 0.602, validation: 0.566, lr: 0.05000\nLoss at epoch 11: training: 0.571, validation: 0.510, lr: 0.05000\nLoss at epoch 12: training: 0.593, validation: 0.529, lr: 0.05000\nLoss at epoch 13: training: 0.594, validation: 0.499, lr: 0.05000\nLoss at epoch 14: training: 0.564, validation: 0.560, lr: 0.05000\nLoss at epoch 15: training: 0.575, validation: 0.484, lr: 0.05000\nLoss at epoch 16: training: 0.559, validation: 0.503, lr: 0.05000\nLoss at epoch 17: training: 0.539, validation: 0.457, lr: 0.05000\nLoss at epoch 18: training: 0.537, validation: 0.553, lr: 0.05000\nLoss at epoch 19: training: 0.590, validation: 0.565, lr: 0.05000\nLoss at epoch 20: training: 0.592, validation: 0.549, lr: 0.05000\nLoss at epoch 21: training: 0.535, validation: 0.962, lr: 0.05000\nLoss at epoch 22: training: 0.515, validation: 0.461, lr: 0.05000\nLoss at epoch 23: training: 0.564, validation: 0.453, lr: 0.05000\nLoss at epoch 24: training: 0.514, validation: 0.416, lr: 0.05000\nLoss at epoch 25: training: 0.517, validation: 0.648, lr: 0.05000\nLoss at epoch 26: training: 0.483, validation: 0.573, lr: 0.05000\nLoss at epoch 27: training: 0.492, validation: 0.406, lr: 0.05000\nLoss at epoch 28: training: 0.501, validation: 0.458, lr: 0.05000\nLoss at epoch 29: training: 0.466, validation: 0.491, lr: 0.05000\nLoss at epoch 30: training: 0.594, validation: 0.423, lr: 0.05000\nLoss at epoch 31: training: 0.525, validation: 0.726, lr: 0.05000\nLoss at epoch 32: training: 0.482, validation: 0.397, lr: 0.05000\nLoss at epoch 33: training: 0.524, validation: 0.965, lr: 0.05000\nLoss at epoch 34: training: 0.525, validation: 0.885, lr: 0.05000\nLoss at epoch 35: training: 0.520, validation: 0.430, lr: 0.05000\nLoss at epoch 36: training: 0.546, validation: 0.577, lr: 0.05000\nLoss at epoch 37: training: 0.493, validation: 0.570, lr: 0.05000\nLoss at epoch 38: training: 0.465, validation: 1.023, lr: 0.05000\nLoss at epoch 39: training: 0.470, validation: 0.493, lr: 0.05000\nLoss at epoch 40: training: 0.482, validation: 0.392, lr: 0.05000\n\n# Predictions:\n\npredictions = predict(model, newdata = data_new, type = \"response\") # change prediction type to response so that cito predicts probabilities\n\nwrite.csv(data.frame(y = predictions[,1]), file = \"Max_titanic_dnn.csv\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nB.2.2 Bonus: mlr3\n\n\n\n\n\n\nTask: Use mlr3 for the titanic dataset\n\n\n\n\nUse mlr3 to tune glmnet for the titanic dataset using nested CV\nSubmit single predictions and multiple predictions\n\nIf you need help, take a look at the solution, go through it line by line and try to understand it.\n\n\n\n\nClick here to see the solution\n\nPrepare data\n\ndata = titanic_ml %&gt;% select(-name, -ticket, -name, -body)\ndata$pclass = as.factor(data$pclass)\ndata$sex = as.factor(data$sex)\ndata$survived = as.factor(data$survived)\n\n# Change easy things manually:\ndata$embarked[data$embarked == \"\"] = \"S\"  # Fill in \"empty\" values.\ndata$embarked = droplevels(as.factor(data$embarked)) # Remove unused levels (\"\").\ndata$cabin = (data$cabin != \"\") * 1 # Dummy code the availability of a cabin.\ndata$fare[is.na(data$fare)] = mean(data$fare, na.rm = TRUE)\nlevels(data$home.dest)[levels(data$home.dest) == \"\"] = \"unknown\"\nlevels(data$boat)[levels(data$boat) == \"\"] = \"none\"\n\n# Create a classification task.\ntask = TaskClassif$new(id = \"titanic\", backend = data,\n                       target = \"survived\", positive = \"1\")\ntask$missings()\n\n survived       age      boat     cabin  embarked      fare home.dest     parch \n      655       263         0         0         0         0         0         0 \n   pclass       sex     sibsp \n        0         0         0 \n\n# Let's create the preprocessing graph.\npreprocessing = po(\"imputeoor\") %&gt;&gt;% po(\"scale\") %&gt;&gt;% po(\"encode\") \n\n# Run the task.\ntransformed_task = preprocessing$train(task)[[1]]\n\ntransformed_task$set_row_roles((1:nrow(data))[is.na(data$survived)], \"holdout\")\n\nHyperparameter tuning:\n\ncv10 = mlr3::rsmp(\"cv\", folds = 10L)\n\ninner3 = mlr3::rsmp(\"cv\", folds = 3L)\nmeasurement =  msr(\"classif.auc\")\ntuner =  mlr3tuning::tnr(\"random_search\") \nterminator = mlr3tuning::trm(\"evals\", n_evals = 5L)\nEN = lrn(\"classif.glmnet\", predict_type = \"prob\")\nEN_pars = \n    paradox::ParamSet$new(\n      list(paradox::ParamDbl$new(\"alpha\", lower = 0, upper = 1L),\n           paradox::ParamDbl$new(\"lambda\", lower = 0, upper = 0.5 )) )\n\nlearner_tuner = AutoTuner$new(learner = EN, \n                              measure = measurement, \n                              tuner = tuner, \n                              terminator = terminator,\n                              search_space = EN_pars,\n                              resampling = inner3)\n\n\nresult = mlr3::resample(transformed_task, learner_tuner,\n                        resampling = cv10, store_models = TRUE)\n\nEvaluation:\n\nmeasurement =  msr(\"classif.auc\")\nresult$aggregate(measurement)\n\nclassif.auc \n  0.9939211 \n\n\nPredictions:\nWe can extract a learner with optimized hyperparameters:\n\nmodel = result$learners[[1]]$learner$clone()\nmodel$param_set$values\n\n$alpha\n[1] 0.1832108\n\n$lambda\n[1] 0.1246408\n\n\nAnd we can fit it then on the full data set:\n\nmodel$train(transformed_task)\npredictions = model$predict(transformed_task, row_ids = transformed_task$row_roles$holdout)\npredictions = predictions$prob[,1]\nhead(predictions)\n\n[1] 0.8555042 0.1554276 0.3219091 0.7343347 0.8628420 0.8735773\n\n\nAnd submit to http://rhsbio7.uni-regensburg.de:8500\n\nwrite.csv(data.frame(y = predictions), file = \"glmnet.csv\")",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Machine learning framework - mlr3</span>"
    ]
  }
]