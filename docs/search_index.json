[["introduction.html", "2 Introduction to Machine Learning 2.1 Supervised learning: regression and classification", " 2 Introduction to Machine Learning In this lesson, we introduce the three basic ML tasks: supervised regression and classification, and unsupervised learning. In ML, we distinguish 3 basic learning paradigms: Supervised learning Unsupervised learning Reinforcement learning We will speak about reinforcement learning at the end of the course. Now, we want to look at examples of supervised and unsupervised learning. Before you start with the code, here a video to remind you of what we talked about in the class: 2.1 Supervised learning: regression and classification Two two main subbranches of supervised learning are regression and classification. Here a video that explains again the difference 2.1.1 Supervised learning using Random Forest The random forest (RF) algorithm is possibly the most widely used ML algorithm and can be used for regression and classification. We will talk more about the algorithm on Day 2. Here an example of a regression: Visualization of the data: plot(iris, col = iris$Species) Fitting the model library(randomForest) m1 &lt;- randomForest(Sepal.Length ~ ., data = iris) m1 ## ## Call: ## randomForest(formula = Sepal.Length ~ ., data = iris) ## Type of random forest: regression ## Number of trees: 500 ## No. of variables tried at each split: 1 ## ## Mean of squared residuals: 0.138578 ## % Var explained: 79.65 str(m1) ## List of 18 ## $ call : language randomForest(formula = Sepal.Length ~ ., data = iris) ## $ type : chr &quot;regression&quot; ## $ predicted : Named num [1:150] 5.05 4.79 4.82 4.9 5.05 ... ## ..- attr(*, &quot;names&quot;)= chr [1:150] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ... ## $ mse : num [1:500] 0.279 0.248 0.206 0.209 0.19 ... ## $ rsq : num [1:500] 0.59 0.635 0.697 0.693 0.721 ... ## $ oob.times : int [1:150] 187 174 179 190 197 187 193 202 193 174 ... ## $ importance : num [1:4, 1] 9.43 36.01 24.29 18.52 ## ..- attr(*, &quot;dimnames&quot;)=List of 2 ## .. ..$ : chr [1:4] &quot;Sepal.Width&quot; &quot;Petal.Length&quot; &quot;Petal.Width&quot; &quot;Species&quot; ## .. ..$ : chr &quot;IncNodePurity&quot; ## $ importanceSD : NULL ## $ localImportance: NULL ## $ proximity : NULL ## $ ntree : num 500 ## $ mtry : num 1 ## $ forest :List of 11 ## ..$ ndbigtree : int [1:500] 25 33 45 11 47 45 55 39 59 69 ... ## ..$ nodestatus : int [1:87, 1:500] -3 -1 -3 -3 -3 -1 -1 -1 -3 -1 ... ## ..$ leftDaughter : int [1:87, 1:500] 2 0 4 6 8 0 0 0 10 0 ... ## ..$ rightDaughter: int [1:87, 1:500] 3 0 5 7 9 0 0 0 11 0 ... ## ..$ nodepred : num [1:87, 1:500] 5.83 5.01 6.27 5.81 6.64 ... ## ..$ bestvar : int [1:87, 1:500] 4 0 3 4 4 0 0 0 3 0 ... ## ..$ xbestsplit : num [1:87, 1:500] 1 0 1.55 3 3 0 0 0 1.7 0 ... ## ..$ ncat : Named int [1:4] 1 1 1 3 ## .. ..- attr(*, &quot;names&quot;)= chr [1:4] &quot;Sepal.Width&quot; &quot;Petal.Length&quot; &quot;Petal.Width&quot; &quot;Species&quot; ## ..$ nrnodes : int 87 ## ..$ ntree : num 500 ## ..$ xlevels :List of 4 ## .. ..$ Sepal.Width : num 0 ## .. ..$ Petal.Length: num 0 ## .. ..$ Petal.Width : num 0 ## .. ..$ Species : chr [1:3] &quot;setosa&quot; &quot;versicolor&quot; &quot;virginica&quot; ## $ coefs : NULL ## $ y : Named num [1:150] 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## ..- attr(*, &quot;names&quot;)= chr [1:150] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; ... ## $ test : NULL ## $ inbag : NULL ## $ terms :Classes &#39;terms&#39;, &#39;formula&#39; language Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width + Species ## .. ..- attr(*, &quot;variables&quot;)= language list(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width, Species) ## .. ..- attr(*, &quot;factors&quot;)= int [1:5, 1:4] 0 1 0 0 0 0 0 1 0 0 ... ## .. .. ..- attr(*, &quot;dimnames&quot;)=List of 2 ## .. .. .. ..$ : chr [1:5] &quot;Sepal.Length&quot; &quot;Sepal.Width&quot; &quot;Petal.Length&quot; &quot;Petal.Width&quot; ... ## .. .. .. ..$ : chr [1:4] &quot;Sepal.Width&quot; &quot;Petal.Length&quot; &quot;Petal.Width&quot; &quot;Species&quot; ## .. ..- attr(*, &quot;term.labels&quot;)= chr [1:4] &quot;Sepal.Width&quot; &quot;Petal.Length&quot; &quot;Petal.Width&quot; &quot;Species&quot; ## .. ..- attr(*, &quot;order&quot;)= int [1:4] 1 1 1 1 ## .. ..- attr(*, &quot;intercept&quot;)= num 0 ## .. ..- attr(*, &quot;response&quot;)= int 1 ## .. ..- attr(*, &quot;.Environment&quot;)=&lt;environment: R_GlobalEnv&gt; ## .. ..- attr(*, &quot;predvars&quot;)= language list(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width, Species) ## .. ..- attr(*, &quot;dataClasses&quot;)= Named chr [1:5] &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; &quot;numeric&quot; ... ## .. .. ..- attr(*, &quot;names&quot;)= chr [1:5] &quot;Sepal.Length&quot; &quot;Sepal.Width&quot; &quot;Petal.Length&quot; &quot;Petal.Width&quot; ... ## - attr(*, &quot;class&quot;)= chr [1:2] &quot;randomForest.formula&quot; &quot;randomForest&quot; m1$type ## [1] &quot;regression&quot; predict(m1) ## 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ## 5.048227 4.791602 4.821321 4.896872 5.046528 5.258342 5.051487 5.045918 4.886781 4.831721 5.069927 5.050196 4.785942 4.840265 5.136063 5.227834 5.219323 5.014908 5.121200 ## 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 ## 5.158064 5.016156 5.239965 5.078575 5.037571 5.143319 4.835697 5.158667 5.051940 4.962399 4.876937 4.858977 5.106878 5.183368 5.174308 4.856386 4.780313 4.979490 5.001454 ## 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 ## 4.830984 5.022337 5.049430 4.885854 4.827345 5.154166 5.277677 4.809647 5.155668 4.876257 5.106157 4.858944 6.362823 6.255644 6.367712 5.789459 6.135997 6.099845 6.445500 ## 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 ## 5.375279 6.068433 5.890296 5.533434 5.883066 5.471623 6.368282 5.698698 6.236297 6.100867 5.611500 5.944680 5.507799 6.527189 5.743231 6.173480 6.079231 5.930815 6.048527 ## 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 ## 6.192645 6.205715 6.055249 5.307513 5.503438 5.495045 5.610894 6.247933 6.117162 6.276979 6.441353 5.810871 5.877433 5.723043 5.970091 6.314950 5.674296 5.327069 5.782938 ## 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 ## 5.809813 5.883817 5.992149 5.356657 5.815680 6.922531 6.229740 6.714294 6.471507 6.829021 7.194308 6.217358 6.998392 6.361898 7.118721 6.528975 6.186144 6.650292 6.254084 ## 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 ## 6.507916 6.678694 6.427751 7.171490 6.778061 6.078018 6.661702 6.442837 7.015055 6.149190 6.755917 6.731781 6.263003 6.322429 6.504487 6.408359 6.861088 7.088942 6.508262 ## 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 ## 6.194025 6.275319 6.986006 6.579855 6.558599 6.331613 6.623549 6.581921 6.542212 6.243421 6.792504 6.631026 6.596481 6.047706 6.516051 6.658395 6.393134 Visualization of the results par(mfrow = c(1,2)) plot(predict(m1), iris$Sepal.Length, xlab = &quot;predicted&quot;, ylab = &quot;observed&quot;) abline(0,1) varImpPlot(m1) This is a nice visualization of the RF structure, but requires to load a package from GitHub devtools::install_github(&#39;araastat/reprtree&#39;) ## Skipping install of &#39;reprtree&#39; from a github remote, the SHA1 (5cff507b) has not changed since last install. ## Use `force = TRUE` to force installation reprtree:::plot.getTree(m1, iris) "]]
