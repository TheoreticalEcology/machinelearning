---
output: html_document
editor_options:
  chunk_output_type: console
---

# Bias-variance trade-off

## Understanding the bias-variance trade-off

::: {.webex-check .webex-box}
![](images/biasVarianceTradeoff.png)

```{r}
#| results: asis
#| echo: false
opts <- c(
   answer = "The goal of considering the bias-variance trade-off is to realize that increasing complexity typically leads to more flexibility (allowing you to reduce bias) but at the cost of uncertainty (variance) in the estimated parameters.",
   "The goal of considering the bias-variance trade-off is to get the bias of the model as small as possible."
)

cat("Which of the following statements about the bias-variance trade-off is correct? (see figure above)", longmcq(opts))
```
:::

## Optimizing the bias-variance trade-off

Optimizing the bias-variance trade-off means adjusting the complexity of the model which can be achieved by:

-   Feature selection (more features increases the flexibility of the model)

-   Regularization

### Feature selection

Adding features increases the flexibility of the model and the goodness of fit:

```{r}
library(mlbench)
library(dplyr)
data(BostonHousing)
data = BostonHousing

summary(lm(medv~rm, data = data))

summary(lm(medv~rm+dis, data = data))$r.squared

summary(lm(medv~., data = data))$r.squared

# Main effects + all potential interactions:
summary(lm(medv~.^2, data = data))$r.squared
```

The model with all features and their potential interactions has the highest $R^2$, but it also has the highest uncertainty because there are on average only 5 observations for each parameter (92 parameters and 506 observations). So how do we decide which level of complexity is appropriate for our task? For the data we use to train the model, $R^2$ will always get better with higher model complexity, so it is a poor decision criterion. We will show this in the @sec-cv section. In short, the idea is that we need to split the data so that we have an evaluation (test) dataset that wasn't used to train the model, which we can then use in turn to see if our model generalizes well to new data. 

### Regularization

Regularization means adding information or structure to a system in order to solve an ill-posed optimization problem or to prevent overfitting. There are many ways of regularizing a machine learning model. The most important distinction is between *shrinkage estimators* and estimators based on *model averaging*.

**Shrikage estimators** are based on the idea of adding a penalty to the loss function that penalizes deviations of the model parameters from a particular value (typically 0). In this way, estimates are *"shrunk"* to the specified default value. In practice, the most important penalties are the least absolute shrinkage and selection operator; also *Lasso* or *LASSO*, where the penalty is proportional to the sum of absolute deviations ($L1$ penalty), and the *Tikhonov regularization* aka *Ridge regression*, where the penalty is proportional to the sum of squared distances from the reference ($L2$ penalty). Thus, the loss function that we optimize is given by

$$
loss = fit - \lambda \cdot d
$$

where fit refers to the standard loss function, $\lambda$ is the strength of the regularization, and $d$ is the chosen metric, e.g. $L1$ or$L2$:

$$
loss_{L1} = fit - \lambda \cdot \Vert weights \Vert_1
$$

$$
loss_{L2} = fit - \lambda \cdot \Vert weights \Vert_2
$$

$\lambda$ and possibly d are typically optimized under cross-validation. $L1$ and $L2$ can be also combined what is then called *elastic net* (see @zou2005).

**Model averaging** refers to an entire set of techniques, including *boosting*, *bagging* and other averaging techniques. The general principle is that predictions are made by combining (= averaging) several models. This is based on on the insight that it is often more efficient having many simpler models and average them, than one "super model". The reasons are complicated, and explained in more detail in @dormann2018.

A particular important application of averaging is *boosting*, where the idea is that many weak learners are combined to a model average, resulting in a strong learner. Another related method is *bootstrap aggregating*, also called *bagging*. Idea here is to *boostrap* (use random sampling with replacement ) the data, and average the bootstrapped predictions.

To see how these techniques work in practice, let's first focus on LASSO and Ridge regularization for weights in neural networks. We can imagine that the LASSO and Ridge act similar to a rubber band on the weights that pulls them to zero if the data does not strongly push them away from zero. This leads to important weights, which are supported by the data, being estimated as different from zero, whereas unimportant model structures are reduced (shrunken) to zero.

LASSO $\left(penalty \propto \sum_{}^{} \mathrm{abs}(weights) \right)$ and Ridge $\left(penalty \propto \sum_{}^{} weights^{2} \right)$ have slightly different properties. They are best understood if we express those as the effective prior preference they create on the parameters:

```{r chunk_chapter4_10, echo = F}
oldpar = par(mfrow = c(1, 2))
curve(dexp(abs(x)), -5, 5, main = "LASSO prior")
curve(dnorm(abs(x)), -5, 5, main = "Ridge prior")
par(oldpar)
```

As you can see, the LASSO creates a very strong preference towards exactly zero, but falls off less strongly towards the tails. This means that parameters tend to be estimated either to exactly zero, or, if not, they are more free than the Ridge. For this reason, LASSO is often more interpreted as a model selection method.

The Ridge, on the other hand, has a certain area around zero where it is relatively indifferent about deviations from zero, thus rarely leading to exactly zero values. However, it will create a stronger shrinkage for values that deviate significantly from zero.

#### Ridge - Example

We can use the `glmnet` package for Ridge, LASSO, and elastic-net regressions.

We want to predict the house prices of Boston (see help of the dataset):

```{r}
library(mlbench)
library(dplyr)
library(glmnet)
data(BostonHousing)
data = BostonHousing
Y = data$medv
X = data %>% select(-medv, -chas) %>% scale()

hist(cor(X))
```

```{r}
m1 = glmnet(y = Y, x = X, alpha = 0)
```

The `glmnet` function automatically tries different values for lambda:

```{r}
cbind(coef(m1, s = 0.001), coef(m1, s = 100.5))
```

#### LASSO - Example

By changing $alpha$ to 1.0 we use a LASSO instead of a Ridge regression:

```{r}
m2 = glmnet(y = Y, x = X, alpha = 1.0)
cbind(coef(m2, s = 0.001), coef(m2, s = 0.5))
```

#### Elastic-net - Example

By setting $alpha$ to a value between 0 and 1.0, we use a combination of LASSO and Rdige:

```{r}
m3 = glmnet(y = Y, x = X, alpha = 0.5)
cbind(coef(m3, s = 0.001), coef(m3, s = 0.5))
```

### Hyperparameters

Generally, parameters such as $\lambda$ and $\alpha$ that, for example, control the complexity or other parameters that control their learning or the optimization are called hyperparameters. Comming back to our glmnet example:

We can plot the effect of $\lambda$ on the effect estimates:

```{r}
plot(m1)
```

So which lambda should we choose now? If we calculate the model fit for different lambdas (e.g. using the RMSE):

```{r}
lambdas = seq(0.001, 1.5, length.out = 100)
RMSEs = 
  sapply(lambdas, function(l) {
    prediction = predict(m1, newx = X, s = l)
    RMSE = Metrics::rmse(Y, prediction)
    return(RMSE)
    })
plot(lambdas, RMSEs)
```

We see that the lowest lambda achieved the highest RMSE - which is not surprising because the unconstrained model, the most complex model, has the highest fit, so no bias but probably high variance (with respect to the bias-variance tradeoff).

#### Split data into training and testing

We want a model that generalizes well to new data, which we need to "simulate" here by splitting of a holdout before the training and using the holdout then for testing our model:

```{r}
set.seed(1)
library(mlbench)
library(dplyr)
data(BostonHousing)
data = BostonHousing
Y = data$medv
X = data %>% select(-medv, -chas) %>% scale()

# Split data
indices = sample.int(nrow(X), 0.2*nrow(X))
train_X = X[indices,]
test_X = X[-indices,]
train_Y = Y[indices]
test_Y = Y[-indices]

# Train model on train data
m1 = glmnet(y = train_Y, x = train_X, alpha = 0.5)

# Test model on test data
pred = predict(m1, newx = test_X, s = 0.01)

# Calculate performance on test data
Metrics::rmse(test_Y, pred)

```

Let's do it again for different values of lambdas:

```{r}
lambdas = seq(0.0000001, 0.5, length.out = 100)
RMSEs = 
  sapply(lambdas, function(l) {
    prediction = predict(m1, newx = test_X, s = l)
    return(Metrics::rmse(test_Y, prediction))
    })
plot(lambdas, RMSEs, xlab = "Lambda", ylab = "RMSE", type = "l", las = 2)
abline(v = lambdas[which.min(RMSEs)], col = "red", lwd = 1.5)
```

Hyperparameter tuning describes the process of finding the optimal set of hyperparameters for a certain task. They are usually data specific, so they have to tuned for each dataset.

If we do only one split it could happen that we only find a set of hyperparameters that are best suited for this specific split and thus we usally do several splits so that each observation is once an observation in the test dataset, cross-validation

### Cross-validation {#sec-cv}

The `cv.glmnet` function does per default a 5xCV (so 5 splits) and in each split different values for $\lambda$ are tested 

```{r}
m1 = glmnet::cv.glmnet(x = X, y = Y, alpha = 0.5, nfolds = 5)
m1
plot(m1)
m1$lambda.min
```

So low values of $\lambda$ seem to achieve the lowest error, thus the higehst predictive performance.

This is called hyperparameter tuning.

