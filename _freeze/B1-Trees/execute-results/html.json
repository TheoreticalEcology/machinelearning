{
  "hash": "29bd2bb5e2ab93dd4998ee7c0844c785",
  "result": {
    "engine": "knitr",
    "markdown": "---\noutput: html_document\neditor_options:\n  chunk_output_type: console\n---\n\n\n\n\n# Tree-based Algorithms\n\n## Classification and Regression Trees\n\nTree-based models in general use a series of if-then rules to generate predictions from one or more decision trees. In this lecture, we will explore regression and classification trees by the example of the airquality data set. There is one important hyperparameter for regression trees: \"minsplit\".\n\n-   It controls the depth of tree (see the help of rpart for a description).\n-   It controls the complexity of the tree and can thus also be seen as a regularization parameter.\n\nWe first prepare and visualize the data and afterwards fit a decision tree.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rpart)\nlibrary(rpart.plot)\n\ndata = airquality[complete.cases(airquality),]\n```\n:::\n\n\n\n\nFit and visualize one(!) regression tree:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrt = rpart(Ozone~., data = data, control = rpart.control(minsplit = 10))\nrpart.plot(rt)\n```\n\n::: {.cell-output-display}\n![](B1-Trees_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n\n\nVisualize the predictions:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npred = predict(rt, data)\nplot(data$Temp, data$Ozone)\nlines(data$Temp[order(data$Temp)], pred[order(data$Temp)], col = \"red\")\n```\n\n::: {.cell-output-display}\n![](B1-Trees_files/figure-html/chunk_chapter4_24-1.png){width=672}\n:::\n:::\n\n\n\n\nThe angular form of the prediction line is typical for regression trees and is a weakness of it.\n\n## Random Forest\n\nTo overcome this weakness, a random forest uses an ensemble of regression/classification trees. Thus, the random forest is in principle nothing else than a normal regression/classification tree, but it uses the idea of the *\"wisdom of the crowd\"* : By asking many people (regression/classification trees) one can make a more informed decision (prediction/classification). When you want to buy a new phone for example you also wouldn't go directly into the shop, but search in the internet and ask your friends and family.\n\nThere are two randomization steps with the random forest that are responsible for their success:\n\n-   **Bootstrap samples** for each tree (we will sample observations with replacement from the data set. For the phone this is like not everyone has experience about each phone).\n-   At each split, we will **sample a subset of predictors** that is then considered as potential splitting criterion (for the phone this is like that not everyone has the same decision criteria). Annotation: While building a decision tree (random forests consist of many decision trees), one splits the data at some point according to their features. For example if you have females and males, big and small people in a crowd, you con split this crowd by gender and then by size or by size and then by gender to build a decision tree.\n\nApplying the random forest follows the same principle as for the methods before: We visualize the data (we have already done this so often for the airquality data set, thus we skip it here), fit the algorithm and then plot the outcomes.\n\nFit a random forest and visualize the predictions:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(randomForest)\nset.seed(123)\n\ndata = airquality[complete.cases(airquality),]\n\nrf = randomForest(Ozone~., data = data)\npred = predict(rf, data)\nplot(Ozone~Temp, data = data)\nlines(data$Temp[order(data$Temp)], pred[order(data$Temp)], col = \"red\")\n```\n\n::: {.cell-output-display}\n![](B1-Trees_files/figure-html/chunk_chapter4_25-1.png){width=672}\n:::\n:::\n\n\n\n\nOne advantage of random forests is that we will get an importance of variables. At each split in each tree, the improvement in the split-criterion is the importance measure attributed to the splitting variable, and is accumulated over all the trees in the forest separately for each variable. Thus the variable importance shows us how important a variable is averaged over all trees.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf$importance\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        IncNodePurity\nSolar.R      17969.59\nWind         31978.36\nTemp         34176.71\nMonth        10753.73\nDay          15436.47\n```\n\n\n:::\n:::\n\n\n\n\nThere are several important hyperparameters in a random forest that we can tune to get better results:\n\n| Hyperparameter | Explanation |\n|-----------------|-------------------------------------------------------|\n| mtry | Subset of features randomly selected in each node (from which the algorithm can select the feature that will be used to split the data). |\n| minimum node size | Minimal number of observations allowed in a node (before the branching is canceled) |\n| max depth | Maximum number of tree depth |\n\n## Boosted Regression Trees\n\nRandom forests fit hundreds of trees independent of each other. Here, the idea of a boosted regression tree comes in. Maybe we could learn from the errors the previous weak learners made and thus enhance the performance of the algorithm.\n\nA boosted regression tree (BRT) starts with a simple regression tree (weak learner) and then sequentially fits additional trees to improve the results. There are two different strategies to do so:\n\n-   *AdaBoost*: Wrong classified observations (by the previous tree) will get a higher weight and therefore the next trees will focus on difficult/missclassified observations.\n-   *Gradient boosting* (state of the art): Each sequential model will be fit on the residual errors of the previous model (strongly simplified, the actual algorithm is very complex).\n\nWe can fit a boosted regression tree using xgboost, but before we have to transform the data into a xgb.Dmatrix (which is a xgboost specific data type, the package sadly doesn't support R matrices or data.frames).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(xgboost)\nset.seed(123)\n\ndata = airquality[complete.cases(airquality),]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_xg = xgb.DMatrix(data = as.matrix(scale(data[,-1])), label = data$Ozone)\nbrt = xgboost(data_xg, nrounds = 16L)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]\ttrain-rmse:39.724624 \n[2]\ttrain-rmse:30.225761 \n[3]\ttrain-rmse:23.134840 \n[4]\ttrain-rmse:17.899179 \n[5]\ttrain-rmse:14.097785 \n[6]\ttrain-rmse:11.375457 \n[7]\ttrain-rmse:9.391276 \n[8]\ttrain-rmse:7.889690 \n[9]\ttrain-rmse:6.646586 \n[10]\ttrain-rmse:5.804859 \n[11]\ttrain-rmse:5.128437 \n[12]\ttrain-rmse:4.456416 \n[13]\ttrain-rmse:4.069464 \n[14]\ttrain-rmse:3.674615 \n[15]\ttrain-rmse:3.424578 \n[16]\ttrain-rmse:3.191301 \n```\n\n\n:::\n:::\n\n\n\n\nThe parameter \"nrounds\" controls how many sequential trees we fit, in our example this was 16. When we predict on new data, we can limit the number of trees used to prevent overfitting (remember: each new tree tries to improve the predictions of the previous trees).\n\nLet us visualize the predictions for different numbers of trees:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noldpar = par(mfrow = c(2, 2))\nfor(i in 1:4){\n  pred = predict(brt, newdata = data_xg, ntreelimit = i)\n  plot(data$Temp, data$Ozone, main = i)\n  lines(data$Temp[order(data$Temp)], pred[order(data$Temp)], col = \"red\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[11:43:13] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[11:43:13] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[11:43:13] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[11:43:14] WARNING: src/c_api/c_api.cc:935: `ntree_limit` is deprecated, use `iteration_range` instead.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](B1-Trees_files/figure-html/chunk_chapter4_29__BRT2-1.png){width=672}\n:::\n\n```{.r .cell-code}\npar(oldpar)\n```\n:::\n\n\n\n\nThere are also other ways to control for complexity of the boosted regression tree algorithm:\n\n-   max_depth: Maximum depth of each tree.\n-   shrinkage (each tree will get a weight and the weight will decrease with the number of trees).\n\nWhen having specified the final model, we can obtain the importance of the variables like for random forests:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxgboost::xgb.importance(model = brt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Feature        Gain     Cover  Frequency\n    <char>       <num>     <num>      <num>\n1:    Temp 0.570072012 0.2958229 0.24836601\n2:    Wind 0.348230653 0.3419576 0.24183007\n3: Solar.R 0.058795502 0.1571072 0.30718954\n4:     Day 0.019529985 0.1779925 0.16993464\n5:   Month 0.003371847 0.0271197 0.03267974\n```\n\n\n:::\n\n```{.r .cell-code}\nsqrt(mean((data$Ozone - pred)^2)) # RMSE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 17.89918\n```\n\n\n:::\n\n```{.r .cell-code}\ndata_xg = xgb.DMatrix(data = as.matrix(scale(data[,-1])), label = data$Ozone)\n```\n:::\n\n\n\n\nOne important strength of xgboost is that we can directly do a cross-validation (which is independent of the boosted regression tree itself!) and specify its properties with the parameter \"n-fold\":\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\n\nbrt = xgboost(data_xg, nrounds = 5L)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]\ttrain-rmse:39.724624 \n[2]\ttrain-rmse:30.225761 \n[3]\ttrain-rmse:23.134840 \n[4]\ttrain-rmse:17.899179 \n[5]\ttrain-rmse:14.097785 \n```\n\n\n:::\n\n```{.r .cell-code}\nbrt_cv = xgboost::xgb.cv(data = data_xg, nfold = 3L,\n                         nrounds = 3L, nthreads = 4L)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]\ttrain-rmse:39.895106+2.127355\ttest-rmse:40.685477+5.745327 \n[2]\ttrain-rmse:30.367660+1.728788\ttest-rmse:32.255812+5.572963 \n[3]\ttrain-rmse:23.446237+1.366757\ttest-rmse:27.282435+5.746244 \n```\n\n\n:::\n\n```{.r .cell-code}\nprint(brt_cv)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n##### xgb.cv 3-folds\n  iter train_rmse_mean train_rmse_std test_rmse_mean test_rmse_std\n <num>           <num>          <num>          <num>         <num>\n     1        39.89511       2.127355       40.68548      5.745327\n     2        30.36766       1.728788       32.25581      5.572963\n     3        23.44624       1.366757       27.28244      5.746244\n```\n\n\n:::\n:::\n\n\n\n\nAnnotation: The original data set is randomly partitioned into $n$ equal sized subsamples. Each time, the model is trained on $n - 1$ subsets (training set) and tested on the left out set (test set) to judge the performance.\n\nIf we do three-folded cross-validation, we actually fit three different boosted regression tree models (xgboost models) on $\\approx 67\\%$ of the data points. Afterwards, we judge the performance on the respective holdout. This now tells us how well the model performed.\n\nImportant hyperparameters:\n\n| Hyperparameter | Explanation |\n|------------------|------------------------------------------------------|\n| eta | learning rate (weighting of the sequential trees) |\n| max depth | maximal depth in the trees (small = low complexity, large = high complexity) |\n| subsample | subsample ratio of the data (bootstrap ratio) |\n| lambda | regularization strength of the individual trees |\n| max tree | maximal number of trees in the ensemble |\n\n## Exercise - Trees\n\n::: callout-warning\n#### Question: Regression Trees\n\nWe will use the following code snippet to understand the hyperparameter mincut and thus the predictive performance.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tree)\nset.seed(123)\n\ndata = airquality\nrt = tree(Ozone~., data = data,\n          control = tree.control(mincut = 1L, nobs = nrow(data)))\n\nplot(rt)\ntext(rt)\npred = predict(rt, data)\nplot(data$Temp, data$Ozone)\nlines(data$Temp[order(data$Temp)], pred[order(data$Temp)], col = \"red\")\nsqrt(mean((data$Ozone - pred)^2)) # RMSE\n```\n:::\n\n\n\n\nTry different mincut parameters and see what happens. (Compare the root mean squared error for different mincut parameters and explain what you see. Compare predictions for different mincut parameters and explain what happens.) What was wrong in the snippet above?\n:::\n\n\n<div class='webex-solution'><button>Click here to see the solution</button>\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tree)\nset.seed(123)\n\ndata = airquality[complete.cases(airquality),]\n\ndoTask = function(mincut){\n  rt = tree(Ozone~., data = data,\n            control = tree.control(mincut = mincut, nobs = nrow(data)))\n\n  pred = predict(rt, data)\n  plot(data$Temp, data$Ozone,\n       main = paste0(\n         \"mincut: \", mincut,\n         \"\\nRMSE: \", round(sqrt(mean((data$Ozone - pred)^2)), 2)\n      )\n  )\n  lines(data$Temp[order(data$Temp)], pred[order(data$Temp)], col = \"red\")\n}\n\nfor(i in c(1, 2, 3, 5, 10, 15, 25, 50, 54, 55, 56, 57, 75, 100)){ doTask(i) }\n```\n\n::: {.cell-output-display}\n![](B1-Trees_files/figure-html/chunk_chapter4_task_22-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](B1-Trees_files/figure-html/chunk_chapter4_task_22-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](B1-Trees_files/figure-html/chunk_chapter4_task_22-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](B1-Trees_files/figure-html/chunk_chapter4_task_22-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](B1-Trees_files/figure-html/chunk_chapter4_task_22-5.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](B1-Trees_files/figure-html/chunk_chapter4_task_22-6.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](B1-Trees_files/figure-html/chunk_chapter4_task_22-7.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](B1-Trees_files/figure-html/chunk_chapter4_task_22-8.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](B1-Trees_files/figure-html/chunk_chapter4_task_22-9.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](B1-Trees_files/figure-html/chunk_chapter4_task_22-10.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](B1-Trees_files/figure-html/chunk_chapter4_task_22-11.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](B1-Trees_files/figure-html/chunk_chapter4_task_22-12.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](B1-Trees_files/figure-html/chunk_chapter4_task_22-13.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](B1-Trees_files/figure-html/chunk_chapter4_task_22-14.png){width=672}\n:::\n:::\n\n\n\n\nApproximately at mincut = 15, prediction is the best (mind overfitting). After mincut = 56, the prediction has no information at all and the RMSE stays constant.\n\nMind the complete cases of the airquality data set, that was the error. \n</div>\n\n\n::: callout-warning\n#### Question: Random forest\n\nWe will use the following code snippet to explore a random forest:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(randomForest)\nset.seed(123)\n\ndata = airquality[complete.cases(airquality),]\n\nrf = randomForest(Ozone~., data = data)\n\npred = predict(rf, data)\nimportance(rf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        IncNodePurity\nSolar.R      17969.59\nWind         31978.36\nTemp         34176.71\nMonth        10753.73\nDay          15436.47\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"RMSE: \", sqrt(mean((data$Ozone - pred)^2)), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRMSE:  9.507848 \n```\n\n\n:::\n\n```{.r .cell-code}\nplot(data$Temp, data$Ozone)\nlines(data$Temp[order(data$Temp)], pred[order(data$Temp)], col = \"red\")\n```\n\n::: {.cell-output-display}\n![](B1-Trees_files/figure-html/chunk_chapter4_task_23-1.png){width=672}\n:::\n:::\n\n\n\n\nTry different values for the nodesize describe how the predictions depend on this parameter.\n:::\n\n\n<div class='webex-solution'><button>Click here to see the solution</button>\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(randomForest)\nset.seed(123)\n\ndata = airquality[complete.cases(airquality),]\n\n\nfor(nodesize in c(1, 15, 50, 100)){\n  for(mtry in c(1, 3, 5)){\n    rf = randomForest(Ozone~., data = data, nodesize = nodesize)\n    \n    pred = predict(rf, data)\n    \n    plot(data$Temp, data$Ozone, main = paste0(\n        \"    nodesize: \", nodesize,\n        \"\\nRMSE: \", round(sqrt(mean((data$Ozone - pred)^2)), 2)\n      )\n    )\n    lines(data$Temp[order(data$Temp)], pred[order(data$Temp)], col = \"red\")\n  }\n}\n```\n\n::: {.cell-output-display}\n![](B1-Trees_files/figure-html/chunk_chapter4_task_24-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](B1-Trees_files/figure-html/chunk_chapter4_task_24-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](B1-Trees_files/figure-html/chunk_chapter4_task_24-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](B1-Trees_files/figure-html/chunk_chapter4_task_24-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](B1-Trees_files/figure-html/chunk_chapter4_task_24-5.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](B1-Trees_files/figure-html/chunk_chapter4_task_24-6.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](B1-Trees_files/figure-html/chunk_chapter4_task_24-7.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](B1-Trees_files/figure-html/chunk_chapter4_task_24-8.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](B1-Trees_files/figure-html/chunk_chapter4_task_24-9.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](B1-Trees_files/figure-html/chunk_chapter4_task_24-10.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](B1-Trees_files/figure-html/chunk_chapter4_task_24-11.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](B1-Trees_files/figure-html/chunk_chapter4_task_24-12.png){width=672}\n:::\n:::\n\n\n\n\nNodesize affects the complexity. In other words: The bigger the nodesize, the smaller the trees and the more bias/less variance.\n\n\n</div>\n\n\n::: callout-warning\n#### Question: Boosted regression trees\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(xgboost)\nlibrary(animation)\nset.seed(123)\n\nx1 = seq(-3, 3, length.out = 100)\nx2 = seq(-3, 3, length.out = 100)\nx = expand.grid(x1, x2)\ny = apply(x, 1, function(t) exp(-t[1]^2 - t[2]^2))\n\n\nimage(matrix(y, 100, 100), main = \"Original image\", axes = FALSE, las = 2)\naxis(1, at = seq(0, 1, length.out = 10),\n     labels = round(seq(-3, 3, length.out = 10), 1))\naxis(2, at = seq(0, 1, length.out = 10),\n     labels = round(seq(-3, 3, length.out = 10), 1), las = 2)\n\n\nmodel = xgboost::xgboost(xgb.DMatrix(data = as.matrix(x), label = y),\n                         nrounds = 500L, verbose = 0L)\npred = predict(model, newdata = xgb.DMatrix(data = as.matrix(x)),\n               ntreelimit = 10L)\n\nsaveGIF(\n  {\n    for(i in c(1, 2, 4, 8, 12, 20, 40, 80, 200)){\n      pred = predict(model, newdata = xgb.DMatrix(data = as.matrix(x)),\n                     ntreelimit = i)\n      image(matrix(pred, 100, 100), main = paste0(\"Trees: \", i),\n            axes = FALSE, las = 2)\n      axis(1, at = seq(0, 1, length.out = 10),\n           labels = round(seq(-3, 3, length.out = 10), 1))\n      axis(2, at = seq(0, 1, length.out = 10),\n           labels = round(seq(-3, 3, length.out = 10), 1), las = 2)\n    }\n  },\n  movie.name = \"boosting.gif\", autobrowse = FALSE\n)\n```\n:::\n\n\n\n\n![](./images/boosting.gif){width=\"370\"}\n\nRun the code above and play with different values for **max_depth** and describe what you see!\n\nTip: have a look at the boosting.gif.\n:::\n\n\n<div class='webex-solution'><button>Click here to see the solution</button>\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(xgboost)\nlibrary(animation)\nset.seed(123)\n\nx1 = seq(-3, 3, length.out = 100)\nx2 = seq(-3, 3, length.out = 100)\nx = expand.grid(x1, x2)\ny = apply(x, 1, function(t) exp(-t[1]^2 - t[2]^2))\n\nimage(matrix(y, 100, 100), main = \"Original image\", axes = FALSE, las = 2)\naxis(1, at = seq(0, 1, length.out = 10),\n     labels = round(seq(-3, 3, length.out = 10), 1))\naxis(2, at = seq(0, 1, length.out = 10),\n     labels = round(seq(-3, 3, length.out = 10), 1), las = 2)\n\nfor(max_depth in c(3, 6, 10, 20)){\n  model = xgboost::xgboost(xgb.DMatrix(data = as.matrix(x), label = y),\n                           max_depth = max_depth,\n                           nrounds = 500, verbose = 0L)\n\n  saveGIF(\n    {\n      for(i in c(1, 2, 4, 8, 12, 20, 40, 80, 200)){\n        pred = predict(model, newdata = xgb.DMatrix(data = as.matrix(x)),\n                       ntreelimit = i)\n        image(matrix(pred, 100, 100),\n              main = paste0(\"eta: \", eta,\n                            \"    max_depth: \", max_depth,\n                            \"    Trees: \", i),\n              axes = FALSE, las = 2)\n        axis(1, at = seq(0, 1, length.out = 10),\n             labels = round(seq(-3, 3, length.out = 10), 1))\n        axis(2, at = seq(0, 1, length.out = 10),\n             labels = round(seq(-3, 3, length.out = 10), 1), las = 2)\n      }\n    },\n    movie.name = paste0(\"boosting_\", max_depth, \"_\", eta, \".gif\"),\n    autobrowse = FALSE\n  )\n}\n```\n:::\n\n\n\n\nWe see that for high values of max_depth, the predictions \"smooth out\" faster. On the other hand, with a low max_depth (low complexity of the individual trees), more trees are required in the ensemble to achieve a smooth prediction surface.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?xgboost::xgboost\n```\n:::\n\n\n\n\nJust some examples:\n\n-   ![](./images/boosting_3_0.1.gif){width=\"370\"}\n-   ![](./images/boosting_6_0.7.gif){width=\"370\"}\n-   ![](./images/boosting_20_0.9.gif){width=\"370\"}\n\n\n</div>\n\n\n:::: callout-warning\n#### Question: Hyperparameter tuning of random forest\n\n| Hyperparameter | Explanation |\n|-----------------|-------------------------------------------------------|\n| mtry | Subset of features randomly selected in each node (from which the algorithm can select the feature that will be used to split the data). |\n| minimum node size | Minimal number of observations allowed in a node (before the branching is canceled) |\n| max depth | Maximum number of tree depth |\n\nCombing back to the titanic dataset from the morning, we want to optimize min node size in our RF using a simple CV.\n\nPrepare the data:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(EcoData)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:xgboost':\n\n    slice\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:randomForest':\n\n    combine\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(missRanger)\ndata(titanic_ml)\ndata = titanic_ml\ndata = \n  data %>% select(survived, sex, age, fare, pclass)\ndata[,-1] = missRanger(data[,-1], verbose = 0)\n\ndata_sub =\n  data %>%\n    mutate(age = scales::rescale(age, c(0, 1)),\n           fare = scales::rescale(fare, c(0, 1))) %>%\n    mutate(sex = as.integer(sex) - 1L,\n           pclass = as.integer(pclass - 1L))\ndata_new = data_sub[is.na(data_sub$survived),] # for which we want to make predictions at the end\ndata_obs = data_sub[!is.na(data_sub$survived),] # data with known response\ndata_sub$survived = as.factor(data_sub$survived)\ndata_obs$survived = as.factor(data_obs$survived)\n```\n:::\n\n\n\n\n**Hints:**\n\n-   adjust the '`type`' argument in the `predict(…)` method (the default is to predict classes)\n-   when predicting probabilities, the randomForest will return a matrix, a column for each class, we are interested in the probability of surviving (so the second column)\n\n**Bonus:**\n\n-   tune min node size (and mtry)\n-   use more features\n\n::: {.callout-tip collapse=\"true\" appearance=\"minimal\"}\n## Code template\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ranger)\ndata_obs = data_sub[!is.na(data_sub$survived),] \nset.seed(42)\n\ncv = 3\nhyper_minnodesize = ...\n\ntuning_results =\n    sapply(1:length(hyper_minnodesize), function(k) {\n        auc_inner = NULL\n        for(j in 1:cv) {\n          inner_split = as.integer(cut(1:nrow(data_obs), breaks = cv))\n          train_inner = data_obs[inner_split != j, ]\n          test_inner = data_obs[inner_split == j, ]\n          \n          model = ranger(survived~.,data = train_inner, min.node.size = hyper_minnodesize[k], probability = TRUE)\n          predictions = predict(model, test_inner)$predictions[,2]\n          \n          auc_inner[j]= Metrics::auc(test_inner$survived, predictions)\n        }\n      return(mean(auc_inner))\n    })\n\nresults = data.frame(minnodesize = hyper_minnodesize, AUC = tuning_results)\n\nprint(results)\n```\n:::\n\n\n\n:::\n::::\n\n\n<div class='webex-solution'><button>Click here to see the solution</button>\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ranger)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'ranger'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:randomForest':\n\n    importance\n```\n\n\n:::\n\n```{.r .cell-code}\ndata_obs = data_sub[!is.na(data_sub$survived),] \nset.seed(42)\n\ncv = 3\nhyper_minnodesize = sample(300, 20)\n\ntuning_results =\n    sapply(1:length(hyper_minnodesize), function(k) {\n        auc_inner = NULL\n        for(j in 1:cv) {\n          inner_split = as.integer(cut(1:nrow(data_obs), breaks = cv))\n          train_inner = data_obs[inner_split != j, ]\n          test_inner = data_obs[inner_split == j, ]\n          model = ranger(survived~.,data = train_inner, min.node.size = hyper_minnodesize[k], probability = TRUE)\n          predictions = predict(model, test_inner)$predictions[,2]\n          \n          auc_inner[j]= Metrics::auc(test_inner$survived, predictions)\n        }\n      return(mean(auc_inner))\n    })\n\nresults = data.frame(minnodesize = hyper_minnodesize, AUC = tuning_results)\n\nprint(results)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   minnodesize       AUC\n1           49 0.8272006\n2          153 0.8191819\n3           74 0.8201019\n4          228 0.8142277\n5          146 0.8177973\n6          122 0.8193057\n7          300 0.8084753\n8          128 0.8214541\n9           24 0.8312464\n10          89 0.8212586\n11         165 0.8174452\n12         110 0.8201894\n13          20 0.8296517\n14         291 0.8090517\n15         283 0.8108152\n16         109 0.8217839\n17           5 0.8302420\n18         212 0.8132403\n19         259 0.8119411\n20         292 0.8083235\n```\n\n\n:::\n:::\n\n\n\n\nMake predictions:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel = ranger(survived~.,data = data_obs, min.node.size = results[which.max(results$AUC),1], probability = TRUE)\n\nwrite.csv(data.frame(y = predict(model, data_new)$predictions[,1]), file = \"Max_titanic_rf.csv\")\n```\n:::\n\n\n\n\n\n</div>\n\n\n:::: callout-warning\n#### Question: Hyperparameter tuning of boosted regression trees\n\nImportant hyperparameters:\n\n| Hyperparameter | Explanation |\n|------------------|------------------------------------------------------|\n| eta | learning rate (weighting of the sequential trees) |\n| max depth | maximal depth in the trees (small = low complexity, large = high complexity) |\n| subsample | subsample ratio of the data (bootstrap ratio) |\n| lambda | regularization strength of the individual trees |\n| max tree | maximal number of trees in the ensemble |\n\nCombing back to the titanic dataset from the morning, we want to optimize max depth and the eta parameter in xgboost.\n\nPrepare the data:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(EcoData)\nlibrary(dplyr)\nlibrary(missRanger)\ndata(titanic_ml)\ndata = titanic_ml\ndata = \n  data %>% select(survived, sex, age, fare, pclass)\ndata[,-1] = missRanger(data[,-1], verbose = 0)\n\ndata_sub =\n  data %>%\n    mutate(age = scales::rescale(age, c(0, 1)),\n           fare = scales::rescale(fare, c(0, 1))) %>%\n    mutate(sex = as.integer(sex) - 1L,\n           pclass = as.integer(pclass - 1L))\ndata_new = data_sub[is.na(data_sub$survived),] # for which we want to make predictions at the end\ndata_obs = data_sub[!is.na(data_sub$survived),] # data with known response\n```\n:::\n\n\n\n\n::: {.callout-tip collapse=\"true\" appearance=\"minimal\"}\n## Code template\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(xgboost)\nset.seed(42)\ndata_obs = data_sub[!is.na(data_sub$survived),] \ncv = 3\n\nouter_split = as.integer(cut(1:nrow(data_obs), breaks = cv))\n\n# sample minnodesize values (must be integers)\nhyper_depth = ...\nhyper_eta = ...\n\ntuning_results =\n    sapply(1:length(hyper_minnodesize), function(k) {\n        auc_inner = NULL\n        for(j in 1:cv) {\n          inner_split = as.integer(cut(1:nrow(data_obs), breaks = cv))\n          train_inner = data_obs[inner_split != j, ]\n          test_inner = data_obs[inner_split == j, ]\n          \n          data_xg = xgb.DMatrix(data = as.matrix(train_inner[,-1]), label = train_inner$survived)\n          \n          model = xgboost(data_xg, nrounds = 16L, eta = hyper_eta[k], max_depth = hyper_depth[k], objective = \"reg:logistic\")\n          predictions = predict(model, newdata = as.matrix(test_inner)[,-1])\n          \n          auc_inner[j]= Metrics::auc(test_inner$survived, predictions)\n        }\n      return(mean(auc_inner))\n    })\n\nresults = data.frame(depth = hyper_depth, eta = hyper_eta, AUC = tuning_results)\n\nprint(results)\n```\n:::\n\n\n\n:::\n::::\n\n\n<div class='webex-solution'><button>Click here to see the solution</button>\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(xgboost)\nset.seed(42)\ndata_obs = data_sub[!is.na(data_sub$survived),] \ncv = 3\n\nouter_split = as.integer(cut(1:nrow(data_obs), breaks = cv))\n\n# sample minnodesize values (must be integers)\nhyper_depth = sample(200, 20)\nhyper_eta = runif(20, 0, 1)\n\n\ntuning_results =\n    sapply(1:length(hyper_minnodesize), function(k) {\n        auc_inner = NULL\n        for(j in 1:cv) {\n          inner_split = as.integer(cut(1:nrow(data_obs), breaks = cv))\n          train_inner = data_obs[inner_split != j, ]\n          test_inner = data_obs[inner_split == j, ]\n          \n          data_xg = xgb.DMatrix(data = as.matrix(train_inner[,-1]), label = train_inner$survived)\n          \n          model = xgboost(data_xg, nrounds = 16L, eta = hyper_eta[k], max_depth = hyper_depth[k], objective = \"reg:logistic\")\n          predictions = predict(model, newdata = as.matrix(test_inner)[,-1])\n          \n          auc_inner[j]= Metrics::auc(test_inner$survived, predictions)\n        }\n      return(mean(auc_inner))\n    })\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]\ttrain-rmse:0.342302 \n[2]\ttrain-rmse:0.296557 \n[3]\ttrain-rmse:0.263769 \n[4]\ttrain-rmse:0.241327 \n[5]\ttrain-rmse:0.217183 \n[6]\ttrain-rmse:0.201909 \n[7]\ttrain-rmse:0.189654 \n[8]\ttrain-rmse:0.183617 \n[9]\ttrain-rmse:0.173235 \n[10]\ttrain-rmse:0.166394 \n[11]\ttrain-rmse:0.161046 \n[12]\ttrain-rmse:0.155769 \n[13]\ttrain-rmse:0.151022 \n[14]\ttrain-rmse:0.147104 \n[15]\ttrain-rmse:0.144162 \n[16]\ttrain-rmse:0.140758 \n[1]\ttrain-rmse:0.354493 \n[2]\ttrain-rmse:0.305145 \n[3]\ttrain-rmse:0.275617 \n[4]\ttrain-rmse:0.256898 \n[5]\ttrain-rmse:0.236243 \n[6]\ttrain-rmse:0.225320 \n[7]\ttrain-rmse:0.216780 \n[8]\ttrain-rmse:0.206392 \n[9]\ttrain-rmse:0.200376 \n[10]\ttrain-rmse:0.192735 \n[11]\ttrain-rmse:0.185090 \n[12]\ttrain-rmse:0.179520 \n[13]\ttrain-rmse:0.173707 \n[14]\ttrain-rmse:0.171483 \n[15]\ttrain-rmse:0.167530 \n[16]\ttrain-rmse:0.164484 \n[1]\ttrain-rmse:0.353920 \n[2]\ttrain-rmse:0.315997 \n[3]\ttrain-rmse:0.290410 \n[4]\ttrain-rmse:0.263742 \n[5]\ttrain-rmse:0.247020 \n[6]\ttrain-rmse:0.229175 \n[7]\ttrain-rmse:0.214455 \n[8]\ttrain-rmse:0.199326 \n[9]\ttrain-rmse:0.194674 \n[10]\ttrain-rmse:0.184985 \n[11]\ttrain-rmse:0.180155 \n[12]\ttrain-rmse:0.174841 \n[13]\ttrain-rmse:0.170210 \n[14]\ttrain-rmse:0.165885 \n[15]\ttrain-rmse:0.162765 \n[16]\ttrain-rmse:0.157283 \n[1]\ttrain-rmse:0.344811 \n[2]\ttrain-rmse:0.300368 \n[3]\ttrain-rmse:0.266761 \n[4]\ttrain-rmse:0.237761 \n[5]\ttrain-rmse:0.220317 \n[6]\ttrain-rmse:0.207316 \n[7]\ttrain-rmse:0.198329 \n[8]\ttrain-rmse:0.188430 \n[9]\ttrain-rmse:0.183203 \n[10]\ttrain-rmse:0.176577 \n[11]\ttrain-rmse:0.169758 \n[12]\ttrain-rmse:0.163186 \n[13]\ttrain-rmse:0.157300 \n[14]\ttrain-rmse:0.153470 \n[15]\ttrain-rmse:0.147181 \n[16]\ttrain-rmse:0.144844 \n[1]\ttrain-rmse:0.356759 \n[2]\ttrain-rmse:0.304838 \n[3]\ttrain-rmse:0.274020 \n[4]\ttrain-rmse:0.255291 \n[5]\ttrain-rmse:0.243225 \n[6]\ttrain-rmse:0.229671 \n[7]\ttrain-rmse:0.219460 \n[8]\ttrain-rmse:0.206061 \n[9]\ttrain-rmse:0.197987 \n[10]\ttrain-rmse:0.188549 \n[11]\ttrain-rmse:0.182957 \n[12]\ttrain-rmse:0.177919 \n[13]\ttrain-rmse:0.175019 \n[14]\ttrain-rmse:0.170526 \n[15]\ttrain-rmse:0.166915 \n[16]\ttrain-rmse:0.162403 \n[1]\ttrain-rmse:0.356097 \n[2]\ttrain-rmse:0.317622 \n[3]\ttrain-rmse:0.292497 \n[4]\ttrain-rmse:0.273470 \n[5]\ttrain-rmse:0.254577 \n[6]\ttrain-rmse:0.240930 \n[7]\ttrain-rmse:0.231185 \n[8]\ttrain-rmse:0.216655 \n[9]\ttrain-rmse:0.206242 \n[10]\ttrain-rmse:0.197043 \n[11]\ttrain-rmse:0.189754 \n[12]\ttrain-rmse:0.181673 \n[13]\ttrain-rmse:0.176834 \n[14]\ttrain-rmse:0.171924 \n[15]\ttrain-rmse:0.167137 \n[16]\ttrain-rmse:0.162462 \n[1]\ttrain-rmse:0.479481 \n[2]\ttrain-rmse:0.461296 \n[3]\ttrain-rmse:0.444451 \n[4]\ttrain-rmse:0.429059 \n[5]\ttrain-rmse:0.415414 \n[6]\ttrain-rmse:0.402186 \n[7]\ttrain-rmse:0.390414 \n[8]\ttrain-rmse:0.379435 \n[9]\ttrain-rmse:0.369452 \n[10]\ttrain-rmse:0.360190 \n[11]\ttrain-rmse:0.351835 \n[12]\ttrain-rmse:0.344269 \n[13]\ttrain-rmse:0.336940 \n[14]\ttrain-rmse:0.330170 \n[15]\ttrain-rmse:0.324636 \n[16]\ttrain-rmse:0.319224 \n[1]\ttrain-rmse:0.480872 \n[2]\ttrain-rmse:0.463671 \n[3]\ttrain-rmse:0.446699 \n[4]\ttrain-rmse:0.431160 \n[5]\ttrain-rmse:0.417340 \n[6]\ttrain-rmse:0.404995 \n[7]\ttrain-rmse:0.394284 \n[8]\ttrain-rmse:0.384497 \n[9]\ttrain-rmse:0.375554 \n[10]\ttrain-rmse:0.367333 \n[11]\ttrain-rmse:0.359942 \n[12]\ttrain-rmse:0.352282 \n[13]\ttrain-rmse:0.346492 \n[14]\ttrain-rmse:0.341002 \n[15]\ttrain-rmse:0.335982 \n[16]\ttrain-rmse:0.331736 \n[1]\ttrain-rmse:0.480609 \n[2]\ttrain-rmse:0.463264 \n[3]\ttrain-rmse:0.447044 \n[4]\ttrain-rmse:0.432491 \n[5]\ttrain-rmse:0.419710 \n[6]\ttrain-rmse:0.407421 \n[7]\ttrain-rmse:0.396677 \n[8]\ttrain-rmse:0.386282 \n[9]\ttrain-rmse:0.377689 \n[10]\ttrain-rmse:0.369330 \n[11]\ttrain-rmse:0.361271 \n[12]\ttrain-rmse:0.353993 \n[13]\ttrain-rmse:0.347109 \n[14]\ttrain-rmse:0.340902 \n[15]\ttrain-rmse:0.335439 \n[16]\ttrain-rmse:0.330551 \n[1]\ttrain-rmse:0.391331 \n[2]\ttrain-rmse:0.336196 \n[3]\ttrain-rmse:0.305060 \n[4]\ttrain-rmse:0.283270 \n[5]\ttrain-rmse:0.265297 \n[6]\ttrain-rmse:0.253524 \n[7]\ttrain-rmse:0.241562 \n[8]\ttrain-rmse:0.229415 \n[9]\ttrain-rmse:0.216797 \n[10]\ttrain-rmse:0.209464 \n[11]\ttrain-rmse:0.201144 \n[12]\ttrain-rmse:0.195527 \n[13]\ttrain-rmse:0.191203 \n[14]\ttrain-rmse:0.185738 \n[15]\ttrain-rmse:0.182161 \n[16]\ttrain-rmse:0.177461 \n[1]\ttrain-rmse:0.399304 \n[2]\ttrain-rmse:0.347299 \n[3]\ttrain-rmse:0.315269 \n[4]\ttrain-rmse:0.294179 \n[5]\ttrain-rmse:0.280553 \n[6]\ttrain-rmse:0.267001 \n[7]\ttrain-rmse:0.251934 \n[8]\ttrain-rmse:0.244570 \n[9]\ttrain-rmse:0.236971 \n[10]\ttrain-rmse:0.229536 \n[11]\ttrain-rmse:0.224027 \n[12]\ttrain-rmse:0.218198 \n[13]\ttrain-rmse:0.214238 \n[14]\ttrain-rmse:0.208287 \n[15]\ttrain-rmse:0.205090 \n[16]\ttrain-rmse:0.200239 \n[1]\ttrain-rmse:0.398243 \n[2]\ttrain-rmse:0.350427 \n[3]\ttrain-rmse:0.321054 \n[4]\ttrain-rmse:0.303792 \n[5]\ttrain-rmse:0.288216 \n[6]\ttrain-rmse:0.274223 \n[7]\ttrain-rmse:0.263454 \n[8]\ttrain-rmse:0.252615 \n[9]\ttrain-rmse:0.245005 \n[10]\ttrain-rmse:0.234036 \n[11]\ttrain-rmse:0.225401 \n[12]\ttrain-rmse:0.218698 \n[13]\ttrain-rmse:0.213294 \n[14]\ttrain-rmse:0.208168 \n[15]\ttrain-rmse:0.202857 \n[16]\ttrain-rmse:0.196321 \n[1]\ttrain-rmse:0.412613 \n[2]\ttrain-rmse:0.358420 \n[3]\ttrain-rmse:0.326669 \n[4]\ttrain-rmse:0.303319 \n[5]\ttrain-rmse:0.286022 \n[6]\ttrain-rmse:0.273749 \n[7]\ttrain-rmse:0.263153 \n[8]\ttrain-rmse:0.251950 \n[9]\ttrain-rmse:0.243505 \n[10]\ttrain-rmse:0.236474 \n[11]\ttrain-rmse:0.228569 \n[12]\ttrain-rmse:0.221599 \n[13]\ttrain-rmse:0.212299 \n[14]\ttrain-rmse:0.205074 \n[15]\ttrain-rmse:0.200964 \n[16]\ttrain-rmse:0.194888 \n[1]\ttrain-rmse:0.418903 \n[2]\ttrain-rmse:0.368349 \n[3]\ttrain-rmse:0.335454 \n[4]\ttrain-rmse:0.314156 \n[5]\ttrain-rmse:0.298537 \n[6]\ttrain-rmse:0.284029 \n[7]\ttrain-rmse:0.273099 \n[8]\ttrain-rmse:0.263954 \n[9]\ttrain-rmse:0.252246 \n[10]\ttrain-rmse:0.244578 \n[11]\ttrain-rmse:0.239407 \n[12]\ttrain-rmse:0.234422 \n[13]\ttrain-rmse:0.228069 \n[14]\ttrain-rmse:0.223888 \n[15]\ttrain-rmse:0.218094 \n[16]\ttrain-rmse:0.215078 \n[1]\ttrain-rmse:0.417948 \n[2]\ttrain-rmse:0.367809 \n[3]\ttrain-rmse:0.336307 \n[4]\ttrain-rmse:0.314008 \n[5]\ttrain-rmse:0.297239 \n[6]\ttrain-rmse:0.285473 \n[7]\ttrain-rmse:0.275437 \n[8]\ttrain-rmse:0.266708 \n[9]\ttrain-rmse:0.258052 \n[10]\ttrain-rmse:0.250290 \n[11]\ttrain-rmse:0.242443 \n[12]\ttrain-rmse:0.236872 \n[13]\ttrain-rmse:0.229573 \n[14]\ttrain-rmse:0.224046 \n[15]\ttrain-rmse:0.219750 \n[16]\ttrain-rmse:0.214634 \n[1]\ttrain-rmse:0.347540 \n[2]\ttrain-rmse:0.303626 \n[3]\ttrain-rmse:0.272683 \n[4]\ttrain-rmse:0.243109 \n[5]\ttrain-rmse:0.223824 \n[6]\ttrain-rmse:0.210663 \n[7]\ttrain-rmse:0.199044 \n[8]\ttrain-rmse:0.188770 \n[9]\ttrain-rmse:0.178904 \n[10]\ttrain-rmse:0.173196 \n[11]\ttrain-rmse:0.167350 \n[12]\ttrain-rmse:0.163099 \n[13]\ttrain-rmse:0.155632 \n[14]\ttrain-rmse:0.152195 \n[15]\ttrain-rmse:0.147318 \n[16]\ttrain-rmse:0.144478 \n[1]\ttrain-rmse:0.359231 \n[2]\ttrain-rmse:0.308544 \n[3]\ttrain-rmse:0.278949 \n[4]\ttrain-rmse:0.256349 \n[5]\ttrain-rmse:0.241120 \n[6]\ttrain-rmse:0.227070 \n[7]\ttrain-rmse:0.217868 \n[8]\ttrain-rmse:0.206924 \n[9]\ttrain-rmse:0.202159 \n[10]\ttrain-rmse:0.193935 \n[11]\ttrain-rmse:0.187499 \n[12]\ttrain-rmse:0.182944 \n[13]\ttrain-rmse:0.179975 \n[14]\ttrain-rmse:0.174656 \n[15]\ttrain-rmse:0.171647 \n[16]\ttrain-rmse:0.168707 \n[1]\ttrain-rmse:0.358490 \n[2]\ttrain-rmse:0.315554 \n[3]\ttrain-rmse:0.288114 \n[4]\ttrain-rmse:0.262765 \n[5]\ttrain-rmse:0.247720 \n[6]\ttrain-rmse:0.236217 \n[7]\ttrain-rmse:0.219483 \n[8]\ttrain-rmse:0.206180 \n[9]\ttrain-rmse:0.198773 \n[10]\ttrain-rmse:0.190334 \n[11]\ttrain-rmse:0.184461 \n[12]\ttrain-rmse:0.178594 \n[13]\ttrain-rmse:0.173868 \n[14]\ttrain-rmse:0.170536 \n[15]\ttrain-rmse:0.166593 \n[16]\ttrain-rmse:0.163310 \n[1]\ttrain-rmse:0.402424 \n[2]\ttrain-rmse:0.346928 \n[3]\ttrain-rmse:0.314267 \n[4]\ttrain-rmse:0.293571 \n[5]\ttrain-rmse:0.275489 \n[6]\ttrain-rmse:0.263132 \n[7]\ttrain-rmse:0.249888 \n[8]\ttrain-rmse:0.239288 \n[9]\ttrain-rmse:0.233887 \n[10]\ttrain-rmse:0.224376 \n[11]\ttrain-rmse:0.215130 \n[12]\ttrain-rmse:0.209099 \n[13]\ttrain-rmse:0.201128 \n[14]\ttrain-rmse:0.194383 \n[15]\ttrain-rmse:0.190227 \n[16]\ttrain-rmse:0.185943 \n[1]\ttrain-rmse:0.409511 \n[2]\ttrain-rmse:0.357163 \n[3]\ttrain-rmse:0.324910 \n[4]\ttrain-rmse:0.303323 \n[5]\ttrain-rmse:0.286659 \n[6]\ttrain-rmse:0.275220 \n[7]\ttrain-rmse:0.265906 \n[8]\ttrain-rmse:0.253159 \n[9]\ttrain-rmse:0.246518 \n[10]\ttrain-rmse:0.237044 \n[11]\ttrain-rmse:0.231812 \n[12]\ttrain-rmse:0.224940 \n[13]\ttrain-rmse:0.220676 \n[14]\ttrain-rmse:0.216981 \n[15]\ttrain-rmse:0.213305 \n[16]\ttrain-rmse:0.209319 \n[1]\ttrain-rmse:0.408495 \n[2]\ttrain-rmse:0.360470 \n[3]\ttrain-rmse:0.327066 \n[4]\ttrain-rmse:0.305746 \n[5]\ttrain-rmse:0.292335 \n[6]\ttrain-rmse:0.280373 \n[7]\ttrain-rmse:0.270363 \n[8]\ttrain-rmse:0.262649 \n[9]\ttrain-rmse:0.254465 \n[10]\ttrain-rmse:0.244795 \n[11]\ttrain-rmse:0.238356 \n[12]\ttrain-rmse:0.228929 \n[13]\ttrain-rmse:0.223343 \n[14]\ttrain-rmse:0.218370 \n[15]\ttrain-rmse:0.212266 \n[16]\ttrain-rmse:0.208432 \n[1]\ttrain-rmse:0.352912 \n[2]\ttrain-rmse:0.309031 \n[3]\ttrain-rmse:0.277692 \n[4]\ttrain-rmse:0.256625 \n[5]\ttrain-rmse:0.235777 \n[6]\ttrain-rmse:0.214268 \n[7]\ttrain-rmse:0.199580 \n[8]\ttrain-rmse:0.194155 \n[9]\ttrain-rmse:0.185362 \n[10]\ttrain-rmse:0.177677 \n[11]\ttrain-rmse:0.171369 \n[12]\ttrain-rmse:0.168394 \n[13]\ttrain-rmse:0.159508 \n[14]\ttrain-rmse:0.156477 \n[15]\ttrain-rmse:0.150386 \n[16]\ttrain-rmse:0.147333 \n[1]\ttrain-rmse:0.364115 \n[2]\ttrain-rmse:0.312819 \n[3]\ttrain-rmse:0.281496 \n[4]\ttrain-rmse:0.257388 \n[5]\ttrain-rmse:0.240136 \n[6]\ttrain-rmse:0.226296 \n[7]\ttrain-rmse:0.219283 \n[8]\ttrain-rmse:0.210615 \n[9]\ttrain-rmse:0.203212 \n[10]\ttrain-rmse:0.196874 \n[11]\ttrain-rmse:0.190957 \n[12]\ttrain-rmse:0.186694 \n[13]\ttrain-rmse:0.181710 \n[14]\ttrain-rmse:0.178089 \n[15]\ttrain-rmse:0.173809 \n[16]\ttrain-rmse:0.170155 \n[1]\ttrain-rmse:0.363254 \n[2]\ttrain-rmse:0.319160 \n[3]\ttrain-rmse:0.294411 \n[4]\ttrain-rmse:0.273299 \n[5]\ttrain-rmse:0.251156 \n[6]\ttrain-rmse:0.240591 \n[7]\ttrain-rmse:0.228331 \n[8]\ttrain-rmse:0.217241 \n[9]\ttrain-rmse:0.211002 \n[10]\ttrain-rmse:0.201419 \n[11]\ttrain-rmse:0.193850 \n[12]\ttrain-rmse:0.186100 \n[13]\ttrain-rmse:0.181138 \n[14]\ttrain-rmse:0.174777 \n[15]\ttrain-rmse:0.171032 \n[16]\ttrain-rmse:0.166749 \n[1]\ttrain-rmse:0.362176 \n[2]\ttrain-rmse:0.314899 \n[3]\ttrain-rmse:0.283499 \n[4]\ttrain-rmse:0.263383 \n[5]\ttrain-rmse:0.239849 \n[6]\ttrain-rmse:0.226875 \n[7]\ttrain-rmse:0.212486 \n[8]\ttrain-rmse:0.205695 \n[9]\ttrain-rmse:0.195985 \n[10]\ttrain-rmse:0.191229 \n[11]\ttrain-rmse:0.179409 \n[12]\ttrain-rmse:0.172459 \n[13]\ttrain-rmse:0.167844 \n[14]\ttrain-rmse:0.164455 \n[15]\ttrain-rmse:0.159117 \n[16]\ttrain-rmse:0.156624 \n[1]\ttrain-rmse:0.372569 \n[2]\ttrain-rmse:0.326729 \n[3]\ttrain-rmse:0.298524 \n[4]\ttrain-rmse:0.276214 \n[5]\ttrain-rmse:0.259725 \n[6]\ttrain-rmse:0.246788 \n[7]\ttrain-rmse:0.235435 \n[8]\ttrain-rmse:0.225300 \n[9]\ttrain-rmse:0.215375 \n[10]\ttrain-rmse:0.209135 \n[11]\ttrain-rmse:0.203847 \n[12]\ttrain-rmse:0.199532 \n[13]\ttrain-rmse:0.193989 \n[14]\ttrain-rmse:0.188594 \n[15]\ttrain-rmse:0.184746 \n[16]\ttrain-rmse:0.181138 \n[1]\ttrain-rmse:0.371580 \n[2]\ttrain-rmse:0.328379 \n[3]\ttrain-rmse:0.303459 \n[4]\ttrain-rmse:0.279450 \n[5]\ttrain-rmse:0.260896 \n[6]\ttrain-rmse:0.243199 \n[7]\ttrain-rmse:0.233772 \n[8]\ttrain-rmse:0.227453 \n[9]\ttrain-rmse:0.217446 \n[10]\ttrain-rmse:0.211120 \n[11]\ttrain-rmse:0.203136 \n[12]\ttrain-rmse:0.196808 \n[13]\ttrain-rmse:0.190861 \n[14]\ttrain-rmse:0.185876 \n[15]\ttrain-rmse:0.180722 \n[16]\ttrain-rmse:0.175697 \n[1]\ttrain-rmse:0.355068 \n[2]\ttrain-rmse:0.310701 \n[3]\ttrain-rmse:0.278834 \n[4]\ttrain-rmse:0.259903 \n[5]\ttrain-rmse:0.238338 \n[6]\ttrain-rmse:0.218278 \n[7]\ttrain-rmse:0.206588 \n[8]\ttrain-rmse:0.193913 \n[9]\ttrain-rmse:0.188071 \n[10]\ttrain-rmse:0.182172 \n[11]\ttrain-rmse:0.177608 \n[12]\ttrain-rmse:0.172018 \n[13]\ttrain-rmse:0.165400 \n[14]\ttrain-rmse:0.161438 \n[15]\ttrain-rmse:0.157206 \n[16]\ttrain-rmse:0.149544 \n[1]\ttrain-rmse:0.366080 \n[2]\ttrain-rmse:0.314497 \n[3]\ttrain-rmse:0.283504 \n[4]\ttrain-rmse:0.258938 \n[5]\ttrain-rmse:0.244948 \n[6]\ttrain-rmse:0.231373 \n[7]\ttrain-rmse:0.221023 \n[8]\ttrain-rmse:0.213963 \n[9]\ttrain-rmse:0.205689 \n[10]\ttrain-rmse:0.199176 \n[11]\ttrain-rmse:0.194188 \n[12]\ttrain-rmse:0.189800 \n[13]\ttrain-rmse:0.183892 \n[14]\ttrain-rmse:0.179431 \n[15]\ttrain-rmse:0.175402 \n[16]\ttrain-rmse:0.173047 \n[1]\ttrain-rmse:0.365181 \n[2]\ttrain-rmse:0.320673 \n[3]\ttrain-rmse:0.296988 \n[4]\ttrain-rmse:0.271807 \n[5]\ttrain-rmse:0.249580 \n[6]\ttrain-rmse:0.237423 \n[7]\ttrain-rmse:0.222919 \n[8]\ttrain-rmse:0.213172 \n[9]\ttrain-rmse:0.205728 \n[10]\ttrain-rmse:0.197945 \n[11]\ttrain-rmse:0.192628 \n[12]\ttrain-rmse:0.184720 \n[13]\ttrain-rmse:0.180063 \n[14]\ttrain-rmse:0.174582 \n[15]\ttrain-rmse:0.170291 \n[16]\ttrain-rmse:0.166534 \n[1]\ttrain-rmse:0.413003 \n[2]\ttrain-rmse:0.358879 \n[3]\ttrain-rmse:0.327087 \n[4]\ttrain-rmse:0.303711 \n[5]\ttrain-rmse:0.286390 \n[6]\ttrain-rmse:0.274090 \n[7]\ttrain-rmse:0.260314 \n[8]\ttrain-rmse:0.249955 \n[9]\ttrain-rmse:0.241820 \n[10]\ttrain-rmse:0.234428 \n[11]\ttrain-rmse:0.226885 \n[12]\ttrain-rmse:0.219616 \n[13]\ttrain-rmse:0.212639 \n[14]\ttrain-rmse:0.207428 \n[15]\ttrain-rmse:0.203291 \n[16]\ttrain-rmse:0.197492 \n[1]\ttrain-rmse:0.419262 \n[2]\ttrain-rmse:0.368771 \n[3]\ttrain-rmse:0.335856 \n[4]\ttrain-rmse:0.314520 \n[5]\ttrain-rmse:0.298882 \n[6]\ttrain-rmse:0.284372 \n[7]\ttrain-rmse:0.272740 \n[8]\ttrain-rmse:0.264158 \n[9]\ttrain-rmse:0.256454 \n[10]\ttrain-rmse:0.246102 \n[11]\ttrain-rmse:0.239338 \n[12]\ttrain-rmse:0.234446 \n[13]\ttrain-rmse:0.228276 \n[14]\ttrain-rmse:0.223703 \n[15]\ttrain-rmse:0.219541 \n[16]\ttrain-rmse:0.216816 \n[1]\ttrain-rmse:0.418311 \n[2]\ttrain-rmse:0.368219 \n[3]\ttrain-rmse:0.336701 \n[4]\ttrain-rmse:0.314359 \n[5]\ttrain-rmse:0.297552 \n[6]\ttrain-rmse:0.285764 \n[7]\ttrain-rmse:0.275737 \n[8]\ttrain-rmse:0.267016 \n[9]\ttrain-rmse:0.258368 \n[10]\ttrain-rmse:0.251282 \n[11]\ttrain-rmse:0.245400 \n[12]\ttrain-rmse:0.237171 \n[13]\ttrain-rmse:0.231113 \n[14]\ttrain-rmse:0.223861 \n[15]\ttrain-rmse:0.219796 \n[16]\ttrain-rmse:0.215306 \n[1]\ttrain-rmse:0.367975 \n[2]\ttrain-rmse:0.319321 \n[3]\ttrain-rmse:0.287144 \n[4]\ttrain-rmse:0.262513 \n[5]\ttrain-rmse:0.247351 \n[6]\ttrain-rmse:0.231291 \n[7]\ttrain-rmse:0.223033 \n[8]\ttrain-rmse:0.209622 \n[9]\ttrain-rmse:0.200868 \n[10]\ttrain-rmse:0.191819 \n[11]\ttrain-rmse:0.182173 \n[12]\ttrain-rmse:0.178936 \n[13]\ttrain-rmse:0.174043 \n[14]\ttrain-rmse:0.171584 \n[15]\ttrain-rmse:0.167346 \n[16]\ttrain-rmse:0.162605 \n[1]\ttrain-rmse:0.377873 \n[2]\ttrain-rmse:0.317379 \n[3]\ttrain-rmse:0.292246 \n[4]\ttrain-rmse:0.273028 \n[5]\ttrain-rmse:0.257528 \n[6]\ttrain-rmse:0.247641 \n[7]\ttrain-rmse:0.233587 \n[8]\ttrain-rmse:0.225675 \n[9]\ttrain-rmse:0.217171 \n[10]\ttrain-rmse:0.211252 \n[11]\ttrain-rmse:0.205052 \n[12]\ttrain-rmse:0.198105 \n[13]\ttrain-rmse:0.193092 \n[14]\ttrain-rmse:0.190016 \n[15]\ttrain-rmse:0.185144 \n[16]\ttrain-rmse:0.181247 \n[1]\ttrain-rmse:0.376839 \n[2]\ttrain-rmse:0.330142 \n[3]\ttrain-rmse:0.304843 \n[4]\ttrain-rmse:0.287958 \n[5]\ttrain-rmse:0.273168 \n[6]\ttrain-rmse:0.258587 \n[7]\ttrain-rmse:0.243581 \n[8]\ttrain-rmse:0.231554 \n[9]\ttrain-rmse:0.223641 \n[10]\ttrain-rmse:0.214984 \n[11]\ttrain-rmse:0.206594 \n[12]\ttrain-rmse:0.200954 \n[13]\ttrain-rmse:0.195729 \n[14]\ttrain-rmse:0.192239 \n[15]\ttrain-rmse:0.187588 \n[16]\ttrain-rmse:0.181316 \n[1]\ttrain-rmse:0.499000 \n[2]\ttrain-rmse:0.498010 \n[3]\ttrain-rmse:0.497026 \n[4]\ttrain-rmse:0.496047 \n[5]\ttrain-rmse:0.495073 \n[6]\ttrain-rmse:0.494104 \n[7]\ttrain-rmse:0.493140 \n[8]\ttrain-rmse:0.492181 \n[9]\ttrain-rmse:0.491226 \n[10]\ttrain-rmse:0.490275 \n[11]\ttrain-rmse:0.489330 \n[12]\ttrain-rmse:0.488389 \n[13]\ttrain-rmse:0.487453 \n[14]\ttrain-rmse:0.486522 \n[15]\ttrain-rmse:0.485596 \n[16]\ttrain-rmse:0.484675 \n[1]\ttrain-rmse:0.499066 \n[2]\ttrain-rmse:0.498148 \n[3]\ttrain-rmse:0.497234 \n[4]\ttrain-rmse:0.496325 \n[5]\ttrain-rmse:0.495422 \n[6]\ttrain-rmse:0.494523 \n[7]\ttrain-rmse:0.493629 \n[8]\ttrain-rmse:0.492739 \n[9]\ttrain-rmse:0.491855 \n[10]\ttrain-rmse:0.490975 \n[11]\ttrain-rmse:0.490100 \n[12]\ttrain-rmse:0.489230 \n[13]\ttrain-rmse:0.488364 \n[14]\ttrain-rmse:0.487503 \n[15]\ttrain-rmse:0.486647 \n[16]\ttrain-rmse:0.485795 \n[1]\ttrain-rmse:0.499053 \n[2]\ttrain-rmse:0.498134 \n[3]\ttrain-rmse:0.497183 \n[4]\ttrain-rmse:0.496237 \n[5]\ttrain-rmse:0.495290 \n[6]\ttrain-rmse:0.494354 \n[7]\ttrain-rmse:0.493465 \n[8]\ttrain-rmse:0.492519 \n[9]\ttrain-rmse:0.491570 \n[10]\ttrain-rmse:0.490634 \n[11]\ttrain-rmse:0.489702 \n[12]\ttrain-rmse:0.488775 \n[13]\ttrain-rmse:0.487852 \n[14]\ttrain-rmse:0.486929 \n[15]\ttrain-rmse:0.486016 \n[16]\ttrain-rmse:0.485108 \n[1]\ttrain-rmse:0.353172 \n[2]\ttrain-rmse:0.309652 \n[3]\ttrain-rmse:0.279091 \n[4]\ttrain-rmse:0.254916 \n[5]\ttrain-rmse:0.236239 \n[6]\ttrain-rmse:0.223144 \n[7]\ttrain-rmse:0.205658 \n[8]\ttrain-rmse:0.195707 \n[9]\ttrain-rmse:0.186813 \n[10]\ttrain-rmse:0.178283 \n[11]\ttrain-rmse:0.172189 \n[12]\ttrain-rmse:0.166345 \n[13]\ttrain-rmse:0.161567 \n[14]\ttrain-rmse:0.155295 \n[15]\ttrain-rmse:0.153612 \n[16]\ttrain-rmse:0.150238 \n[1]\ttrain-rmse:0.364352 \n[2]\ttrain-rmse:0.313021 \n[3]\ttrain-rmse:0.281973 \n[4]\ttrain-rmse:0.257413 \n[5]\ttrain-rmse:0.243398 \n[6]\ttrain-rmse:0.231083 \n[7]\ttrain-rmse:0.221349 \n[8]\ttrain-rmse:0.213183 \n[9]\ttrain-rmse:0.206201 \n[10]\ttrain-rmse:0.197767 \n[11]\ttrain-rmse:0.191407 \n[12]\ttrain-rmse:0.187852 \n[13]\ttrain-rmse:0.184400 \n[14]\ttrain-rmse:0.179506 \n[15]\ttrain-rmse:0.176823 \n[16]\ttrain-rmse:0.173508 \n[1]\ttrain-rmse:0.363486 \n[2]\ttrain-rmse:0.319342 \n[3]\ttrain-rmse:0.294568 \n[4]\ttrain-rmse:0.273495 \n[5]\ttrain-rmse:0.251407 \n[6]\ttrain-rmse:0.240850 \n[7]\ttrain-rmse:0.228615 \n[8]\ttrain-rmse:0.217545 \n[9]\ttrain-rmse:0.211308 \n[10]\ttrain-rmse:0.201726 \n[11]\ttrain-rmse:0.194161 \n[12]\ttrain-rmse:0.186420 \n[13]\ttrain-rmse:0.181458 \n[14]\ttrain-rmse:0.175103 \n[15]\ttrain-rmse:0.171353 \n[16]\ttrain-rmse:0.167058 \n[1]\ttrain-rmse:0.498143 \n[2]\ttrain-rmse:0.496315 \n[3]\ttrain-rmse:0.494504 \n[4]\ttrain-rmse:0.492711 \n[5]\ttrain-rmse:0.490936 \n[6]\ttrain-rmse:0.489174 \n[7]\ttrain-rmse:0.487429 \n[8]\ttrain-rmse:0.485702 \n[9]\ttrain-rmse:0.483991 \n[10]\ttrain-rmse:0.482297 \n[11]\ttrain-rmse:0.480619 \n[12]\ttrain-rmse:0.478958 \n[13]\ttrain-rmse:0.477314 \n[14]\ttrain-rmse:0.475685 \n[15]\ttrain-rmse:0.474073 \n[16]\ttrain-rmse:0.472476 \n[1]\ttrain-rmse:0.498267 \n[2]\ttrain-rmse:0.496570 \n[3]\ttrain-rmse:0.494890 \n[4]\ttrain-rmse:0.493226 \n[5]\ttrain-rmse:0.491580 \n[6]\ttrain-rmse:0.489950 \n[7]\ttrain-rmse:0.488336 \n[8]\ttrain-rmse:0.486738 \n[9]\ttrain-rmse:0.485157 \n[10]\ttrain-rmse:0.483591 \n[11]\ttrain-rmse:0.482041 \n[12]\ttrain-rmse:0.480509 \n[13]\ttrain-rmse:0.478952 \n[14]\ttrain-rmse:0.477410 \n[15]\ttrain-rmse:0.475883 \n[16]\ttrain-rmse:0.474411 \n[1]\ttrain-rmse:0.498243 \n[2]\ttrain-rmse:0.496476 \n[3]\ttrain-rmse:0.494727 \n[4]\ttrain-rmse:0.493062 \n[5]\ttrain-rmse:0.491346 \n[6]\ttrain-rmse:0.489608 \n[7]\ttrain-rmse:0.487887 \n[8]\ttrain-rmse:0.486183 \n[9]\ttrain-rmse:0.484496 \n[10]\ttrain-rmse:0.482825 \n[11]\ttrain-rmse:0.481171 \n[12]\ttrain-rmse:0.479533 \n[13]\ttrain-rmse:0.477911 \n[14]\ttrain-rmse:0.476288 \n[15]\ttrain-rmse:0.474681 \n[16]\ttrain-rmse:0.473104 \n[1]\ttrain-rmse:0.450145 \n[2]\ttrain-rmse:0.412640 \n[3]\ttrain-rmse:0.381502 \n[4]\ttrain-rmse:0.356750 \n[5]\ttrain-rmse:0.339371 \n[6]\ttrain-rmse:0.323218 \n[7]\ttrain-rmse:0.310643 \n[8]\ttrain-rmse:0.300609 \n[9]\ttrain-rmse:0.290099 \n[10]\ttrain-rmse:0.282061 \n[11]\ttrain-rmse:0.274355 \n[12]\ttrain-rmse:0.266716 \n[13]\ttrain-rmse:0.261058 \n[14]\ttrain-rmse:0.254808 \n[15]\ttrain-rmse:0.249140 \n[16]\ttrain-rmse:0.245194 \n[1]\ttrain-rmse:0.453614 \n[2]\ttrain-rmse:0.419638 \n[3]\ttrain-rmse:0.389756 \n[4]\ttrain-rmse:0.367082 \n[5]\ttrain-rmse:0.347280 \n[6]\ttrain-rmse:0.334347 \n[7]\ttrain-rmse:0.321853 \n[8]\ttrain-rmse:0.312025 \n[9]\ttrain-rmse:0.302219 \n[10]\ttrain-rmse:0.294317 \n[11]\ttrain-rmse:0.287712 \n[12]\ttrain-rmse:0.280739 \n[13]\ttrain-rmse:0.275178 \n[14]\ttrain-rmse:0.270555 \n[15]\ttrain-rmse:0.265659 \n[16]\ttrain-rmse:0.261061 \n[1]\ttrain-rmse:0.453005 \n[2]\ttrain-rmse:0.416664 \n[3]\ttrain-rmse:0.389075 \n[4]\ttrain-rmse:0.367094 \n[5]\ttrain-rmse:0.348915 \n[6]\ttrain-rmse:0.334227 \n[7]\ttrain-rmse:0.322698 \n[8]\ttrain-rmse:0.312483 \n[9]\ttrain-rmse:0.305062 \n[10]\ttrain-rmse:0.297309 \n[11]\ttrain-rmse:0.291410 \n[12]\ttrain-rmse:0.285525 \n[13]\ttrain-rmse:0.279639 \n[14]\ttrain-rmse:0.274354 \n[15]\ttrain-rmse:0.269579 \n[16]\ttrain-rmse:0.266029 \n[1]\ttrain-rmse:0.347479 \n[2]\ttrain-rmse:0.303578 \n[3]\ttrain-rmse:0.272632 \n[4]\ttrain-rmse:0.243045 \n[5]\ttrain-rmse:0.223750 \n[6]\ttrain-rmse:0.210591 \n[7]\ttrain-rmse:0.198969 \n[8]\ttrain-rmse:0.188693 \n[9]\ttrain-rmse:0.178825 \n[10]\ttrain-rmse:0.173116 \n[11]\ttrain-rmse:0.167271 \n[12]\ttrain-rmse:0.163023 \n[13]\ttrain-rmse:0.155557 \n[14]\ttrain-rmse:0.152120 \n[15]\ttrain-rmse:0.147244 \n[16]\ttrain-rmse:0.144406 \n[1]\ttrain-rmse:0.359176 \n[2]\ttrain-rmse:0.308494 \n[3]\ttrain-rmse:0.278888 \n[4]\ttrain-rmse:0.256292 \n[5]\ttrain-rmse:0.241052 \n[6]\ttrain-rmse:0.226995 \n[7]\ttrain-rmse:0.218274 \n[8]\ttrain-rmse:0.209522 \n[9]\ttrain-rmse:0.199627 \n[10]\ttrain-rmse:0.192022 \n[11]\ttrain-rmse:0.186685 \n[12]\ttrain-rmse:0.182298 \n[13]\ttrain-rmse:0.178081 \n[14]\ttrain-rmse:0.172377 \n[15]\ttrain-rmse:0.168291 \n[16]\ttrain-rmse:0.165210 \n[1]\ttrain-rmse:0.358436 \n[2]\ttrain-rmse:0.315512 \n[3]\ttrain-rmse:0.288076 \n[4]\ttrain-rmse:0.262708 \n[5]\ttrain-rmse:0.247654 \n[6]\ttrain-rmse:0.236151 \n[7]\ttrain-rmse:0.219405 \n[8]\ttrain-rmse:0.206097 \n[9]\ttrain-rmse:0.198689 \n[10]\ttrain-rmse:0.190249 \n[11]\ttrain-rmse:0.184376 \n[12]\ttrain-rmse:0.178509 \n[13]\ttrain-rmse:0.173784 \n[14]\ttrain-rmse:0.170455 \n[15]\ttrain-rmse:0.166512 \n[16]\ttrain-rmse:0.163231 \n[1]\ttrain-rmse:0.377154 \n[2]\ttrain-rmse:0.324208 \n[3]\ttrain-rmse:0.292133 \n[4]\ttrain-rmse:0.271497 \n[5]\ttrain-rmse:0.257482 \n[6]\ttrain-rmse:0.242916 \n[7]\ttrain-rmse:0.231218 \n[8]\ttrain-rmse:0.219051 \n[9]\ttrain-rmse:0.209261 \n[10]\ttrain-rmse:0.198130 \n[11]\ttrain-rmse:0.191151 \n[12]\ttrain-rmse:0.187403 \n[13]\ttrain-rmse:0.182459 \n[14]\ttrain-rmse:0.174673 \n[15]\ttrain-rmse:0.171358 \n[16]\ttrain-rmse:0.166835 \n[1]\ttrain-rmse:0.386284 \n[2]\ttrain-rmse:0.332859 \n[3]\ttrain-rmse:0.303453 \n[4]\ttrain-rmse:0.282584 \n[5]\ttrain-rmse:0.267558 \n[6]\ttrain-rmse:0.253924 \n[7]\ttrain-rmse:0.243237 \n[8]\ttrain-rmse:0.233537 \n[9]\ttrain-rmse:0.228959 \n[10]\ttrain-rmse:0.220471 \n[11]\ttrain-rmse:0.216135 \n[12]\ttrain-rmse:0.209025 \n[13]\ttrain-rmse:0.204661 \n[14]\ttrain-rmse:0.199754 \n[15]\ttrain-rmse:0.193463 \n[16]\ttrain-rmse:0.190947 \n[1]\ttrain-rmse:0.385215 \n[2]\ttrain-rmse:0.338777 \n[3]\ttrain-rmse:0.313665 \n[4]\ttrain-rmse:0.292796 \n[5]\ttrain-rmse:0.273568 \n[6]\ttrain-rmse:0.262789 \n[7]\ttrain-rmse:0.253421 \n[8]\ttrain-rmse:0.239860 \n[9]\ttrain-rmse:0.231593 \n[10]\ttrain-rmse:0.222955 \n[11]\ttrain-rmse:0.214456 \n[12]\ttrain-rmse:0.209434 \n[13]\ttrain-rmse:0.203434 \n[14]\ttrain-rmse:0.196974 \n[15]\ttrain-rmse:0.192222 \n[16]\ttrain-rmse:0.187100 \n[1]\ttrain-rmse:0.414606 \n[2]\ttrain-rmse:0.360780 \n[3]\ttrain-rmse:0.328471 \n[4]\ttrain-rmse:0.305099 \n[5]\ttrain-rmse:0.287631 \n[6]\ttrain-rmse:0.273785 \n[7]\ttrain-rmse:0.263390 \n[8]\ttrain-rmse:0.251786 \n[9]\ttrain-rmse:0.242704 \n[10]\ttrain-rmse:0.236481 \n[11]\ttrain-rmse:0.229636 \n[12]\ttrain-rmse:0.224726 \n[13]\ttrain-rmse:0.216931 \n[14]\ttrain-rmse:0.211102 \n[15]\ttrain-rmse:0.204097 \n[16]\ttrain-rmse:0.199598 \n[1]\ttrain-rmse:0.420741 \n[2]\ttrain-rmse:0.370518 \n[3]\ttrain-rmse:0.337584 \n[4]\ttrain-rmse:0.315976 \n[5]\ttrain-rmse:0.300921 \n[6]\ttrain-rmse:0.287629 \n[7]\ttrain-rmse:0.275361 \n[8]\ttrain-rmse:0.267142 \n[9]\ttrain-rmse:0.257956 \n[10]\ttrain-rmse:0.250070 \n[11]\ttrain-rmse:0.243369 \n[12]\ttrain-rmse:0.237665 \n[13]\ttrain-rmse:0.233758 \n[14]\ttrain-rmse:0.226786 \n[15]\ttrain-rmse:0.222565 \n[16]\ttrain-rmse:0.218776 \n[1]\ttrain-rmse:0.419801 \n[2]\ttrain-rmse:0.369922 \n[3]\ttrain-rmse:0.338655 \n[4]\ttrain-rmse:0.317072 \n[5]\ttrain-rmse:0.301808 \n[6]\ttrain-rmse:0.290401 \n[7]\ttrain-rmse:0.281845 \n[8]\ttrain-rmse:0.272699 \n[9]\ttrain-rmse:0.263939 \n[10]\ttrain-rmse:0.255474 \n[11]\ttrain-rmse:0.249697 \n[12]\ttrain-rmse:0.244840 \n[13]\ttrain-rmse:0.236976 \n[14]\ttrain-rmse:0.230660 \n[15]\ttrain-rmse:0.227605 \n[16]\ttrain-rmse:0.221605 \n[1]\ttrain-rmse:0.404374 \n[2]\ttrain-rmse:0.349048 \n[3]\ttrain-rmse:0.316196 \n[4]\ttrain-rmse:0.295271 \n[5]\ttrain-rmse:0.277377 \n[6]\ttrain-rmse:0.265640 \n[7]\ttrain-rmse:0.252072 \n[8]\ttrain-rmse:0.242512 \n[9]\ttrain-rmse:0.235533 \n[10]\ttrain-rmse:0.227548 \n[11]\ttrain-rmse:0.218565 \n[12]\ttrain-rmse:0.210250 \n[13]\ttrain-rmse:0.205741 \n[14]\ttrain-rmse:0.201760 \n[15]\ttrain-rmse:0.195132 \n[16]\ttrain-rmse:0.191336 \n[1]\ttrain-rmse:0.411308 \n[2]\ttrain-rmse:0.359166 \n[3]\ttrain-rmse:0.326783 \n[4]\ttrain-rmse:0.304912 \n[5]\ttrain-rmse:0.290269 \n[6]\ttrain-rmse:0.279429 \n[7]\ttrain-rmse:0.268528 \n[8]\ttrain-rmse:0.256203 \n[9]\ttrain-rmse:0.246645 \n[10]\ttrain-rmse:0.240052 \n[11]\ttrain-rmse:0.233840 \n[12]\ttrain-rmse:0.228318 \n[13]\ttrain-rmse:0.223129 \n[14]\ttrain-rmse:0.218653 \n[15]\ttrain-rmse:0.215338 \n[16]\ttrain-rmse:0.211162 \n[1]\ttrain-rmse:0.410302 \n[2]\ttrain-rmse:0.362318 \n[3]\ttrain-rmse:0.328783 \n[4]\ttrain-rmse:0.307210 \n[5]\ttrain-rmse:0.293495 \n[6]\ttrain-rmse:0.281758 \n[7]\ttrain-rmse:0.272646 \n[8]\ttrain-rmse:0.262005 \n[9]\ttrain-rmse:0.253085 \n[10]\ttrain-rmse:0.246850 \n[11]\ttrain-rmse:0.239128 \n[12]\ttrain-rmse:0.232936 \n[13]\ttrain-rmse:0.226476 \n[14]\ttrain-rmse:0.220414 \n[15]\ttrain-rmse:0.213686 \n[16]\ttrain-rmse:0.209723 \n```\n\n\n:::\n\n```{.r .cell-code}\nresults = data.frame(depth = hyper_depth, eta = hyper_eta, AUC = tuning_results)\n\nprint(results)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   depth         eta       AUC\n1     49 0.988891729 0.7904927\n2     65 0.946668233 0.7985711\n3    153 0.082437558 0.8174663\n4     74 0.514211784 0.8109768\n5    146 0.390203467 0.8064756\n6    122 0.905738131 0.7992766\n7    200 0.446969628 0.8092398\n8    128 0.836004260 0.8053466\n9     47 0.737595618 0.8027806\n10    24 0.811055141 0.8008673\n11    71 0.388108283 0.8094556\n12   100 0.685169729 0.8011198\n13    89 0.003948339 0.8044831\n14   165 0.832916080 0.8052938\n15   110 0.007334147 0.8065934\n16    20 0.207658973 0.8189459\n17   154 0.906601408 0.8000982\n18   114 0.611778643 0.8011920\n19   111 0.379559241 0.8060280\n20   131 0.435771585 0.8069872\n```\n\n\n:::\n:::\n\n\n\n\nMake predictions:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_xg = xgb.DMatrix(data = as.matrix(data_obs[,-1]), label = data_obs$survived)\n\nmodel = xgboost(data_xg, nrounds = 16L, eta = results[which.max(results$AUC), 2], max_depth = results[which.max(results$AUC), 1], objective = \"reg:logistic\")\n\npredictions = predict(model, newdata = as.matrix(data_new)[,-1])\n\n# Single predictions from the ensemble model:\nwrite.csv(data.frame(y = predictions), file = \"Max_titanic_xgboost.csv\")\n```\n:::\n\n\n\n\n\n</div>\n\n\n::: callout-warning\n#### Bonus: Implement a BRT on your own!\n\nYou can easily implement a BRT or boosted linear model using the rpart package or the lm function.\n:::\n\n\n<div class='webex-solution'><button>Click here to see the solution</button>\n\n\nGo through the code line by line and try to understand it. Ask, if you have any questions:\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\nLet's try it:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata = model.matrix(~. , data = airquality)\n\nmodel = get_boosting_model(x = data[,-2], y = data[,2], n_trees = 5L )\npred = predict(model, newdata = data[,-2])\nplot(data[,2], pred, xlab = \"observed\", ylab = \"predicted\")\n```\n\n::: {.cell-output-display}\n![](B1-Trees_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\n\n</div>\n\n",
    "supporting": [
      "B1-Trees_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}