{
  "hash": "641b94e9b29cab48fe2b30c4f4e59430",
  "result": {
    "markdown": "---\noutput: html_document\neditor_options:\n  chunk_output_type: console\n---\n\n\n# Causal Inference and Machine Learning {#sec-causalInference}\n\n\n\n\n\n\n\nxAI aims at explaining how predictions are being made. In general, xAI != causality. xAI methods measure which variables are used for predictions by the algorithm, or how far variables improve predictions. The important point to note here: If a variable causes something, we could also expect that it helps predicting the very thing. The opposite, however, is not generally true - very often it is possible that a variable that doesn't cause anything can predict something.\n\nIn statistics courses (in particular our course: Advanced Biostatistics), we discuss the issue of causality at full length. Here, we don't want to go into the details, but again, you should in general resist to interpret indicators of importance in xAI as causal effects. They tell you something about what's going on in the algorithm, not about what's going on in reality.\n\n## Causal Inference on Static Data {#causalInference}\n\nMethods for causal inference depend on whether we have dynamic or static data. The latter is the more common case. With static data, the problem is confounding. If you have several correlated predictors, you can get spurious correlations between a given predictor and the response, although there is no causal effect in general.\n\nMultiple regression and few other methods are able to correct for other predictors and thus isolate the causal effect. The same is not necessarily true for machine learning algorithms and xAI methods. This is not a bug, but a feature - for making good predictions, it is often no problem, but rather an advantage to also use non-causal predictors.\n\nHere an example for the indicators of variable importance in the random forest algorithm. The purpose of this script is to show that random forest variable importance will split importance values for collinear variables evenly, even if collinearity is low enough so that variables are separable and would be correctly separated by an lm / ANOVA.\n\nWe first simulate a data set with 2 predictors that are strongly correlated, but only one of them has an effect on the response.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(randomForest)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nrandomForest 4.7-1.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nType rfNews() to see new features/changes/bug fixes.\n```\n:::\n\n```{.r .cell-code}\nset.seed(123)\n\n# Simulation parameters.\nn = 1000\ncol = 0.7\n\n# Create collinear predictors.\nx1 = runif(n)\nx2 = col * x1 + (1-col) * runif(n)\n\n# Response is only influenced by x1.\ny = x1 + rnorm(n)\n```\n:::\n\n\nlm / anova correctly identify $x1$ as causal variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(lm(y ~ x1 + x2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = y ~ x1 + x2)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-3.0709 -0.6939  0.0102  0.6976  3.3373 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  0.02837    0.08705   0.326 0.744536    \nx1           1.07383    0.27819   3.860 0.000121 ***\nx2          -0.04547    0.37370  -0.122 0.903186    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.011 on 997 degrees of freedom\nMultiple R-squared:  0.08104,\tAdjusted R-squared:  0.0792 \nF-statistic: 43.96 on 2 and 997 DF,  p-value: < 2.2e-16\n```\n:::\n:::\n\n\nFit random forest and show variable importance:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\n\nfit = randomForest(y ~ x1 + x2, importance = TRUE)\nvarImpPlot(fit)\n```\n\n::: {.cell-output-display}\n![](D1-causality_files/figure-html/chunk_chapter6_12-1.png){width=672}\n:::\n:::\n\n\nVariable importance is now split nearly evenly.\n\nTask: understand why this is - remember:\n\n-   How the random forest works - variables are randomly hidden from the regression tree when the trees for the forest are built.\n-   Remember that as $x1 \\propto x2$, we can use $x2$ as a replacement for $x1$.\n-   Remember that the variable importance measures the average contributions of the different variables in the trees of the forest.\n\n## Structural Equation Models\n\nIf causal relationships get more complicated, it will not be possible to adjust correctly with a simple lm. In this case, in statistics, we will usually use structural equation models (SEMs). Structural equation models are designed to estimate entire causal diagrams. There are two main SEM packages in R: For anything that is non-normal, you will currently have to estimate the directed acyclic graph (that depicts causal relations) piece-wise with CRAN package piecewiseSEM. Example for a vegetation data set:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(piecewiseSEM)\n\nmod = psem(\n lm(rich ~ distance + elev + abiotic + age + hetero + firesev + cover,\n    data = keeley),\n lm(firesev ~ elev + age + cover, data = keeley),\n lm(cover ~ age + elev + hetero + abiotic, data = keeley)\n)\nsummary(mod)\nplot(mod)\n```\n:::\n\n\nFor linear structural equation models, we can estimate the entire directed acyclic graph at once. This also allows having unobserved variables in the directed acyclic graph. One of the most popular packages for this is lavaan.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lavaan)\n\nmod = \"\n rich ~ distance + elev + abiotic + age + hetero + firesev + cover\n firesev ~ elev + age + cover\n cover ~ age + elev + abiotic\n\"\nfit = sem(mod, data = keeley)\nsummary(fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlavaan 0.6.15 ended normally after 1 iteration\n\n  Estimator                                         ML\n  Optimization method                           NLMINB\n  Number of model parameters                        16\n\n  Number of observations                            90\n\nModel Test User Model:\n                                                      \n  Test statistic                                10.437\n  Degrees of freedom                                 5\n  P-value (Chi-square)                           0.064\n\nParameter Estimates:\n\n  Standard errors                             Standard\n  Information                                 Expected\n  Information saturated (h1) model          Structured\n\nRegressions:\n                   Estimate   Std.Err  z-value  P(>|z|)\n  rich ~                                               \n    distance           0.616    0.177    3.485    0.000\n    elev              -0.009    0.006   -1.644    0.100\n    abiotic            0.488    0.156    3.134    0.002\n    age                0.024    0.105    0.229    0.819\n    hetero            44.414    9.831    4.517    0.000\n    firesev           -1.018    0.759   -1.341    0.180\n    cover             12.400    3.841    3.228    0.001\n  firesev ~                                            \n    elev              -0.001    0.001   -0.951    0.342\n    age                0.047    0.013    3.757    0.000\n    cover             -1.521    0.509   -2.991    0.003\n  cover ~                                              \n    age               -0.009    0.002   -3.875    0.000\n    elev               0.000    0.000    2.520    0.012\n    abiotic           -0.000    0.004   -0.115    0.909\n\nVariances:\n                   Estimate   Std.Err  z-value  P(>|z|)\n   .rich              97.844   14.586    6.708    0.000\n   .firesev            1.887    0.281    6.708    0.000\n   .cover              0.081    0.012    6.708    0.000\n```\n:::\n:::\n\n\nThe default plot options are not so nice as before.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lavaanPlot)\n\nlavaanPlot(model = fit)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"grViz html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-c178c715e4eb61ca4c30\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-c178c715e4eb61ca4c30\">{\"x\":{\"diagram\":\" digraph plot { \\n graph [ overlap = true, fontsize = 10 ] \\n node [ shape = box ] \\n node [shape = box] \\n distance; elev; abiotic; age; hetero; firesev; cover; rich \\n node [shape = oval] \\n  \\n \\n edge [ color = black ] \\n distance->rich elev->rich abiotic->rich age->rich hetero->rich firesev->rich cover->rich elev->firesev age->firesev cover->firesev age->cover elev->cover abiotic->cover  \\n}\",\"config\":{\"engine\":\"dot\",\"options\":null}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nAnother plotting option is using semPlot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(semPlot)\n\nsemPaths(fit)\n```\n\n::: {.cell-output-display}\n![](D1-causality_files/figure-html/chunk_chapter6_16-1.png){width=672}\n:::\n:::\n\n\n## Automatic Causal Discovery\n\nBut how to get the causal graph? In statistics, it is common to \"guess\" it and afterwards do residual checks, in the same way as we guess the structure of a regression. For more complicated problems, however, this is unsatisfying. Some groups therefore work on so-called causal discovery algorithms, i.e. algorithms that automatically generate causal graphs from data. One of the most classic algorithms of this sort is the *PC algorithm*. Here an example using the pcalg package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pcalg)\n```\n:::\n\n\nLoading the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"gmG\", package = \"pcalg\") # Loads data sets gmG and gmG8.\nsuffStat = list(C = cor(gmG8$x), n = nrow(gmG8$x))\nvarNames = gmG8$g@nodes\n```\n:::\n\n\nFirst, the skeleton algorithm creates a basic graph without connections (a skeleton of the graph).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nskel.gmG8 = skeleton(suffStat, indepTest = gaussCItest,\nlabels = varNames, alpha = 0.01)\nRgraphviz::plot(skel.gmG8@graph)\n```\n\n::: {.cell-output-display}\n![](D1-causality_files/figure-html/chunk_chapter6_19-1.png){width=672}\n:::\n:::\n\n\nWhat is missing here is the direction of the errors. The PC algorithm now makes tests for conditional independence, which allows fixing a part (but typically not all) of the directions of the causal arrows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npc.gmG8 = pc(suffStat, indepTest = gaussCItest,\nlabels = varNames, alpha = 0.01)\nRgraphviz::plot(pc.gmG8@graph )\n```\n\n::: {.cell-output-display}\n![](D1-causality_files/figure-html/chunk_chapter6_20-1.png){width=672}\n:::\n:::\n\n\n## Causal Inference on Dynamic Data\n\nWhen working with dynamic data, we can use an additional piece of information - the cause usually precedes the effect, which means that we can test for a time-lag between cause and effect to determine the direction of causality. This way of testing for causality is known as *Granger causality*, or Granger methods. Here an example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lmtest)\n\n## What came first: the chicken or the egg?\ndata(ChickEgg)\ngrangertest(egg ~ chicken, order = 3, data = ChickEgg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGranger causality test\n\nModel 1: egg ~ Lags(egg, 1:3) + Lags(chicken, 1:3)\nModel 2: egg ~ Lags(egg, 1:3)\n  Res.Df Df      F Pr(>F)\n1     44                 \n2     47 -3 0.5916 0.6238\n```\n:::\n\n```{.r .cell-code}\ngrangertest(chicken ~ egg, order = 3, data = ChickEgg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGranger causality test\n\nModel 1: chicken ~ Lags(chicken, 1:3) + Lags(egg, 1:3)\nModel 2: chicken ~ Lags(chicken, 1:3)\n  Res.Df Df     F   Pr(>F)   \n1     44                     \n2     47 -3 5.405 0.002966 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n\n## Outlook for Machine Learning\n\nAs we have seen, there are already a few methods / algorithms for discovering causality from large data sets, but the systematic transfer of these concepts to machine learning, in particular deep learning, is still at its infancy. At the moment, this field is actively researched and changes extremely fast, so we recommend using Google to see what is currently going on. Particular in business and industry, there is a large interest in learning about causal effect from large data sets. In our opinion, a great topic for young scientists to specialize on.\n",
    "supporting": [
      "D1-causality_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/htmlwidgets-1.6.2/htmlwidgets.js\"></script>\n<script src=\"site_libs/viz-1.8.2/viz.js\"></script>\n<link href=\"site_libs/DiagrammeR-styles-0.2/styles.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/grViz-binding-1.0.10/grViz.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}