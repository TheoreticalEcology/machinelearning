{
  "hash": "0fd4e0d4ba81d1583541e12bc0d07694",
  "result": {
    "markdown": "---\noutput: html_document\neditor_options:\n  chunk_output_type: console\n---\n\n\n# Random Forest\n\n\nFamous machine learning algorithms such as _Random Forest_ and _Gradient Boosted trees_ are based on classification and regression trees.\n**Hint**: Tree-based algorithms are not distance based and thus do not need scaling.\n\n\nIf you want to know a little bit more about the concepts described in the following - like decision, classification and regression trees as well as random forests - you might watch the following videos:\n\n* <a href=\"https://www.youtube.com/watch?v=7VeUPuFGJHk\" target=\"_blank\" rel=\"noopener\">Decision trees</a>\n\n<br>\n\n<iframe width=\"560\" height=\"315\" \n  src=\"https://www.youtube.com/embed/7VeUPuFGJHk\"\n  frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media;\n  gyroscope; picture-in-picture\" allowfullscreen>\n  </iframe>\n\n<br>\n* <a href=\"https://www.youtube.com/watch?v=g9c66TUylZ4\" target=\"_blank\" rel=\"noopener\">Regression trees</a>\n<br>\n\n<iframe width=\"560\" height=\"315\" \n  src=\"https://www.youtube.com/embed/g9c66TUylZ4\"\n  frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media;\n  gyroscope; picture-in-picture\" allowfullscreen>\n  </iframe>\n\n<br>\n* <a href=\"https://www.youtube.com/watch?v=J4Wdy0Wc_xQ\" target=\"_blank\" rel=\"noopener\">Random forests</a>\n<br>\n\n<iframe width=\"560\" height=\"315\" \n  src=\"https://www.youtube.com/embed/J4Wdy0Wc_xQ\"\n  frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media;\n  gyroscope; picture-in-picture\" allowfullscreen>\n  </iframe>\n\n<br>\n* <a href=\"https://www.youtube.com/watch?v=D0efHEJsfHo\" target=\"_blank\" rel=\"noopener\">Pruning trees</a>\n<br>\n\n<iframe width=\"560\" height=\"315\" \n  src=\"https://www.youtube.com/embed/D0efHEJsfHo\"\n  frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media;\n  gyroscope; picture-in-picture\" allowfullscreen>\n  </iframe>\n\n<br>\nAfter watching these videos, you should know what the different hyperparameters are doing and how to prevent trees / forests from doing something you don't want.\n\n\n### Classification and Regression Trees\n\nTree-based models in general use a series of if-then rules to generate predictions from one or more decision trees.\nIn this lecture, we will explore regression and classification trees by the example of the airquality data set. There is one important hyperparameter for regression trees: \"minsplit\".\n\n* It controls the depth of tree (see the help of rpart for a description).\n* It controls the complexity of the tree and can thus also be seen as a regularization parameter.\n\nWe first prepare and visualize the data and afterwards fit a decision tree. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rpart)\nlibrary(rpart.plot)\n\ndata = airquality[complete.cases(airquality),]\n```\n:::\n\n\nFit and visualize one(!) regression tree:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrt = rpart(Ozone~., data = data, control = rpart.control(minsplit = 10))\nrpart.plot(rt)\n```\n\n::: {.cell-output-display}\n![](03-RandomForest_files/figure-html/chunk_chapter4_23-1.png){width=672}\n:::\n:::\n\n\nVisualize the predictions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npred = predict(rt, data)\nplot(data$Temp, data$Ozone)\nlines(data$Temp[order(data$Temp)], pred[order(data$Temp)], col = \"red\")\n```\n\n::: {.cell-output-display}\n![](03-RandomForest_files/figure-html/chunk_chapter4_24-1.png){width=672}\n:::\n:::\n\n\nThe angular form of the prediction line is typical for regression trees and is a weakness of it.\n\n\n### Random Forest\n\nTo overcome this weakness, a random forest uses an ensemble of regression/classification trees. Thus, the random forest is in principle nothing else than a normal regression/classification tree, but it uses the idea of the *\"wisdom of the crowd\"* : By asking many people (regression/classification trees) one can make a more informed decision (prediction/classification). When you want to buy a new phone for example you also wouldn't go directly into the shop, but search in the internet and ask your friends and family.  \n\nThere are two randomization steps with the random forest that are responsible for their success:\n\n* Bootstrap samples for each tree (we will sample observations with replacement from the data set. For the phone this is like not everyone has experience about each phone).\n* At each split, we will sample a subset of predictors that is then considered as potential splitting criterion (for the phone this is like that not everyone has the same decision criteria).\nAnnotation: While building a decision tree (random forests consist of many decision trees), one splits the data at some point according to their features. For example if you have females and males, big and small people in a crowd, you con split this crowd by gender and then by size or by size and then by gender to build a decision tree.\n\nApplying the random forest follows the same principle as for the methods before: We visualize the data (we have already done this so often for the airquality data set, thus we skip it here), fit the algorithm and then plot the outcomes.\n\nFit a random forest and visualize the predictions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(randomForest)\nset.seed(123)\n\ndata = airquality[complete.cases(airquality),]\n\nrf = randomForest(Ozone~., data = data)\npred = predict(rf, data)\nplot(Ozone~Temp, data = data)\nlines(data$Temp[order(data$Temp)], pred[order(data$Temp)], col = \"red\")\n```\n\n::: {.cell-output-display}\n![](03-RandomForest_files/figure-html/chunk_chapter4_25-1.png){width=672}\n:::\n:::\n\n\nOne advantage of random forests is that we will get an importance of variables. At each split in each tree, the improvement in the split-criterion is the importance measure attributed to the splitting variable, and is accumulated over all the trees in the forest separately for each variable. Thus the variable importance shows us how important a variable is averaged over all trees.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf$importance\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        IncNodePurity\nSolar.R      17969.59\nWind         31978.36\nTemp         34176.71\nMonth        10753.73\nDay          15436.47\n```\n:::\n:::\n\n\nThere are several important hyperparameters in a random forest that we can tune to get better results:\n\n* Similar to the minsplit parameter in regression and classification trees, the hyperparameter \"nodesize\" controls for complexity $\\rightarrow$ Minimum size of terminal nodes in the tree. Setting this number larger causes smaller trees to be grown (and thus take less time). Note that the default values are different for classification (1) and regression (5).\n* mtry: Number of features randomly sampled as candidates at each split.\n\n\n#### Exercises\n\n\n::: {.callout-caution icon=\"false\"}\n#### Question: Regression Trees\n\n\nWe will use the following code snippet to test the effect of mincut on trees.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tree)\nset.seed(123)\n\ndata = airquality\nrt = tree(Ozone~., data = data,\n          control = tree.control(mincut = 1L, nobs = nrow(data)))\n\nplot(rt)\ntext(rt)\npred = predict(rt, data)\nplot(data$Temp, data$Ozone)\nlines(data$Temp[order(data$Temp)], pred[order(data$Temp)], col = \"red\")\nsqrt(mean((data$Ozone - pred)^2)) # RMSE\n```\n:::\n\n\nTry different mincut parameters and see what happens.\n(Compare the root mean squared error for different mincut parameters and explain what you see.\nCompare predictions for different mincut parameters and explain what happens.)\nWhat was wrong in the snippet above?\n\n\n<div class='webex-solution'><button>Click here to see the solution</button>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tree)\nset.seed(123)\n\ndata = airquality[complete.cases(airquality),]\n\ndoTask = function(mincut){\n  rt = tree(Ozone~., data = data,\n            control = tree.control(mincut = mincut, nobs = nrow(data)))\n\n  pred = predict(rt, data)\n  plot(data$Temp, data$Ozone,\n       main = paste0(\n         \"mincut: \", mincut,\n         \"\\nRMSE: \", round(sqrt(mean((data$Ozone - pred)^2)), 2)\n      )\n  )\n  lines(data$Temp[order(data$Temp)], pred[order(data$Temp)], col = \"red\")\n}\n\nfor(i in c(1, 2, 3, 5, 10, 15, 25, 50, 54, 55, 56, 57, 75, 100)){ doTask(i) }\n```\n\n::: {.cell-output-display}\n![](03-RandomForest_files/figure-html/chunk_chapter4_task_22-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](03-RandomForest_files/figure-html/chunk_chapter4_task_22-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](03-RandomForest_files/figure-html/chunk_chapter4_task_22-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](03-RandomForest_files/figure-html/chunk_chapter4_task_22-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](03-RandomForest_files/figure-html/chunk_chapter4_task_22-5.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](03-RandomForest_files/figure-html/chunk_chapter4_task_22-6.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](03-RandomForest_files/figure-html/chunk_chapter4_task_22-7.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](03-RandomForest_files/figure-html/chunk_chapter4_task_22-8.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](03-RandomForest_files/figure-html/chunk_chapter4_task_22-9.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](03-RandomForest_files/figure-html/chunk_chapter4_task_22-10.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](03-RandomForest_files/figure-html/chunk_chapter4_task_22-11.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](03-RandomForest_files/figure-html/chunk_chapter4_task_22-12.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](03-RandomForest_files/figure-html/chunk_chapter4_task_22-13.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](03-RandomForest_files/figure-html/chunk_chapter4_task_22-14.png){width=672}\n:::\n:::\n\nApproximately at mincut = 15, prediction is the best (mind overfitting). After mincut = 56, the prediction has no information at all and the RMSE stays constant.\n\nMind the complete cases of the airquality data set, that was the error.\n\n</div>\n\n\n:::\n\n\n\n::: {.callout-caution icon=\"false\"}\n#### Question: Random forest\n\nWe will use the following code snippet to explore a random forest:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(randomForest)\nset.seed(123)\n\ndata = airquality[complete.cases(airquality),]\n\nrf = randomForest(Ozone~., data = data)\n\npred = predict(rf, data)\nimportance(rf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        IncNodePurity\nSolar.R      17969.59\nWind         31978.36\nTemp         34176.71\nMonth        10753.73\nDay          15436.47\n```\n:::\n\n```{.r .cell-code}\ncat(\"RMSE: \", sqrt(mean((data$Ozone - pred)^2)), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRMSE:  9.507848 \n```\n:::\n\n```{.r .cell-code}\nplot(data$Temp, data$Ozone)\nlines(data$Temp[order(data$Temp)], pred[order(data$Temp)], col = \"red\")\n```\n\n::: {.cell-output-display}\n![](03-RandomForest_files/figure-html/chunk_chapter4_task_23-1.png){width=672}\n:::\n:::\n\n\nTry different values for the nodesize and mtry and describe how the predictions depend on these parameters.\n\n\n<div class='webex-solution'><button>Click here to see the solution</button>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(randomForest)\nset.seed(123)\n\ndata = airquality[complete.cases(airquality),]\n\n\nfor(nodesize in c(1, 5, 15, 50, 100)){\n  for(mtry in c(1, 3, 5)){\n    rf = randomForest(Ozone~., data = data, mtry = mtry, nodesize = nodesize)\n    \n    pred = predict(rf, data)\n    \n    plot(data$Temp, data$Ozone, main = paste0(\n        \"mtry: \", mtry, \"    nodesize: \", nodesize,\n        \"\\nRMSE: \", round(sqrt(mean((data$Ozone - pred)^2)), 2)\n      )\n    )\n    lines(data$Temp[order(data$Temp)], pred[order(data$Temp)], col = \"red\")\n  }\n}\n```\n\n::: {.cell-output-display}\n![](03-RandomForest_files/figure-html/chunk_chapter4_task_24-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](03-RandomForest_files/figure-html/chunk_chapter4_task_24-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](03-RandomForest_files/figure-html/chunk_chapter4_task_24-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](03-RandomForest_files/figure-html/chunk_chapter4_task_24-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](03-RandomForest_files/figure-html/chunk_chapter4_task_24-5.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](03-RandomForest_files/figure-html/chunk_chapter4_task_24-6.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](03-RandomForest_files/figure-html/chunk_chapter4_task_24-7.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](03-RandomForest_files/figure-html/chunk_chapter4_task_24-8.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](03-RandomForest_files/figure-html/chunk_chapter4_task_24-9.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](03-RandomForest_files/figure-html/chunk_chapter4_task_24-10.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](03-RandomForest_files/figure-html/chunk_chapter4_task_24-11.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](03-RandomForest_files/figure-html/chunk_chapter4_task_24-12.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](03-RandomForest_files/figure-html/chunk_chapter4_task_24-13.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](03-RandomForest_files/figure-html/chunk_chapter4_task_24-14.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](03-RandomForest_files/figure-html/chunk_chapter4_task_24-15.png){width=672}\n:::\n:::\n\n\nHigher numbers for mtry smooth the prediction curve and yield less overfitting. The same holds for the nodesize.\nIn other words: The bigger the nodesize, the smaller the trees and the more bias/less variance.\n\n</div>\n\n\n:::\n",
    "supporting": [
      "03-RandomForest_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}