{
  "hash": "091ca828d66c1913c7d4b553bbcdd56c",
  "result": {
    "markdown": "---\noutput: html_document\neditor_options:\n  chunk_output_type: console\n---\n\n\n# Typical Machine Learning Tasks\n\n## Overview \n\nThere are three types of machine learning tasks:\n\n-   Supervised learning\n-   Unsupervised learning\n-   Reinforcement learning\n\nIn **supervised learning**, you train algorithms using labeled data, what means that you already know the correct answer for a part of the data (the so called *training data*).\n\n**Unsupervised learning** in contrast is a technique, where one does not need to monitor the model or apply labels. Instead, you allow the model to work on its own to discover information.\n\n**Reinforcement learning** is a technique that emulates a game-like situation. The algorithm finds a solution by trial and error and gets either *rewards* or *penalties* for every action. As in games, the goal is to maximize the rewards. We will talk more about this technique on the last day of the course.\n\nFor the moment, we will focus on the first two tasks, supervised and unsupervised learning. To do so, we will begin with a small example. But before you start with the code, here is a video to prepare you for what we will do in the class:\n\n\n<iframe width=\"560\" height=\"315\"\n  src=\"https://www.youtube.com/embed/1AVrWvRvfxs\"\n  frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media;\n  gyroscope; picture-in-picture\" allowfullscreen>\n  </iframe>\n\n\n### Questions\n\n::: {.webex-check .webex-box}\nIn ML, predictors (or the explaining variables) are often called features: <select class='webex-select'><option value='blank'></option><option value='answer'>TRUE</option><option value=''>FALSE</option></select>\n\nIn supervised learning the response (y) and the predictors (x) are known: <select class='webex-select'><option value='blank'></option><option value='answer'>TRUE</option><option value=''>FALSE</option></select>\n\nIn unsupervised learning, only the predictors are known: <select class='webex-select'><option value='blank'></option><option value='answer'>TRUE</option><option value=''>FALSE</option></select>\n\nIn reinforcement learning an agent (ML model) is trained by interacting with an environment: <select class='webex-select'><option value='blank'></option><option value='answer'>TRUE</option><option value=''>FALSE</option></select>\n\n\nHave a look at the two textbooks on ML (Elements of statistical learning and introduction to statistical learning) in our further readings at the end of the GRIPS course - which of the following statements is true? <div class='webex-radiogroup' id='radio_LLPFYVWQCZ'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_LLPFYVWQCZ\" value=\"answer\"></input> <span>Both books can be downloaded for free.</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_LLPFYVWQCZ\" value=\"\"></input> <span>Higher model complexity is always better for predicting.</span></label></div>\n\n:::\n\n\n## Unsupervised Learning\n\nIn unsupervised learning, we want to identify patterns in data without having any examples (supervision) about what the correct patterns / classes are. As an example, consider the iris data set. Here, we have 150 observations of 4 floral traits:\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris = datasets::iris\ncolors = hcl.colors(3)\ntraits = as.matrix(iris[,1:4])\nspecies = iris$Species\nimage(y = 1:4, x = 1:length(species) , z = traits,\n      ylab = \"Floral trait\", xlab = \"Individual\")\nsegments(50.5, 0, 50.5, 5, col = \"black\", lwd = 2)\nsegments(100.5, 0, 100.5, 5, col = \"black\", lwd = 2)\n```\n\n::: {.cell-output-display}\n![Trait distributions of iris dataset](A2-MachineLearningTasks_files/figure-html/chunk-chapter3-1-iris-plot-1.png){width=960}\n:::\n:::\n\n\nThe observations are from 3 species and indeed those species tend to have different traits, meaning that the observations form 3 clusters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(traits, pch = as.integer(species), col = colors[as.integer(species)])\n```\n\n::: {.cell-output-display}\n![Scatterplots for trait-trait combinations.](A2-MachineLearningTasks_files/figure-html/chunk-chapter3-2-1.png){width=672}\n:::\n:::\n\n\nHowever, imagine we don't know what species are, what is basically the situation in which people in the antique have been. The people just noted that some plants have different flowers than others, and decided to give them different names. This kind of process is what unsupervised learning does.\n\n### Hierarchical Clustering\n\nA cluster refers to a collection of data points aggregated together because of certain similarities.\n\nIn hierarchical clustering, a hierarchy (tree) between data points is built.\n\n-   Agglomerative: Start with each data point in their own cluster, merge them up hierarchically.\n-   Divisive: Start with all data points in one cluster, and split hierarchically.\n\nMerges / splits are done according to linkage criterion, which measures distance between (potential) clusters. Cut the tree at a certain height to get clusters.\n\nHere an example\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\n\n#Reminder: traits = as.matrix(iris[,1:4]).\n\nd = dist(traits)\nhc = hclust(d, method = \"complete\")\n\nplot(hc, main=\"\")\nrect.hclust(hc, k = 3)  # Draw rectangles around the branches.\n```\n\n::: {.cell-output-display}\n![Results of hierarchical clustering. Red rectangle is drawn around the corresponding clusters.](A2-MachineLearningTasks_files/figure-html/chunk-chapter3-3-1.png){width=672}\n:::\n:::\n\n\nSame plot, but with colors for true species identity\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ape)\n\nplot(as.phylo(hc),\n     tip.color = colors[as.integer(species)],\n     direction = \"downwards\")\n```\n\n::: {.cell-output-display}\n![Results of hierarchical clustering. Colors correspond to the three species classes.](A2-MachineLearningTasks_files/figure-html/chunk-chapter3-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\nhcRes3 = cutree(hc, k = 3)   #Cut a dendrogram tree into groups.\n```\n:::\n\n\nCalculate confusion matrix. Note we are switching labels here so that it fits to the species.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmp = hcRes3\ntmp[hcRes3 == 2] = 3\ntmp[hcRes3 == 3] = 2\nhcRes3 = tmp\ntable(hcRes3, species)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\nTable: Confusion matrix for predicted and observed species classes.\n\n| setosa| versicolor| virginica|\n|------:|----------:|---------:|\n|     50|          0|         0|\n|      0|         27|         1|\n|      0|         23|        49|\n:::\n:::\n\n\nNote that results might change if you choose a different agglomeration method, distance metric or scale of your variables. Compare, e.g. to this example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhc = hclust(d, method = \"ward.D2\")\n\nplot(as.phylo(hc),\n     tip.color = colors[as.integer(species)],\n     direction = \"downwards\")\n```\n\n::: {.cell-output-display}\n![Results of hierarchical clustering. Colors correspond to the three species classes. Different agglomeration method](A2-MachineLearningTasks_files/figure-html/chunk-chapter3-6-a-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhcRes3 = cutree(hc, k = 3)   #Cut a dendrogram tree into groups.\ntable(hcRes3, species)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\nTable: Confusion matrix for predicted and observed species classes.\n\n| setosa| versicolor| virginica|\n|------:|----------:|---------:|\n|     50|          0|         0|\n|      0|         49|        15|\n|      0|          1|        35|\n:::\n:::\n\n\nWhich method is best?  <select class='webex-select'><option value='blank'></option><option value=''>first</option><option value='answer'>second</option></select>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dendextend)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\n\nmethods = c(\"ward.D\", \"single\", \"complete\", \"average\",\n             \"mcquitty\", \"median\", \"centroid\", \"ward.D2\")\nout = dendlist()   # Create a dendlist object from several dendrograms.\nfor(method in methods){\n  res = hclust(d, method = method)\n  out = dendlist(out, as.dendrogram(res))\n}\nnames(out) = methods\nprint(out)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$ward.D\n'dendrogram' with 2 branches and 150 members total, at height 199.6205 \n\n$single\n'dendrogram' with 2 branches and 150 members total, at height 1.640122 \n\n$complete\n'dendrogram' with 2 branches and 150 members total, at height 7.085196 \n\n$average\n'dendrogram' with 2 branches and 150 members total, at height 4.062683 \n\n$mcquitty\n'dendrogram' with 2 branches and 150 members total, at height 4.497283 \n\n$median\n'dendrogram' with 2 branches and 150 members total, at height 2.82744 \n\n$centroid\n'dendrogram' with 2 branches and 150 members total, at height 2.994307 \n\n$ward.D2\n'dendrogram' with 2 branches and 150 members total, at height 32.44761 \n\nattr(,\"class\")\n[1] \"dendlist\"\n```\n:::\n\n```{.r .cell-code}\nget_ordered_3_clusters = function(dend){\n  # order.dendrogram function returns the order (index)\n  # or the \"label\" attribute for the leaves.\n  # cutree: Cut the tree (dendrogram) into groups of data.\n  cutree(dend, k = 3)[order.dendrogram(dend)]\n}\ndend_3_clusters = lapply(out, get_ordered_3_clusters)\n\n# Calculate Fowlkes-Mallows Index (determine the similarity between clusterings)\ncompare_clusters_to_iris = function(clus){\n  FM_index(clus, rep(1:3, each = 50), assume_sorted_vectors = TRUE)\n}\n\nclusters_performance = sapply(dend_3_clusters, compare_clusters_to_iris)\ndotchart(sort(clusters_performance), xlim = c(0.3, 1),\n         xlab = \"Fowlkes-Mallows index\",\n         main = \"Performance of linkage methods\n         in detecting the 3 species \\n in our example\",\n         pch = 19)\n```\n\n::: {.cell-output-display}\n![](A2-MachineLearningTasks_files/figure-html/chunk_chapter3_8-1.png){width=672}\n:::\n:::\n\n\nWe might conclude that ward.D2 works best here. However, as we will learn later, optimizing the method without a hold-out for testing implies that our model may be overfitting. We should check this using cross-validation.\n\n### K-means Clustering\n\nAnother example for an unsupervised learning algorithm is k-means clustering, one of the simplest and most popular unsupervised machine learning algorithms.\n\nTo start with the algorithm, you first have to specify the number of clusters (for our example the number of species). Each cluster has a centroid, which is the assumed or real location representing the center of the cluster (for our example this would be how an average plant of a specific species would look like). The algorithm starts by randomly putting centroids somewhere. Afterwards each data point is assigned to the respective cluster that raises the overall in-cluster sum of squares (variance) related to the distance to the centroid least of all. After the algorithm has placed all data points into a cluster the centroids get updated. By iterating this procedure until the assignment doesn't change any longer, the algorithm can find the (locally) optimal centroids and the data points belonging to this cluster. Note that results might differ according to the initial positions of the centroids. Thus several (locally) optimal solutions might be found.\n\nThe \"k\" in K-means refers to the number of clusters and the 'means' refers to averaging the data-points to find the centroids.\n\nA typical pipeline for using k-means clustering looks the same as for other algorithms. After having visualized the data, we fit a model, visualize the results and have a look at the performance by use of the confusion matrix. By setting a fixed seed, we can ensure that results are reproducible.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\n\n#Reminder: traits = as.matrix(iris[,1:4]).\n\nkc = kmeans(traits, 3)\nprint(kc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nK-means clustering with 3 clusters of sizes 50, 62, 38\n\nCluster means:\n  Sepal.Length Sepal.Width Petal.Length Petal.Width\n1     5.006000    3.428000     1.462000    0.246000\n2     5.901613    2.748387     4.393548    1.433871\n3     6.850000    3.073684     5.742105    2.071053\n\nClustering vector:\n  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n [75] 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 3 3 3 3 2 3 3 3 3\n[112] 3 3 2 2 3 3 3 3 2 3 2 3 2 3 3 2 2 3 3 3 3 3 2 3 3 3 3 2 3 3 3 2 3 3 3 2 3\n[149] 3 2\n\nWithin cluster sum of squares by cluster:\n[1] 15.15100 39.82097 23.87947\n (between_SS / total_SS =  88.4 %)\n\nAvailable components:\n\n[1] \"cluster\"      \"centers\"      \"totss\"        \"withinss\"     \"tot.withinss\"\n[6] \"betweenss\"    \"size\"         \"iter\"         \"ifault\"      \n```\n:::\n:::\n\n\n*Visualizing the results.* Color codes true species identity, symbol shows cluster result.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(iris[c(\"Sepal.Length\", \"Sepal.Width\")],\n     col =  colors[as.integer(species)], pch = kc$cluster)\npoints(kc$centers[, c(\"Sepal.Length\", \"Sepal.Width\")],\n       col = colors, pch = 1:3, cex = 3)\n```\n\n::: {.cell-output-display}\n![](A2-MachineLearningTasks_files/figure-html/chunk_chapter3_10-1.png){width=672}\n:::\n:::\n\n\nWe see that there are are some discrepancies. Confusion matrix:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(iris$Species, kc$cluster)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            \n              1  2  3\n  setosa     50  0  0\n  versicolor  0 48  2\n  virginica   0 14 36\n```\n:::\n:::\n\n\nIf you want to animate the clustering process, you could run\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(animation)\n\nsaveGIF(kmeans.ani(x = traits[,1:2], col = colors),\n        interval = 1, ani.width = 800, ani.height = 800)\n```\n:::\n\n\n**Elbow technique** to determine the probably best suited number of clusters:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\n\ngetSumSq = function(k){ kmeans(traits, k, nstart = 25)$tot.withinss }\n\n#Perform algorithm for different cluster sizes and retrieve variance.\niris.kmeans1to10 = sapply(1:10, getSumSq)\nplot(1:10, iris.kmeans1to10, type = \"b\", pch = 19, frame = FALSE,\n     xlab = \"Number of clusters K\",\n     ylab = \"Total within-clusters sum of squares\",\n     col = c(\"black\", \"red\", rep(\"black\", 8)))\n```\n\n::: {.cell-output-display}\n![](A2-MachineLearningTasks_files/figure-html/chunk_chapter3_13-1.png){width=672}\n:::\n:::\n\n\nOften, one is interested in sparse models. Furthermore, higher k than necessary tends to overfitting. At the kink in the picture, the sum of squares dropped enough and k is still low enough. But keep in mind, this is only a rule of thumb and might be wrong in some special cases.\n\n### Density-based Clustering\n\nDetermine the affinity of a data point according to the affinity of its k nearest neighbors. This is a very general description as there are many ways to do so.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Reminder: traits = as.matrix(iris[,1:4]).\n\nlibrary(dbscan)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dbscan'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:stats':\n\n    as.dendrogram\n```\n:::\n\n```{.r .cell-code}\nset.seed(123)\n\nkNNdistplot(traits, k = 4)   # Calculate and plot k-nearest-neighbor distances.\nabline(h = 0.4, lty = 2)\n```\n\n::: {.cell-output-display}\n![](A2-MachineLearningTasks_files/figure-html/chunk_chapter3_14-1.png){width=672}\n:::\n\n```{.r .cell-code}\ndc = dbscan(traits, eps = 0.4, minPts = 6)\nprint(dc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDBSCAN clustering for 150 objects.\nParameters: eps = 0.4, minPts = 6\nUsing euclidean distances and borderpoints = TRUE\nThe clustering contains 4 cluster(s) and 32 noise points.\n\n 0  1  2  3  4 \n32 46 36 14 22 \n\nAvailable fields: cluster, eps, minPts, dist, borderPoints\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(factoextra)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfviz_cluster(dc, traits, geom = \"point\", ggtheme = theme_light())\n```\n\n::: {.cell-output-display}\n![](A2-MachineLearningTasks_files/figure-html/chunk_chapter3_16-1.png){width=672}\n:::\n:::\n\n\n### Model-based Clustering\n\nThe last class of methods for unsupervised clustering are so-called *model-based clustering methods*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mclust)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nPackage 'mclust' version 6.0.0\nType 'citation(\"mclust\")' for citing this R package in publications.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmb = Mclust(traits)\n```\n:::\n\n\nMclust automatically compares a number of candidate models (clusters, shape) according to BIC (The BIC is a criterion for classifying algorithms depending their prediction quality and their usage of parameters). We can look at the selected model via:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmb$G # Two clusters.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\nmb$modelName # > Ellipsoidal, equal shape.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"VEV\"\n```\n:::\n:::\n\n\nWe see that the algorithm prefers having 2 clusters. For better comparability to the other 2 methods, we will override this by setting:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmb3 = Mclust(traits, 3)\n```\n:::\n\n\nResult in terms of the predicted densities for 3 clusters\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mb3, \"density\")\n```\n\n::: {.cell-output-display}\n![](A2-MachineLearningTasks_files/figure-html/chunk_chapter3_21-1.png){width=672}\n:::\n:::\n\n\nPredicted clusters:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mb3, what=c(\"classification\"), add = T)\n```\n\n::: {.cell-output-display}\n![](A2-MachineLearningTasks_files/figure-html/chunk_chapter3_22-1.png){width=672}\n:::\n:::\n\n\nConfusion matrix:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(iris$Species, mb3$classification)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n| setosa| versicolor| virginica|\n|------:|----------:|---------:|\n|     50|          0|         0|\n|      0|         49|        15|\n|      0|          1|        35|\n:::\n:::\n\n\n### Ordination\n\nOrdination is used in explorative analysis and compared to clustering, similar objects are ordered together. So there is a relationship between clustering and ordination. Here a PCA ordination on on the iris data set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npcTraits = prcomp(traits, center = TRUE, scale. = TRUE)\nbiplot(pcTraits, xlim = c(-0.25, 0.25), ylim = c(-0.25, 0.25))\n```\n\n::: {.cell-output-display}\n![](A2-MachineLearningTasks_files/figure-html/chunk_chapter3_24-1.png){width=672}\n:::\n:::\n\n\nYou can cluster the results of this ordination, ordinate before clustering, or superimpose one on the other.\n\n### Exercise\n\n::: {.callout-caution icon=\"false\"}\n#### Task\n\nGo through the 4(5) algorithms above, and check if they are sensitive (i.e. if results change) if you scale the input features (= predictors), instead of using the raw data. Discuss in your group: Which is more appropriate for this analysis and/or in general: Scaling or not scaling?\n\n\n<div class='webex-solution'><button>Click here to see the solution for hierarchical clustering</button>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dendextend)\n\nmethods = c(\"ward.D\", \"single\", \"complete\", \"average\",\n            \"mcquitty\", \"median\", \"centroid\", \"ward.D2\")\n\ncluster_all_methods = function(distances){\n  out = dendlist()\n  for(method in methods){\n    res = hclust(distances, method = method)\n    out = dendlist(out, as.dendrogram(res))\n  }\n  names(out) = methods\n\n  return(out)\n}\n\nget_ordered_3_clusters = function(dend){\n  return(cutree(dend, k = 3)[order.dendrogram(dend)])\n}\n\ncompare_clusters_to_iris = function(clus){\n  return(FM_index(clus, rep(1:3, each = 50), assume_sorted_vectors = TRUE))\n}\n\ndo_clustering = function(traits, scale = FALSE){\n  set.seed(123)\n  headline = \"Performance of linkage methods\\nin detecting the 3 species\\n\"\n\n  if(scale){\n    traits = scale(traits)  # Do scaling on copy of traits.\n    headline = paste0(headline, \"Scaled\")\n  }else{ headline = paste0(headline, \"Not scaled\") }\n\n  distances = dist(traits)\n  out = cluster_all_methods(distances)\n  dend_3_clusters = lapply(out, get_ordered_3_clusters)\n  clusters_performance = sapply(dend_3_clusters, compare_clusters_to_iris)\n  dotchart(sort(clusters_performance), xlim = c(0.3,1),\n           xlab = \"Fowlkes-Mallows index\",\n           main = headline,\n           pch = 19)\n}\n\ntraits = as.matrix(iris[,1:4])\n\n# Do clustering on unscaled data.\ndo_clustering(traits, FALSE)\n```\n\n::: {.cell-output-display}\n![](A2-MachineLearningTasks_files/figure-html/chunk_chapter3_task_0-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Do clustering on scaled data.\ndo_clustering(traits, TRUE)\n```\n\n::: {.cell-output-display}\n![](A2-MachineLearningTasks_files/figure-html/chunk_chapter3_task_0-2.png){width=672}\n:::\n:::\n\n\nIt seems that scaling is harmful for hierarchical clustering. But this might be a deception. **Be careful:** If you have data on different units or magnitudes, scaling is definitely useful! Otherwise variables with higher values get higher influence.\n\n\n</div>\n\n\n\n\n<div class='webex-solution'><button>Click here to see the solution for K-means</button>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndo_clustering = function(traits, scale = FALSE){\n  set.seed(123)\n\n  if(scale){\n    traits = scale(traits)  # Do scaling on copy of traits.\n    headline = \"K-means Clustering\\nScaled\\nSum of all tries: \"\n  }else{ headline = \"K-means Clustering\\nNot scaled\\nSum of all tries: \" }\n\n  getSumSq = function(k){ kmeans(traits, k, nstart = 25)$tot.withinss }\n  iris.kmeans1to10 = sapply(1:10, getSumSq)\n\n  headline = paste0(headline, round(sum(iris.kmeans1to10), 2))\n\n  plot(1:10, iris.kmeans1to10, type = \"b\", pch = 19, frame = FALSE,\n       main = headline,\n       xlab = \"Number of clusters K\",\n       ylab = \"Total within-clusters sum of squares\",\n       col = c(\"black\", \"red\", rep(\"black\", 8)) )\n}\n\ntraits = as.matrix(iris[,1:4])\n\n# Do clustering on unscaled data.\ndo_clustering(traits, FALSE)\n```\n\n::: {.cell-output-display}\n![](A2-MachineLearningTasks_files/figure-html/chunk_chapter3_task_1-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Do clustering on scaled data.\ndo_clustering(traits, TRUE)\n```\n\n::: {.cell-output-display}\n![](A2-MachineLearningTasks_files/figure-html/chunk_chapter3_task_1-2.png){width=672}\n:::\n:::\n\n\nIt seems that scaling is harmful for K-means clustering. But this might be a deception. <strong>*Be careful:*</strong> If you have data on different units or magnitudes, scaling is definitely useful! Otherwise variables with higher values get higher influence.\n\n\n</div>\n\n\n\n<div class='webex-solution'><button>Click here to see the solution for density-based clustering</button>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dbscan)\n\ncorrect = as.factor(iris[,5])\n# Start at 1. Noise points will get 0 later.\nlevels(correct) = 1:length(levels(correct))\ncorrect\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n [75] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3\n[112] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n[149] 3 3\nLevels: 1 2 3\n```\n:::\n\n```{.r .cell-code}\ndo_clustering = function(traits, scale = FALSE){\n  set.seed(123)\n\n  if(scale){ traits = scale(traits) } # Do scaling on copy of traits.\n\n  #####\n  # Play around with the parameters \"eps\" and \"minPts\" on your own!\n  #####\n  dc = dbscan(traits, eps = 0.41, minPts = 4)\n\n  labels = as.factor(dc$cluster)\n  noise = sum(dc$cluster == 0)\n  levels(labels) = c(\"noise\", 1:( length(levels(labels)) - 1))\n\n  tbl = table(correct, labels)\n  correct_classified = 0\n  for(i in 1:length(levels(correct))){\n    correct_classified = correct_classified + tbl[i, i + 1]\n  }\n\n  cat( if(scale){ \"Scaled\" }else{ \"Not scaled\" }, \"\\n\\n\" )\n  cat(\"Confusion matrix:\\n\")\n  print(tbl)\n  cat(\"\\nCorrect classified points: \", correct_classified, \" / \", length(iris[,5]))\n  cat(\"\\nSum of noise points: \", noise, \"\\n\")\n}\n\ntraits = as.matrix(iris[,1:4])\n\n# Do clustering on unscaled data.\ndo_clustering(traits, FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNot scaled \n\nConfusion matrix:\n       labels\ncorrect noise  1  2  3  4\n      1     3 47  0  0  0\n      2     5  0 38  3  4\n      3    17  0  0 33  0\n\nCorrect classified points:  118  /  150\nSum of noise points:  25 \n```\n:::\n\n```{.r .cell-code}\n# Do clustering on scaled data.\ndo_clustering(traits, TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nScaled \n\nConfusion matrix:\n       labels\ncorrect noise  1  2  3  4\n      1     9 41  0  0  0\n      2    14  0 36  0  0\n      3    36  0  1  4  9\n\nCorrect classified points:  81  /  150\nSum of noise points:  59 \n```\n:::\n:::\n\n\nIt seems that scaling is harmful for density based clustering. But this might be a deception. <strong>*Be careful:*</strong> If you have data on different units or magnitudes, scaling is definitely useful! Otherwise variables with higher values get higher influence.\n\n\n</div>\n\n\n\n<div class='webex-solution'><button>Click here to see the solution for model-based clustering</button>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mclust)\n\ndo_clustering = function(traits, scale = FALSE){\n  set.seed(123)\n\n  if(scale){ traits = scale(traits) } # Do scaling on copy of traits.\n\n  mb3 = Mclust(traits, 3)\n\n  tbl = table(iris$Species, mb3$classification)\n\n  cat( if(scale){ \"Scaled\" }else{ \"Not scaled\" }, \"\\n\\n\" )\n  cat(\"Confusion matrix:\\n\")\n  print(tbl)\n  cat(\"\\nCorrect classified points: \", sum(diag(tbl)), \" / \", length(iris[,5]))\n}\n\ntraits = as.matrix(iris[,1:4])\n\n# Do clustering on unscaled data.\ndo_clustering(traits, FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNot scaled \n\nConfusion matrix:\n            \n              1  2  3\n  setosa     50  0  0\n  versicolor  0 45  5\n  virginica   0  0 50\n\nCorrect classified points:  145  /  150\n```\n:::\n\n```{.r .cell-code}\n# Do clustering on scaled data.\ndo_clustering(traits, TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nScaled \n\nConfusion matrix:\n            \n              1  2  3\n  setosa     50  0  0\n  versicolor  0 45  5\n  virginica   0  0 50\n\nCorrect classified points:  145  /  150\n```\n:::\n:::\n\n\nFor model based clustering, scaling does not matter.\n\n\n</div>\n\n\n\n<div class='webex-solution'><button>Click here to see the solution for ordination</button>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntraits = as.matrix(iris[,1:4])\n\nbiplot(prcomp(traits, center = TRUE, scale. = TRUE),\n       main = \"Use integrated scaling\")\n```\n\n::: {.cell-output-display}\n![](A2-MachineLearningTasks_files/figure-html/chunk_chapter3_task_4-1.png){width=672}\n:::\n\n```{.r .cell-code}\nbiplot(prcomp(scale(traits), center = FALSE, scale. = FALSE),\n       main = \"Scale explicitly\")\n```\n\n::: {.cell-output-display}\n![](A2-MachineLearningTasks_files/figure-html/chunk_chapter3_task_4-2.png){width=672}\n:::\n\n```{.r .cell-code}\nbiplot(prcomp(traits, center = FALSE, scale. = FALSE),\n       main = \"No scaling at all\")\n```\n\n::: {.cell-output-display}\n![](A2-MachineLearningTasks_files/figure-html/chunk_chapter3_task_4-3.png){width=672}\n:::\n:::\n\n\nFor PCA ordination, scaling matters. Because we are interested in directions of maximal variance, all parameters should be scaled, or the one with the highest values might dominate all others.\n\n\n</div>\n\n\n:::\n\n\n## Supervised Learning\n\nThe two most prominent branches of supervised learning are regression and classification. Fundamentally, classification is about predicting a label and regression is about predicting a quantity. The following video explains that in more depth:\n\n\n<iframe width=\"560\" height=\"315\"\n  src=\"https://www.youtube.com/embed/i04Pfrb71vk\"\n  frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media;\n  gyroscope; picture-in-picture\" allowfullscreen>\n  </iframe>\n\n\n### Regression\n\nThe random forest (RF) algorithm is possibly the most widely used machine learning algorithm and can be used for regression and classification. We will talk more about the algorithm later.\n\nFor the moment, we want to go through a typical workflow for a supervised regression: First, we visualize the data. Next, we fit the model and lastly we visualize the results. We will again use the iris data set that we used before. The goal is now to predict Sepal.Length based on the information about the other variables (including species).\n\nFitting the model:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(randomForest)\nset.seed(123)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nm1 = randomForest(Sepal.Length ~ ., data = iris)   # ~.: Against all others.\n# str(m1)\n# m1$type\n# predict(m1)\nprint(m1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\n randomForest(formula = Sepal.Length ~ ., data = iris) \n               Type of random forest: regression\n                     Number of trees: 500\nNo. of variables tried at each split: 1\n\n          Mean of squared residuals: 0.1364625\n                    % Var explained: 79.97\n```\n:::\n:::\n\n\nVisualization of the results:\n\n\n::: {.cell}\n\n```{.r .cell-code}\noldpar = par(mfrow = c(1, 2))\nplot(predict(m1), iris$Sepal.Length, xlab = \"Predicted\", ylab = \"Observed\")\nabline(0, 1)\nvarImpPlot(m1)\n```\n\n::: {.cell-output-display}\n![](A2-MachineLearningTasks_files/figure-html/chunk_chapter3_28-1.png){width=672}\n:::\n\n```{.r .cell-code}\npar(oldpar)\n```\n:::\n\n\nTo understand the structure of a random forest in more detail, we can use a package from GitHub.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreprtree:::plot.getTree(m1, iris)\n```\n\n::: {.cell-output-display}\n![](A2-MachineLearningTasks_files/figure-html/chunk_chapter3_29-1.png){width=672}\n:::\n:::\n\n\nHere, one of the regression trees is shown.\n\n### Classification\n\nWith the random forest, we can also do classification. The steps are the same as for regression tasks, but we can additionally see how well it performed by looking at the confusion matrix. Each row of this matrix contains the instances in a predicted class and each column represents the instances in the actual class. Thus the diagonals are the correctly predicted classes and the off-diagonal elements are the falsely classified elements.\n\nFitting the model:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\nlibrary(randomForest)\nm1 = randomForest(Species ~ ., data = iris)\nprint(m1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\n randomForest(formula = Species ~ ., data = iris) \n               Type of random forest: classification\n                     Number of trees: 500\nNo. of variables tried at each split: 2\n\n        OOB estimate of  error rate: 4.67%\nConfusion matrix:\n           setosa versicolor virginica class.error\nsetosa         50          0         0        0.00\nversicolor      0         47         3        0.06\nvirginica       0          4        46        0.08\n```\n:::\n\n```{.r .cell-code}\nvarImpPlot(m1)\n```\n\n::: {.cell-output-display}\n![](A2-MachineLearningTasks_files/figure-html/chunk_chapter3_30-1.png){width=672}\n:::\n:::\n\n\nVisualizing one of the fitted models:\n\n\n::: {.cell}\n\n```{.r .cell-code}\noldpar = par(mfrow = c(1, 2))\nreprtree:::plot.getTree(m1, iris)\n```\n\n::: {.cell-output-display}\n![](A2-MachineLearningTasks_files/figure-html/chunk_chapter3_31-1.png){width=672}\n:::\n:::\n\n\nVisualizing results ecologically:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(1, 2))\nplot(iris$Petal.Width, iris$Petal.Length, col = iris$Species, main = \"Observed\")\nplot(iris$Petal.Width, iris$Petal.Length, col = predict(m1), main = \"Predicted\")\n```\n\n::: {.cell-output-display}\n![](A2-MachineLearningTasks_files/figure-html/chunk_chapter3_32-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npar(oldpar)   #Reset par.\n```\n:::\n\n\nConfusion matrix:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(predict(m1), iris$Species)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n|           | setosa| versicolor| virginica|\n|:----------|------:|----------:|---------:|\n|setosa     |     50|          0|         0|\n|versicolor |      0|         47|         4|\n|virginica  |      0|          3|        46|\n:::\n:::\n\n\n### Questions\n\n\nUsing a random forest on the iris dataset, which parameter would be more important (remember there is a function to check this) to predict Petal.Width? <div class='webex-radiogroup' id='radio_VYKQKDXEIW'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_VYKQKDXEIW\" value=\"answer\"></input> <span>Species.</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_VYKQKDXEIW\" value=\"\"></input> <span>Sepal.Width.</span></label></div>\n",
    "supporting": [
      "A2-MachineLearningTasks_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}