{
  "hash": "b46027c79931a06313b4db3d23b36cbd",
  "result": {
    "engine": "knitr",
    "markdown": "---\noutput: html_document\neditor_options:\n  chunk_output_type: console\n---\n\n\n\n\n# Distance-based Algorithms\n\nIn this chapter, we introduce support-vector machines (SVM) and other distance-based methods **Hint**: Distance-based models need scaling!\n\n## K-Nearest-Neighbor\n\nK-nearest-neighbor (kNN) is a simple algorithm that stores all the available cases and classifies the new data based on a similarity measure. It is mostly used to classify a data point based on how its $k$ nearest neighbors are classified.\n\nLet us first see an example:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx = scale(iris[,1:4])\ny = iris[,5]\nplot(x[-100,1], x[-100, 3], col = y)\npoints(x[100,1], x[100, 3], col = \"blue\", pch = 18, cex = 1.3)\n```\n\n::: {.cell-output-display}\n![](B2-Distance_files/figure-html/chunk_chapter4_32-1.png){width=672}\n:::\n:::\n\n\n\n\nWhich class would you decide for the blue point? What are the classes of the nearest points? Well, this procedure is used by the k-nearest-neighbors classifier and thus there is actually no \"real\" learning in a k-nearest-neighbors classification.\n\nFor applying a k-nearest-neighbors classification, we first have to scale the data set, because we deal with distances and want the same influence of all predictors. Imagine one variable has values from -10.000 to 10.000 and another from -1 to 1. Then the influence of the first variable on the distance to the other points is much stronger than the influence of the second variable. On the iris data set, we have to split the data into training and test set on our own. Then we will follow the usual pipeline.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata = iris\ndata[,1:4] = apply(data[,1:4],2, scale)\nindices = sample.int(nrow(data), 0.7*nrow(data))\ntrain = data[indices,]\ntest = data[-indices,]\n```\n:::\n\n\n\n\nFit model and create predictions:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(kknn)\nset.seed(123)\n\nknn = kknn(Species~., train = train, test = test)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in model.matrix.default(mt2, test, contrasts.arg = contrasts.arg):\nvariable 'Species' is absent, its contrast will be ignored\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(knn)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nkknn(formula = Species ~ ., train = train, test = test)\n\nResponse: \"nominal\"\n          fit prob.setosa prob.versicolor prob.virginica\n1      setosa   1.0000000       0.0000000      0.0000000\n2      setosa   1.0000000       0.0000000      0.0000000\n3      setosa   1.0000000       0.0000000      0.0000000\n4      setosa   1.0000000       0.0000000      0.0000000\n5      setosa   1.0000000       0.0000000      0.0000000\n6      setosa   1.0000000       0.0000000      0.0000000\n7      setosa   1.0000000       0.0000000      0.0000000\n8      setosa   1.0000000       0.0000000      0.0000000\n9      setosa   1.0000000       0.0000000      0.0000000\n10     setosa   1.0000000       0.0000000      0.0000000\n11     setosa   1.0000000       0.0000000      0.0000000\n12     setosa   1.0000000       0.0000000      0.0000000\n13 versicolor   0.3994841       0.6005159      0.0000000\n14     setosa   1.0000000       0.0000000      0.0000000\n15     setosa   1.0000000       0.0000000      0.0000000\n16 versicolor   0.0000000       0.8991814      0.1008186\n17 versicolor   0.0000000       0.9148730      0.0851270\n18 versicolor   0.0000000       0.8991814      0.1008186\n19 versicolor   0.0000000       1.0000000      0.0000000\n20 versicolor   0.0000000       1.0000000      0.0000000\n21 versicolor   0.0000000       1.0000000      0.0000000\n22 versicolor   0.0000000       1.0000000      0.0000000\n23 versicolor   0.0000000       1.0000000      0.0000000\n24 versicolor   0.0000000       1.0000000      0.0000000\n25 versicolor   0.0000000       1.0000000      0.0000000\n26 versicolor   0.0000000       1.0000000      0.0000000\n27  virginica   0.0000000       0.2468115      0.7531885\n28  virginica   0.0000000       0.0000000      1.0000000\n29  virginica   0.0000000       0.0000000      1.0000000\n30  virginica   0.0000000       0.0156916      0.9843084\n31  virginica   0.0000000       0.1008186      0.8991814\n32  virginica   0.0000000       0.2216956      0.7783044\n33  virginica   0.0000000       0.4420312      0.5579688\n34  virginica   0.0000000       0.0000000      1.0000000\n35  virginica   0.0000000       0.0000000      1.0000000\n36  virginica   0.0000000       0.0000000      1.0000000\n37 versicolor   0.0000000       0.7419919      0.2580081\n38  virginica   0.0000000       0.0000000      1.0000000\n39 versicolor   0.0000000       0.5379425      0.4620575\n40  virginica   0.0000000       0.0000000      1.0000000\n41  virginica   0.0000000       0.2468115      0.7531885\n42  virginica   0.0000000       0.0000000      1.0000000\n43  virginica   0.0000000       0.0000000      1.0000000\n44  virginica   0.0000000       0.0851270      0.9148730\n45  virginica   0.0000000       0.4528155      0.5471845\n```\n\n\n:::\n\n```{.r .cell-code}\ntable(test$Species, fitted(knn))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            \n             setosa versicolor virginica\n  setosa         14          1         0\n  versicolor      0         11         0\n  virginica       0          2        17\n```\n\n\n:::\n:::\n\n\n\n\n| Hyperparameter | Explanation |\n|----|----|\n| kernel | Kernel that should be used. Kernel is used to bring the features into a feature space where the problem/task is easier to solve |\n| k | Number of neighbors used to calculate the response |\n\n## Support Vector Machines (SVMs)\n\nSupport vectors machines have a different approach. They try to divide the predictor space into sectors for each class. To do so, a support-vector machine fits the parameters of a hyperplane (a $n-1$ dimensional subspace in a $n$-dimensional space) in the predictor space by optimizing the distance between the hyperplane and the nearest point from each class.\n\nFitting a support-vector machine:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(e1071)\n\ndata = iris\ndata[,1:4] = apply(data[,1:4], 2, scale)\nindices = sample.int(nrow(data), 0.7*nrow(data))\ntrain = data[indices,]\ntest = data[-indices,]\n\nsm = svm(Species~., data = train, kernel = \"linear\")\npred = predict(sm, newdata = test)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\noldpar = par(mfrow = c(1, 2))\nplot(test$Sepal.Length, test$Petal.Length,\n     col =  pred, main = \"predicted\")\nplot(test$Sepal.Length, test$Petal.Length,\n     col =  test$Species, main = \"observed\")\n```\n\n::: {.cell-output-display}\n![](B2-Distance_files/figure-html/chunk_chapter4_36-1.png){width=672}\n:::\n\n```{.r .cell-code}\npar(oldpar)\n\nmean(pred == test$Species) # Accuracy.\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.9777778\n```\n\n\n:::\n:::\n\n\n\n\nSupport-vector machines can only work on linearly separable problems. (A problem is called linearly separable if there exists at least one line in the plane with all of the points of one class on one side of the hyperplane and all the points of the others classes on the other side).\n\nIf this is not possible, we however, can use the so called *kernel trick*, which maps the predictor space into a (higher dimensional) space in which the problem is linear separable. After having identified the boundaries in the higher-dimensional space, we can project them back into the original dimensions.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx1 = seq(-3, 3, length.out = 100)\nx2 = seq(-3, 3, length.out = 100)\nX = expand.grid(x1, x2)\ny = apply(X, 1, function(t) exp(-t[1]^2 - t[2]^2))\ny = ifelse(1/(1+exp(-y)) < 0.62, 0, 1)\n\nimage(matrix(y, 100, 100))\nanimation::saveGIF(\n  {\n    for(i in c(\"truth\", \"linear\", \"radial\", \"sigmoid\")){\n      if(i == \"truth\"){\n        image(matrix(y, 100,100),\n        main = \"Ground truth\", axes = FALSE, las = 2)\n      }else{\n        sv = e1071::svm(x = X, y = factor(y), kernel = i)\n        image(matrix(as.numeric(as.character(predict(sv, X))), 100, 100),\n        main = paste0(\"Kernel: \", i), axes = FALSE, las = 2)\n        axis(1, at = seq(0,1, length.out = 10),\n        labels = round(seq(-3, 3, length.out = 10), 1))\n        axis(2, at = seq(0,1, length.out = 10),\n        labels = round(seq(-3, 3, length.out = 10), 1), las = 2)\n      }\n    }\n  },\n  movie.name = \"svm.gif\", autobrowse = FALSE, interval = 2\n)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](./images/svm.gif)\n:::\n:::\n\n\n\n\nAs you have seen, this does not work with every kernel. Hence, the problem is to find the actual correct kernel, which is again an optimization procedure and can thus be approximated.\n\n| Hyperparameter | Explanation |\n|----|----|\n| kernel | Kernel that should be used. Kernel is used to bring the features into a feature space where the problem/task is easier to solve / linear separable |\n| cost | regularization term |\n\n## Clustering methods\n\nIn unsupervised learning, we want to identify patterns in data without having any examples (supervision) about what the correct patterns / classes are. As an example, consider the iris data set. Here, we have 150 observations of 4 floral traits:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris = datasets::iris\ncolors = hcl.colors(3)\ntraits = as.matrix(iris[,1:4])\nspecies = iris$Species\nimage(y = 1:4, x = 1:length(species) , z = traits,\n      ylab = \"Floral trait\", xlab = \"Individual\")\nsegments(50.5, 0, 50.5, 5, col = \"black\", lwd = 2)\nsegments(100.5, 0, 100.5, 5, col = \"black\", lwd = 2)\n```\n\n::: {.cell-output-display}\n![Trait distributions of iris dataset](B2-Distance_files/figure-html/chunk-chapter3-1-iris-plot-1.png){width=960}\n:::\n:::\n\n\n\n\nThe observations are from 3 species and indeed those species tend to have different traits, meaning that the observations form 3 clusters.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(traits, pch = as.integer(species), col = colors[as.integer(species)])\n```\n\n::: {.cell-output-display}\n![Scatterplots for trait-trait combinations.](B2-Distance_files/figure-html/chunk-chapter3-2-1.png){width=672}\n:::\n:::\n\n\n\n\nHowever, imagine we don't know what species are, what is basically the situation in which people in the antique have been. The people just noted that some plants have different flowers than others, and decided to give them different names. This kind of process is what unsupervised learning does.\n\n### Hierarchical Clustering\n\nA cluster refers to a collection of data points aggregated together because of certain similarities.\n\nIn hierarchical clustering, a hierarchy (tree) between data points is built.\n\n-   Agglomerative: Start with each data point in their own cluster, merge them up hierarchically.\n-   Divisive: Start with all data points in one cluster, and split hierarchically.\n\nMerges / splits are done according to linkage criterion, which measures distance between (potential) clusters. Cut the tree at a certain height to get clusters.\n\nHere an example\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\n\n#Reminder: traits = as.matrix(iris[,1:4]).\n\nd = dist(traits)\nhc = hclust(d, method = \"complete\")\n\nplot(hc, main=\"\")\nrect.hclust(hc, k = 3)  # Draw rectangles around the branches.\n```\n\n::: {.cell-output-display}\n![Results of hierarchical clustering. Red rectangle is drawn around the corresponding clusters.](B2-Distance_files/figure-html/chunk-chapter3-3-1.png){width=672}\n:::\n:::\n\n\n\n\nSame plot, but with colors for true species identity\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ape)\n\nplot(as.phylo(hc),\n     tip.color = colors[as.integer(species)],\n     direction = \"downwards\")\n```\n\n::: {.cell-output-display}\n![Results of hierarchical clustering. Colors correspond to the three species classes.](B2-Distance_files/figure-html/chunk-chapter3-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\nhcRes3 = cutree(hc, k = 3)   #Cut a dendrogram tree into groups.\n```\n:::\n\n\n\n\nCalculate confusion matrix. Note we are switching labels here so that it fits to the species.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmp = hcRes3\ntmp[hcRes3 == 2] = 3\ntmp[hcRes3 == 3] = 2\nhcRes3 = tmp\ntable(hcRes3, species)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: Confusion matrix for predicted and observed species classes.\n\n| setosa| versicolor| virginica|\n|------:|----------:|---------:|\n|     50|          0|         0|\n|      0|         27|         1|\n|      0|         23|        49|\n\n\n:::\n:::\n\n\n\n\nNote that results might change if you choose a different agglomeration method, distance metric or scale of your variables. Compare, e.g. to this example:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhc = hclust(d, method = \"ward.D2\")\n\nplot(as.phylo(hc),\n     tip.color = colors[as.integer(species)],\n     direction = \"downwards\")\n```\n\n::: {.cell-output-display}\n![Results of hierarchical clustering. Colors correspond to the three species classes. Different agglomeration method](B2-Distance_files/figure-html/chunk-chapter3-6-a-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhcRes3 = cutree(hc, k = 3)   #Cut a dendrogram tree into groups.\ntable(hcRes3, species)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: Confusion matrix for predicted and observed species classes.\n\n| setosa| versicolor| virginica|\n|------:|----------:|---------:|\n|     50|          0|         0|\n|      0|         49|        15|\n|      0|          1|        35|\n\n\n:::\n:::\n\n\n\n\nWhich method is best? <select class='webex-select'><option value='blank'></option><option value=''>first</option><option value='answer'>second</option></select>\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dendextend)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\n\nmethods = c(\"ward.D\", \"single\", \"complete\", \"average\",\n             \"mcquitty\", \"median\", \"centroid\", \"ward.D2\")\nout = dendlist()   # Create a dendlist object from several dendrograms.\nfor(method in methods){\n  res = hclust(d, method = method)\n  out = dendlist(out, as.dendrogram(res))\n}\nnames(out) = methods\nprint(out)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$ward.D\n'dendrogram' with 2 branches and 150 members total, at height 199.6205 \n\n$single\n'dendrogram' with 2 branches and 150 members total, at height 1.640122 \n\n$complete\n'dendrogram' with 2 branches and 150 members total, at height 7.085196 \n\n$average\n'dendrogram' with 2 branches and 150 members total, at height 4.062683 \n\n$mcquitty\n'dendrogram' with 2 branches and 150 members total, at height 4.497283 \n\n$median\n'dendrogram' with 2 branches and 150 members total, at height 2.82744 \n\n$centroid\n'dendrogram' with 2 branches and 150 members total, at height 2.994307 \n\n$ward.D2\n'dendrogram' with 2 branches and 150 members total, at height 32.44761 \n\nattr(,\"class\")\n[1] \"dendlist\"\n```\n\n\n:::\n\n```{.r .cell-code}\nget_ordered_3_clusters = function(dend){\n  # order.dendrogram function returns the order (index)\n  # or the \"label\" attribute for the leaves.\n  # cutree: Cut the tree (dendrogram) into groups of data.\n  cutree(dend, k = 3)[order.dendrogram(dend)]\n}\ndend_3_clusters = lapply(out, get_ordered_3_clusters)\n\n# Calculate Fowlkes-Mallows Index (determine the similarity between clusterings)\ncompare_clusters_to_iris = function(clus){\n  FM_index(clus, rep(1:3, each = 50), assume_sorted_vectors = TRUE)\n}\n\nclusters_performance = sapply(dend_3_clusters, compare_clusters_to_iris)\ndotchart(sort(clusters_performance), xlim = c(0.3, 1),\n         xlab = \"Fowlkes-Mallows index\",\n         main = \"Performance of linkage methods\n         in detecting the 3 species \\n in our example\",\n         pch = 19)\n```\n\n::: {.cell-output-display}\n![](B2-Distance_files/figure-html/chunk_chapter3_8-1.png){width=672}\n:::\n:::\n\n\n\n\nWe might conclude that ward.D2 works best here. However, as we will learn later, optimizing the method without a hold-out for testing implies that our model may be overfitting. We should check this using cross-validation.\n\n### K-means Clustering\n\nAnother example for an unsupervised learning algorithm is k-means clustering, one of the simplest and most popular unsupervised machine learning algorithms.\n\nTo start with the algorithm, you first have to specify the number of clusters (for our example the number of species). Each cluster has a centroid, which is the assumed or real location representing the center of the cluster (for our example this would be how an average plant of a specific species would look like). The algorithm starts by randomly putting centroids somewhere. Afterwards each data point is assigned to the respective cluster that raises the overall in-cluster sum of squares (variance) related to the distance to the centroid least of all. After the algorithm has placed all data points into a cluster the centroids get updated. By iterating this procedure until the assignment doesn't change any longer, the algorithm can find the (locally) optimal centroids and the data points belonging to this cluster. Note that results might differ according to the initial positions of the centroids. Thus several (locally) optimal solutions might be found.\n\nThe \"k\" in K-means refers to the number of clusters and the 'means' refers to averaging the data-points to find the centroids.\n\nA typical pipeline for using k-means clustering looks the same as for other algorithms. After having visualized the data, we fit a model, visualize the results and have a look at the performance by use of the confusion matrix. By setting a fixed seed, we can ensure that results are reproducible.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\n\n#Reminder: traits = as.matrix(iris[,1:4]).\n\nkc = kmeans(traits, 3)\nprint(kc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nK-means clustering with 3 clusters of sizes 50, 62, 38\n\nCluster means:\n  Sepal.Length Sepal.Width Petal.Length Petal.Width\n1     5.006000    3.428000     1.462000    0.246000\n2     5.901613    2.748387     4.393548    1.433871\n3     6.850000    3.073684     5.742105    2.071053\n\nClustering vector:\n  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n [75] 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 3 3 3 3 2 3 3 3 3\n[112] 3 3 2 2 3 3 3 3 2 3 2 3 2 3 3 2 2 3 3 3 3 3 2 3 3 3 3 2 3 3 3 2 3 3 3 2 3\n[149] 3 2\n\nWithin cluster sum of squares by cluster:\n[1] 15.15100 39.82097 23.87947\n (between_SS / total_SS =  88.4 %)\n\nAvailable components:\n\n[1] \"cluster\"      \"centers\"      \"totss\"        \"withinss\"     \"tot.withinss\"\n[6] \"betweenss\"    \"size\"         \"iter\"         \"ifault\"      \n```\n\n\n:::\n:::\n\n\n\n\n*Visualizing the results.* Color codes true species identity, symbol shows cluster result.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(iris[c(\"Sepal.Length\", \"Sepal.Width\")],\n     col =  colors[as.integer(species)], pch = kc$cluster)\npoints(kc$centers[, c(\"Sepal.Length\", \"Sepal.Width\")],\n       col = colors, pch = 1:3, cex = 3)\n```\n\n::: {.cell-output-display}\n![](B2-Distance_files/figure-html/chunk_chapter3_10-1.png){width=672}\n:::\n:::\n\n\n\n\nWe see that there are are some discrepancies. Confusion matrix:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(iris$Species, kc$cluster)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            \n              1  2  3\n  setosa     50  0  0\n  versicolor  0 48  2\n  virginica   0 14 36\n```\n\n\n:::\n:::\n\n\n\n\nIf you want to animate the clustering process, you could run\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(animation)\n\nsaveGIF(kmeans.ani(x = traits[,1:2], col = colors),\n        interval = 1, ani.width = 800, ani.height = 800)\n```\n:::\n\n\n\n\n**Elbow technique** to determine the probably best suited number of clusters:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\n\ngetSumSq = function(k){ kmeans(traits, k, nstart = 25)$tot.withinss }\n\n#Perform algorithm for different cluster sizes and retrieve variance.\niris.kmeans1to10 = sapply(1:10, getSumSq)\nplot(1:10, iris.kmeans1to10, type = \"b\", pch = 19, frame = FALSE,\n     xlab = \"Number of clusters K\",\n     ylab = \"Total within-clusters sum of squares\",\n     col = c(\"black\", \"red\", rep(\"black\", 8)))\n```\n\n::: {.cell-output-display}\n![](B2-Distance_files/figure-html/chunk_chapter3_13-1.png){width=672}\n:::\n:::\n\n\n\n\nOften, one is interested in sparse models. Furthermore, higher k than necessary tends to overfitting. At the kink in the picture, the sum of squares dropped enough and k is still low enough. But keep in mind, this is only a rule of thumb and might be wrong in some special cases.\n\n### Density-based Clustering\n\nDetermine the affinity of a data point according to the affinity of its k nearest neighbors. This is a very general description as there are many ways to do so.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Reminder: traits = as.matrix(iris[,1:4]).\n\nlibrary(dbscan)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dbscan'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:stats':\n\n    as.dendrogram\n```\n\n\n:::\n\n```{.r .cell-code}\nset.seed(123)\n\nkNNdistplot(traits, k = 4)   # Calculate and plot k-nearest-neighbor distances.\nabline(h = 0.4, lty = 2)\n```\n\n::: {.cell-output-display}\n![](B2-Distance_files/figure-html/chunk_chapter3_14-1.png){width=672}\n:::\n\n```{.r .cell-code}\ndc = dbscan(traits, eps = 0.4, minPts = 6)\nprint(dc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDBSCAN clustering for 150 objects.\nParameters: eps = 0.4, minPts = 6\nUsing euclidean distances and borderpoints = TRUE\nThe clustering contains 4 cluster(s) and 32 noise points.\n\n 0  1  2  3  4 \n32 46 36 14 22 \n\nAvailable fields: cluster, eps, minPts, metric, borderPoints\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(factoextra)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfviz_cluster(dc, traits, geom = \"point\", ggtheme = theme_light())\n```\n\n::: {.cell-output-display}\n![](B2-Distance_files/figure-html/chunk_chapter3_16-1.png){width=672}\n:::\n:::\n\n\n\n\n### Model-based Clustering\n\nThe last class of methods for unsupervised clustering are so-called *model-based clustering methods*.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mclust)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nPackage 'mclust' version 6.1.1\nType 'citation(\"mclust\")' for citing this R package in publications.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmb = Mclust(traits)\n```\n:::\n\n\n\n\nMclust automatically compares a number of candidate models (clusters, shape) according to BIC (The BIC is a criterion for classifying algorithms depending their prediction quality and their usage of parameters). We can look at the selected model via:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmb$G # Two clusters.\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n\n```{.r .cell-code}\nmb$modelName # > Ellipsoidal, equal shape.\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"VEV\"\n```\n\n\n:::\n:::\n\n\n\n\nWe see that the algorithm prefers having 2 clusters. For better comparability to the other 2 methods, we will override this by setting:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmb3 = Mclust(traits, 3)\n```\n:::\n\n\n\n\nResult in terms of the predicted densities for 3 clusters\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mb3, \"density\")\n```\n\n::: {.cell-output-display}\n![](B2-Distance_files/figure-html/chunk_chapter3_21-1.png){width=672}\n:::\n:::\n\n\n\n\nPredicted clusters:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mb3, what=c(\"classification\"), add = T)\n```\n\n::: {.cell-output-display}\n![](B2-Distance_files/figure-html/chunk_chapter3_22-1.png){width=672}\n:::\n:::\n\n\n\n\nConfusion matrix:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(iris$Species, mb3$classification)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n| setosa| versicolor| virginica|\n|------:|----------:|---------:|\n|     50|          0|         0|\n|      0|         49|        15|\n|      0|          1|        35|\n\n\n:::\n:::\n\n\n\n\n### Ordination\n\nOrdination is used in explorative analysis and compared to clustering, similar objects are ordered together. So there is a relationship between clustering and ordination. Here a PCA ordination on on the iris data set.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npcTraits = prcomp(traits, center = TRUE, scale. = TRUE)\nbiplot(pcTraits, xlim = c(-0.25, 0.25), ylim = c(-0.25, 0.25))\n```\n\n::: {.cell-output-display}\n![](B2-Distance_files/figure-html/chunk_chapter3_24-1.png){width=672}\n:::\n:::\n\n\n\n\nYou can cluster the results of this ordination, ordinate before clustering, or superimpose one on the other.\n\n## Exercise - kNN and SVM\n\n:::: callout-warning\n#### Question: Hyperparameter tuning of kNN\n\nWe want to optimize the number of neighbors (k) and the kernel of the kNN:\n\nPrepare the data:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(EcoData)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:ape':\n\n    where\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(missRanger)\ndata(titanic_ml)\ndata = titanic_ml\ndata = \n  data %>% select(survived, sex, age, fare, pclass)\ndata[,-1] = missRanger(data[,-1], verbose = 0)\n\ndata_sub =\n  data %>%\n    mutate(age = scales::rescale(age, c(0, 1)),\n           fare = scales::rescale(fare, c(0, 1))) %>%\n    mutate(sex = as.integer(sex) - 1L,\n           pclass = as.integer(pclass - 1L))\ndata_new = data_sub[is.na(data_sub$survived),] # for which we want to make predictions at the end\ndata_obs = data_sub[!is.na(data_sub$survived),] # data with known response\n```\n:::\n\n\n\n\n**Hints:**\n\n-   check the help of the kNN function to understand the hyperparameters\n\n::: {.callout-tip collapse=\"true\" appearance=\"minimal\"}\n## Code template\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(kknn)\nset.seed(42)\ndata_obs = data_sub[!is.na(data_sub$survived),] \ndata_obs$survived = as.factor(data_obs$survived)\ncv = 3\nsteps = 10\nsplit = ...\n\nhyper_k = ...\nhyper_kernel = ...\n\ntuning_results =\n    sapply(1:length(hyper_kernel), function(k) {\n        auc_inner = NULL\n        for(j in 1:cv) {\n          inner_split = split == j\n          train_inner = data_obs[!inner_split, ]\n          test_inner = data_obs[inner_split, ]\n          predictions = kknn(survived~., train = train_inner, test = test_inner, k = hyper_k[k], scale = FALSE, kernel = hyper_kernel[k])\n          auc_inner[j]= Metrics::auc(test_inner$survived, predictions$prob[,2])\n        }\n      return(mean(auc_inner))\n    })\n\n\nresults = data.frame(k = hyper_k, kernel = hyper_kernel, AUC = tuning_results)\n\n\nprint(results)\n```\n:::\n\n\n\n:::\n::::\n\n\n<div class='webex-solution'><button>Click here to see the solution</button>\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(kknn)\nset.seed(42)\ndata_obs = data_sub[!is.na(data_sub$survived),] \ndata_obs$survived = as.factor(data_obs$survived)\ncv = 3\nsteps = 10\nsplit = sample.int(cv, nrow(data_obs), replace = T)\n\nhyper_k = sample(10, 10)\nhyper_kernel = sample(c(\"triangular\", \"inv\", \"gaussian\", \"rank\"), 10, replace = TRUE)\n\ntuning_results =\n    sapply(1:length(hyper_kernel), function(k) {\n        auc_inner = NULL\n        for(j in 1:cv) {\n          inner_split = split == j\n          train_inner = data_obs[!inner_split, ]\n          test_inner = data_obs[inner_split, ]\n          predictions = kknn(survived~., train = train_inner, test = test_inner, k = hyper_k[k], scale = FALSE, kernel = hyper_kernel[k])\n          auc_inner[j]= Metrics::auc(test_inner$survived, predictions$prob[,2])\n        }\n      return(mean(auc_inner))\n    })\n\n\nresults = data.frame(k = hyper_k, kernel = hyper_kernel, AUC = tuning_results)\n\n\nprint(results)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    k     kernel       AUC\n1   3 triangular 0.7766805\n2   5   gaussian 0.7940078\n3  10 triangular 0.8071778\n4   8       rank 0.8010088\n5   4 triangular 0.7857645\n6   1       rank 0.7164612\n7   2 triangular 0.7520952\n8   7        inv 0.8020953\n9   9   gaussian 0.8076482\n10  6 triangular 0.7984275\n```\n\n\n:::\n:::\n\n\n\n\nMake predictions:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprediction_ensemble = \n  sapply(1:nrow(results), function(i) {\n    predictions = kknn(as.factor(survived)~., train = data_obs, test = data_new, k = results$k[i], scale = FALSE, kernel = results$kernel[i])\n    return(predictions$prob[,2])\n  })\n\n# Single predictions from the ensemble model:\nwrite.csv(data.frame(y = apply(prediction_ensemble, 1, mean)), file = \"Max_titanic_ensemble.csv\")\n```\n:::\n\n\n\n\n\n</div>\n\n\n:::: callout-warning\n#### Question: Hyperparameter tuning of SVM\n\nWe want to optimize the kernel and the cost parameters\n\nPrepare the data:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(EcoData)\nlibrary(dplyr)\nlibrary(missRanger)\ndata(titanic_ml)\ndata = titanic_ml\ndata = \n  data %>% select(survived, sex, age, fare, pclass)\ndata[,-1] = missRanger(data[,-1], verbose = 0)\n\ndata_sub =\n  data %>%\n    mutate(age = scales::rescale(age, c(0, 1)),\n           fare = scales::rescale(fare, c(0, 1))) %>%\n    mutate(sex = as.integer(sex) - 1L,\n           pclass = as.integer(pclass - 1L))\ndata_new = data_sub[is.na(data_sub$survived),] # for which we want to make predictions at the end\ndata_obs = data_sub[!is.na(data_sub$survived),] # data with known response\n```\n:::\n\n\n\n\n**Hints:**\n\n-   check the help of the kNN function to understand the hyperparameters\n\n::: {.callout-tip collapse=\"true\" appearance=\"minimal\"}\n## Code template\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(e1071)\nset.seed(42)\ndata_obs = data_sub[!is.na(data_sub$survived),] \ndata_obs$survived = as.factor(data_obs$survived)\ncv = 3\nsteps = 10\nsplit = ...\n\nhyper_k = ...\nhyper_kernel = ...\n\ntuning_results =\n    sapply(1:length(hyper_kernel), function(k) {\n        auc_inner = NULL\n        for(j in 1:cv) {\n          inner_split = split == j\n          train_inner = data_obs[!inner_split, ]\n          test_inner = data_obs[inner_split, ]\n          predictions = kknn(survived~., train = train_inner, test = test_inner, k = hyper_k[k], scale = FALSE, kernel = hyper_kernel[k])\n          auc_inner[j]= Metrics::auc(test_inner$survived, predictions$prob[,2])\n        }\n      return(mean(auc_inner))\n    })\n\n\nresults = data.frame(k = hyper_k, kernel = hyper_kernel, AUC = tuning_results)\n\n\nprint(results)\n```\n:::\n\n\n\n:::\n::::\n\n\n<div class='webex-solution'><button>Click here to see the solution</button>\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(e1071)\nset.seed(42)\ndata_obs = data_sub[!is.na(data_sub$survived),] \ndata_obs$survived = as.factor(data_obs$survived)\ncv = 3\nsteps = 40\nsplit = sample.int(cv, nrow(data_obs), replace = T)\n\nhyper_cost = runif(10, 0, 2)\nhyper_kernel = sample(c(\"linear\", \"polynomial\", \"radial\", \"sigmoid\"), 10, replace = TRUE)\n\ntuning_results =\n    sapply(1:length(hyper_kernel), function(k) {\n        auc_inner = NULL\n        for(j in 1:cv) {\n          inner_split = split == j\n          train_inner = data_obs[!inner_split, ]\n          test_inner = data_obs[inner_split, ]\n          model = svm(survived~., data = train_inner, cost = hyper_cost[k], kernel = hyper_kernel[k], probability = TRUE)\n          predictions = attr(predict(model, newdata = test_inner, probability = TRUE), \"probabilities\")[,1]\n          auc_inner[j]= Metrics::auc(test_inner$survived, predictions)\n        }\n      return(mean(auc_inner))\n    })\n\n\nresults = data.frame(cost = hyper_cost, kernel = hyper_kernel, AUC = tuning_results)\n\n\nprint(results)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        cost  kernel       AUC\n1  0.2753503 sigmoid 0.5526128\n2  0.5526653  radial 0.6159725\n3  0.7036870  linear 0.5865394\n4  1.6256105 sigmoid 0.5178411\n5  0.3430827  linear 0.5643597\n6  1.0423242  radial 0.6035677\n7  1.5292457  linear 0.5559287\n8  0.5775113 sigmoid 0.5368064\n9  0.8735566  linear 0.6131153\n10 1.3389015 sigmoid 0.5189292\n```\n\n\n:::\n:::\n\n\n\n\nMake predictions:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel = svm(survived~., data = data_obs, cost = results[which.max(results$AUC),1], kernel = results[which.max(results$AUC),2], probability = TRUE)\npredictions = attr(predict(model, newdata = data_new[,-1], probability = TRUE), \"probabilities\")[,1]\n# Single predictions from the ensemble model:\nwrite.csv(data.frame(y = apply(prediction_ensemble, 1, mean)), file = \"Max_titanic_ensemble.csv\")\n```\n:::\n\n\n\n\n\n</div>\n\n\n<!-- ::: callout-warning -->\n\n<!-- #### Question: kNN and SVM -->\n\n<!-- Fit a standard k-nearest-neighbor classifier and a support vector machine with a linear kernel (check help) on the Sonar dataset, and report what fitted better. -->\n\n<!-- Prepare dataset: -->\n\n<!-- ```{r} -->\n\n<!-- library(mlbench) -->\n\n<!-- set.seed(123) -->\n\n<!-- data(Sonar) -->\n\n<!-- data = Sonar -->\n\n<!-- #str(data) -->\n\n<!-- # Do not forget scaling! This may be done implicitly by most functions. -->\n\n<!-- # Here, it's done explicitly for teaching purposes. -->\n\n<!-- data = cbind.data.frame( -->\n\n<!--   scale(data[,-length(data)]), -->\n\n<!--   \"class\" = data[,length(data)] -->\n\n<!-- ) -->\n\n<!-- n = length(data[,1]) -->\n\n<!-- indicesTrain = sample.int(n, (n+1) %/% 2) # Take (at least) 50 % of the data. -->\n\n<!-- train = data[indicesTrain,] -->\n\n<!-- test = data[-indicesTrain,] -->\n\n<!-- ``` -->\n\n<!-- **Tasks:** -->\n\n<!-- -   Fit a svm (from the e1071 package) on the train dataset and make predictions for the test dataset -->\n\n<!-- -   Fit a kNN (from the kknn package) on the train dataset and make predictions for the test dataset -->\n\n<!-- -   Calculate confusion matrices to compare the performance -->\n\n<!-- ::: -->\n\n<!-- \n<div class='webex-solution'><button>Click here to see the solution</button>\n -->\n\n<!-- ```{r chunk_chapter4_task_33, include=TRUE} -->\n\n<!-- library(e1071) -->\n\n<!-- library(kknn) -->\n\n<!-- knn = kknn(class~., train = train, test = test, scale = FALSE, -->\n\n<!--            kernel = \"rectangular\") -->\n\n<!-- predKNN = predict(knn, newdata = test) -->\n\n<!-- sm = svm(class~., data = train, scale = FALSE, kernel = \"linear\") -->\n\n<!-- predSVM = predict(sm, newdata = test) -->\n\n<!-- ``` -->\n\n<!-- ```{r chunk_chapter4_task_34, echo=FALSE, include=TRUE} -->\n\n<!-- labelsTrain = train[,length(train)] -->\n\n<!-- labelsTest = test[,length(test)] -->\n\n<!-- contingency = table(predKNN, labelsTest) -->\n\n<!-- cat(\"K-nearest-neighbor, standard (rectangular) kernel:\\n\\n\") -->\n\n<!-- print(contingency) -->\n\n<!-- cat(\"Correctly classified: \", contingency[1, 1] + contingency[2, 2], -->\n\n<!--     \" / \", sum(contingency)) -->\n\n<!-- ``` -->\n\n<!-- ```{r chunk_chapter4_task_35, echo=FALSE, include=TRUE} -->\n\n<!-- contingency = table(predSVM, labelsTest) -->\n\n<!-- cat(\"Support-vector machine, linear kernel:\\n\\n\") -->\n\n<!-- print(contingency) -->\n\n<!-- cat(\"Correctly classified: \", contingency[1, 1] + contingency[2, 2], -->\n\n<!--     \" / \", sum(contingency)) -->\n\n<!-- ``` -->\n\n<!-- K-nearest neighbor fitted (slightly) better. -->\n\n<!-- \n</div>\n -->\n\n## Exercise - Unsupervised learning\n\n::: callout-warning\n#### Task\n\nGo through the 4(5) unsupervised algorithms from the supervised chapter @sec-unsupervised, and check\n\n-   if they are sensitive (i.e. if results change)\n-   if you scale the input features (= predictors), instead of using the raw data.\n\nDiscuss in your group: Which is more appropriate for this analysis and/or in general: Scaling or not scaling?\n:::\n\n\n<div class='webex-solution'><button>Click here to see the solution for hierarchical clustering</button>\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dendextend)\n\nmethods = c(\"ward.D\", \"single\", \"complete\", \"average\",\n            \"mcquitty\", \"median\", \"centroid\", \"ward.D2\")\n\ncluster_all_methods = function(distances){\n  out = dendlist()\n  for(method in methods){\n    res = hclust(distances, method = method)\n    out = dendlist(out, as.dendrogram(res))\n  }\n  names(out) = methods\n\n  return(out)\n}\n\nget_ordered_3_clusters = function(dend){\n  return(cutree(dend, k = 3)[order.dendrogram(dend)])\n}\n\ncompare_clusters_to_iris = function(clus){\n  return(FM_index(clus, rep(1:3, each = 50), assume_sorted_vectors = TRUE))\n}\n\ndo_clustering = function(traits, scale = FALSE){\n  set.seed(123)\n  headline = \"Performance of linkage methods\\nin detecting the 3 species\\n\"\n\n  if(scale){\n    traits = scale(traits)  # Do scaling on copy of traits.\n    headline = paste0(headline, \"Scaled\")\n  }else{ headline = paste0(headline, \"Not scaled\") }\n\n  distances = dist(traits)\n  out = cluster_all_methods(distances)\n  dend_3_clusters = lapply(out, get_ordered_3_clusters)\n  clusters_performance = sapply(dend_3_clusters, compare_clusters_to_iris)\n  dotchart(sort(clusters_performance), xlim = c(0.3,1),\n           xlab = \"Fowlkes-Mallows index\",\n           main = headline,\n           pch = 19)\n}\n\ntraits = as.matrix(iris[,1:4])\n\n# Do clustering on unscaled data.\ndo_clustering(traits, FALSE)\n```\n\n::: {.cell-output-display}\n![](B2-Distance_files/figure-html/chunk_chapter3_task_0-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Do clustering on scaled data.\ndo_clustering(traits, TRUE)\n```\n\n::: {.cell-output-display}\n![](B2-Distance_files/figure-html/chunk_chapter3_task_0-2.png){width=672}\n:::\n:::\n\n\n\n\nIt seems that scaling is harmful for hierarchical clustering. But this might be a deception. **Be careful:** If you have data on different units or magnitudes, scaling is definitely useful! Otherwise variables with higher values get higher influence.\n\n\n</div>\n\n\n\n<div class='webex-solution'><button>Click here to see the solution for K-means</button>\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndo_clustering = function(traits, scale = FALSE){\n  set.seed(123)\n\n  if(scale){\n    traits = scale(traits)  # Do scaling on copy of traits.\n    headline = \"K-means Clustering\\nScaled\\nSum of all tries: \"\n  }else{ headline = \"K-means Clustering\\nNot scaled\\nSum of all tries: \" }\n\n  getSumSq = function(k){ kmeans(traits, k, nstart = 25)$tot.withinss }\n  iris.kmeans1to10 = sapply(1:10, getSumSq)\n\n  headline = paste0(headline, round(sum(iris.kmeans1to10), 2))\n\n  plot(1:10, iris.kmeans1to10, type = \"b\", pch = 19, frame = FALSE,\n       main = headline,\n       xlab = \"Number of clusters K\",\n       ylab = \"Total within-clusters sum of squares\",\n       col = c(\"black\", \"red\", rep(\"black\", 8)) )\n}\n\ntraits = as.matrix(iris[,1:4])\n\n# Do clustering on unscaled data.\ndo_clustering(traits, FALSE)\n```\n\n::: {.cell-output-display}\n![](B2-Distance_files/figure-html/chunk_chapter3_task_1-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Do clustering on scaled data.\ndo_clustering(traits, TRUE)\n```\n\n::: {.cell-output-display}\n![](B2-Distance_files/figure-html/chunk_chapter3_task_1-2.png){width=672}\n:::\n:::\n\n\n\n\nIt seems that scaling is harmful for K-means clustering. But this might be a deception. <strong>*Be careful:*</strong> If you have data on different units or magnitudes, scaling is definitely useful! Otherwise variables with higher values get higher influence.\n\n\n</div>\n\n\n\n<div class='webex-solution'><button>Click here to see the solution for density-based clustering</button>\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dbscan)\n\ncorrect = as.factor(iris[,5])\n# Start at 1. Noise points will get 0 later.\nlevels(correct) = 1:length(levels(correct))\ncorrect\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n [75] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3\n[112] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n[149] 3 3\nLevels: 1 2 3\n```\n\n\n:::\n\n```{.r .cell-code}\ndo_clustering = function(traits, scale = FALSE){\n  set.seed(123)\n\n  if(scale){ traits = scale(traits) } # Do scaling on copy of traits.\n\n  #####\n  # Play around with the parameters \"eps\" and \"minPts\" on your own!\n  #####\n  dc = dbscan(traits, eps = 0.41, minPts = 4)\n\n  labels = as.factor(dc$cluster)\n  noise = sum(dc$cluster == 0)\n  levels(labels) = c(\"noise\", 1:( length(levels(labels)) - 1))\n\n  tbl = table(correct, labels)\n  correct_classified = 0\n  for(i in 1:length(levels(correct))){\n    correct_classified = correct_classified + tbl[i, i + 1]\n  }\n\n  cat( if(scale){ \"Scaled\" }else{ \"Not scaled\" }, \"\\n\\n\" )\n  cat(\"Confusion matrix:\\n\")\n  print(tbl)\n  cat(\"\\nCorrect classified points: \", correct_classified, \" / \", length(iris[,5]))\n  cat(\"\\nSum of noise points: \", noise, \"\\n\")\n}\n\ntraits = as.matrix(iris[,1:4])\n\n# Do clustering on unscaled data.\ndo_clustering(traits, FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNot scaled \n\nConfusion matrix:\n       labels\ncorrect noise  1  2  3  4\n      1     3 47  0  0  0\n      2     5  0 38  3  4\n      3    17  0  0 33  0\n\nCorrect classified points:  118  /  150\nSum of noise points:  25 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Do clustering on scaled data.\ndo_clustering(traits, TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nScaled \n\nConfusion matrix:\n       labels\ncorrect noise  1  2  3  4\n      1     9 41  0  0  0\n      2    14  0 36  0  0\n      3    36  0  1  4  9\n\nCorrect classified points:  81  /  150\nSum of noise points:  59 \n```\n\n\n:::\n:::\n\n\n\n\nIt seems that scaling is harmful for density based clustering. But this might be a deception. <strong>*Be careful:*</strong> If you have data on different units or magnitudes, scaling is definitely useful! Otherwise variables with higher values get higher influence.\n\n\n</div>\n\n\n\n<div class='webex-solution'><button>Click here to see the solution for model-based clustering</button>\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mclust)\n\ndo_clustering = function(traits, scale = FALSE){\n  set.seed(123)\n\n  if(scale){ traits = scale(traits) } # Do scaling on copy of traits.\n\n  mb3 = Mclust(traits, 3)\n\n  tbl = table(iris$Species, mb3$classification)\n\n  cat( if(scale){ \"Scaled\" }else{ \"Not scaled\" }, \"\\n\\n\" )\n  cat(\"Confusion matrix:\\n\")\n  print(tbl)\n  cat(\"\\nCorrect classified points: \", sum(diag(tbl)), \" / \", length(iris[,5]))\n}\n\ntraits = as.matrix(iris[,1:4])\n\n# Do clustering on unscaled data.\ndo_clustering(traits, FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNot scaled \n\nConfusion matrix:\n            \n              1  2  3\n  setosa     50  0  0\n  versicolor  0 45  5\n  virginica   0  0 50\n\nCorrect classified points:  145  /  150\n```\n\n\n:::\n\n```{.r .cell-code}\n# Do clustering on scaled data.\ndo_clustering(traits, TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nScaled \n\nConfusion matrix:\n            \n              1  2  3\n  setosa     50  0  0\n  versicolor  0 45  5\n  virginica   0  0 50\n\nCorrect classified points:  145  /  150\n```\n\n\n:::\n:::\n\n\n\n\nFor model based clustering, scaling does not matter.\n\n\n</div>\n\n\n\n<div class='webex-solution'><button>Click here to see the solution for ordination</button>\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntraits = as.matrix(iris[,1:4])\n\nbiplot(prcomp(traits, center = TRUE, scale. = TRUE),\n       main = \"Use integrated scaling\")\n```\n\n::: {.cell-output-display}\n![](B2-Distance_files/figure-html/chunk_chapter3_task_4-1.png){width=672}\n:::\n\n```{.r .cell-code}\nbiplot(prcomp(scale(traits), center = FALSE, scale. = FALSE),\n       main = \"Scale explicitly\")\n```\n\n::: {.cell-output-display}\n![](B2-Distance_files/figure-html/chunk_chapter3_task_4-2.png){width=672}\n:::\n\n```{.r .cell-code}\nbiplot(prcomp(traits, center = FALSE, scale. = FALSE),\n       main = \"No scaling at all\")\n```\n\n::: {.cell-output-display}\n![](B2-Distance_files/figure-html/chunk_chapter3_task_4-3.png){width=672}\n:::\n:::\n\n\n\n\nFor PCA ordination, scaling matters. Because we are interested in directions of maximal variance, all parameters should be scaled, or the one with the highest values might dominate all others.\n\n\n</div>\n\n",
    "supporting": [
      "B2-Distance_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}