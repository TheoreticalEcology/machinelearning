{
  "hash": "f1c622119507fdfc115df8d321d7016a",
  "result": {
    "markdown": "---\noutput: html_document\neditor_options:\n  chunk_output_type: console\n---\n\n\n# Machine learning pipeline {#workflow}\n\nThe Standard Machine Learning Pipeline using the Titanic Data set\n\nBefore we specialize on any tuning, it is important to understand that machine learning always consists of a pipeline of actions.\n\nThe typical machine learning workflow consist of:\n\n-   Data cleaning and exploration (EDA = explorative data analysis) for example with tidyverse.\n-   Preprocessing and feature selection.\n-   Splitting data set into training and test set for evaluation.\n-   Model fitting.\n-   Model evaluation.\n-   New predictions\n\n![Machine Learning pipeline](images/pipeline.png)\n\n<!-- Here is an (optional) video that explains the entire pipeline from a slightly different perspective: -->\n\n<!-- ```{r chunk_chapter4_39, eval=knitr::is_html_output(excludes = \"epub\"), results = 'asis', echo = F} -->\n\n<!-- cat( -->\n\n<!--   '<iframe width=\"560\" height=\"315\"  -->\n\n<!--   src=\"https://www.youtube.com/embed/nKW8Ndu7Mjw\" -->\n\n<!--   frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; -->\n\n<!--   gyroscope; picture-in-picture\" allowfullscreen> -->\n\n<!--   </iframe>' -->\n\n<!-- ) -->\n\n<!-- ``` -->\n\nIn the following example, we use tidyverse, a collection of R packages for data science / data manipulation mainly developed by Hadley Wickham.\n\n::: {.callout-note appearance=\"default\" collapse=\"true\"}\n## dplyr and tidyverse\n\nThe `dplyr` package is part of a framework called tidyverse. Unique features of the tidyverse are the pipe `%>%` operator and `tibble` objects.\n\n-   The `%>%` operator:\n\n    Applying several functions in sequence on an object often results in uncountable/confusing number of round brackets:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    library(tidyverse)\n    ```\n    \n    ::: {.cell-output .cell-output-stderr}\n    ```\n    ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n    ✔ dplyr     1.1.4     ✔ readr     2.1.5\n    ✔ forcats   1.0.0     ✔ stringr   1.5.1\n    ✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n    ✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n    ✔ purrr     1.0.2     \n    ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n    ✖ dplyr::filter() masks stats::filter()\n    ✖ dplyr::lag()    masks stats::lag()\n    ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n    ```\n    :::\n    \n    ```{.r .cell-code}\n    max(mean(range(c(5, 3, 2, 1))))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] 3\n    ```\n    :::\n    :::\n\n\n    The pipe operator simplifies that by saying \"apply the next function on the result of the current function\":\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    c(5, 3, 2, 1) %>% range %>% mean %>% max\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] 3\n    ```\n    :::\n    :::\n\n\n    Which is easier to write, read, and to understand!\n\n-   `tibble` objects are just an extension of data.frames. In the course we will use mostly data.frames, so it is better to transform the tibbles back to data.frames:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    air_grouped = airquality %>% group_by(Month)\n    \n    class(air_grouped)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] \"grouped_df\" \"tbl_df\"     \"tbl\"        \"data.frame\"\n    ```\n    :::\n    \n    ```{.r .cell-code}\n    air_grouped = as.data.frame(air_grouped)\n    class(air_grouped)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    [1] \"data.frame\"\n    ```\n    :::\n    :::\n\n:::\n\n<!-- ```{r chunk_chapter4_40, eval=knitr::is_html_output(excludes = \"epub\"), results = 'asis', echo = F} -->\n\n<!-- cat( -->\n\n<!--   '<iframe width=\"560\" height=\"315\"  -->\n\n<!--   src=\"https://www.youtube.com/embed/nRtp7wSEtJA\" -->\n\n<!--   frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; -->\n\n<!--   gyroscope; picture-in-picture\" allowfullscreen> -->\n\n<!--   </iframe>' -->\n\n<!-- ) -->\n\n<!-- ``` -->\n\n::: column-margin\nAnother good reference is \"**R for data science**\" by Hadley Wickham: <a href=\"https://r4ds.had.co.nz/\" target=\"_blank\" rel=\"noopener\"></a>.\n:::\n\nFor this lecture you need the Titanic data set provided by us (via the `EcoData` package).\n\n::: column-margin\nYou can find it in GRIPS (datasets.RData in the data set and submission section) or at <a href=\"http://rhsbio7.uni-regensburg.de:8500\" target=\"_blank\" rel=\"noopener\">http://rhsbio7.uni-regensburg.de:8500</a> (VPN for University of Regensburg is required!).\n:::\n\n::: callout-important\n### Motivation - We need a model that can predict the survival probability of new passengers.\n\nWe have split the data set into training and an outer test/prediction data sets (the test/prediction split has one column less than the train split, as the response for the test/outer split is unknown).\n\n**The goal is to build a predictive model that can accurately predict the chances of survival for Titanic passengers!**\n\nThe dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(EcoData)\ndata(titanic_ml)\ndata = titanic_ml\n```\n:::\n\n\nThe response variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(data$survived)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  0 NA\n```\n:::\n:::\n\n\n0 = passenger died\n\n1 = passenger survived\n\nNA = we don't have information about the passenger, at the end, we will make predictions for these passengers!\n\n**Important**: Preprocessing of the data must be done for the training and testing data together!!\n:::\n\n## Data preparation\n\nLoad necessary libraries:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\nLoad data set:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(EcoData)\ndata(titanic_ml)\ndata = titanic_ml\n```\n:::\n\n\nStandard summaries:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t1309 obs. of  14 variables:\n $ pclass   : int  2 1 3 3 3 3 3 1 3 1 ...\n $ survived : int  1 1 0 0 0 0 0 1 0 1 ...\n $ name     : chr  \"Sinkkonen, Miss. Anna\" \"Woolner, Mr. Hugh\" \"Sage, Mr. Douglas Bullen\" \"Palsson, Master. Paul Folke\" ...\n $ sex      : Factor w/ 2 levels \"female\",\"male\": 1 2 2 2 2 2 2 1 1 1 ...\n $ age      : num  30 NA NA 6 30.5 38.5 20 53 NA 42 ...\n $ sibsp    : int  0 0 8 3 0 0 0 0 0 0 ...\n $ parch    : int  0 0 2 1 0 0 0 0 0 0 ...\n $ ticket   : Factor w/ 929 levels \"110152\",\"110413\",..: 221 123 779 542 589 873 472 823 588 834 ...\n $ fare     : num  13 35.5 69.55 21.07 8.05 ...\n $ cabin    : Factor w/ 187 levels \"\",\"A10\",\"A11\",..: 1 94 1 1 1 1 1 1 1 1 ...\n $ embarked : Factor w/ 4 levels \"\",\"C\",\"Q\",\"S\": 4 4 4 4 4 4 4 2 4 2 ...\n $ boat     : Factor w/ 28 levels \"\",\"1\",\"10\",\"11\",..: 3 28 1 1 1 1 1 19 1 15 ...\n $ body     : int  NA NA NA NA 50 32 NA NA NA NA ...\n $ home.dest: Factor w/ 370 levels \"\",\"?Havana, Cuba\",..: 121 213 1 1 1 1 322 350 1 1 ...\n```\n:::\n\n```{.r .cell-code}\nsummary(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     pclass         survived          name               sex     \n Min.   :1.000   Min.   :0.0000   Length:1309        female:466  \n 1st Qu.:2.000   1st Qu.:0.0000   Class :character   male  :843  \n Median :3.000   Median :0.0000   Mode  :character               \n Mean   :2.295   Mean   :0.3853                                  \n 3rd Qu.:3.000   3rd Qu.:1.0000                                  \n Max.   :3.000   Max.   :1.0000                                  \n                 NA's   :655                                     \n      age              sibsp            parch            ticket    \n Min.   : 0.1667   Min.   :0.0000   Min.   :0.000   CA. 2343:  11  \n 1st Qu.:21.0000   1st Qu.:0.0000   1st Qu.:0.000   1601    :   8  \n Median :28.0000   Median :0.0000   Median :0.000   CA 2144 :   8  \n Mean   :29.8811   Mean   :0.4989   Mean   :0.385   3101295 :   7  \n 3rd Qu.:39.0000   3rd Qu.:1.0000   3rd Qu.:0.000   347077  :   7  \n Max.   :80.0000   Max.   :8.0000   Max.   :9.000   347082  :   7  \n NA's   :263                                        (Other) :1261  \n      fare                     cabin      embarked      boat    \n Min.   :  0.000                  :1014    :  2           :823  \n 1st Qu.:  7.896   C23 C25 C27    :   6   C:270    13     : 39  \n Median : 14.454   B57 B59 B63 B66:   5   Q:123    C      : 38  \n Mean   : 33.295   G6             :   5   S:914    15     : 37  \n 3rd Qu.: 31.275   B96 B98        :   4            14     : 33  \n Max.   :512.329   C22 C26        :   4            4      : 31  \n NA's   :1         (Other)        : 271            (Other):308  \n      body                      home.dest  \n Min.   :  1.0                       :564  \n 1st Qu.: 72.0   New York, NY        : 64  \n Median :155.0   London              : 14  \n Mean   :160.8   Montreal, PQ        : 10  \n 3rd Qu.:256.0   Cornwall / Akron, OH:  9  \n Max.   :328.0   Paris, France       :  9  \n NA's   :1188    (Other)             :639  \n```\n:::\n:::\n\n\nThe name variable consists of 1309 unique factors (there are 1309 observations...) and could be now transformed. If you are interested in how to do that, take a look at the following box.\n\n::: {.callout-tip collapse=\"true\"}\n## Feature engineering of the name variable\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(unique(data$name))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1307\n```\n:::\n:::\n\n\nHowever, there is a title in each name. Let's extract the titles:\n\n1.  We will extract all names and split each name after each comma \",\".\n2.  We will split the second split of the name after a point \".\" and extract the titles.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfirst_split = sapply(data$name,\n                     function(x) stringr::str_split(x, pattern = \",\")[[1]][2])\ntitles = sapply(first_split,\n                function(x) strsplit(x, \".\",fixed = TRUE)[[1]][1])\n```\n:::\n\n\nWe get 18 unique titles:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(titles)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntitles\n         Capt           Col           Don          Dona            Dr \n            1             4             1             1             8 \n     Jonkheer          Lady         Major        Master          Miss \n            1             1             2            61           260 \n         Mlle           Mme            Mr           Mrs            Ms \n            2             1           757           197             2 \n          Rev           Sir  the Countess \n            8             1             1 \n```\n:::\n:::\n\n\nA few titles have a very low occurrence rate:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntitles = stringr::str_trim((titles))\ntitles %>%\n fct_count()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 18 × 2\n   f                n\n   <fct>        <int>\n 1 Capt             1\n 2 Col              4\n 3 Don              1\n 4 Dona             1\n 5 Dr               8\n 6 Jonkheer         1\n 7 Lady             1\n 8 Major            2\n 9 Master          61\n10 Miss           260\n11 Mlle             2\n12 Mme              1\n13 Mr             757\n14 Mrs            197\n15 Ms               2\n16 Rev              8\n17 Sir              1\n18 the Countess     1\n```\n:::\n:::\n\n\nWe will combine titles with low occurrences into one title, which we can easily do with the `forcats` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntitles2 =\n  forcats::fct_collapse(titles,\n                        officer = c(\"Capt\", \"Col\", \"Major\", \"Dr\", \"Rev\"),\n                        royal = c(\"Jonkheer\", \"Don\", \"Sir\",\n                                  \"the Countess\", \"Dona\", \"Lady\"),\n                        miss = c(\"Miss\", \"Mlle\"),\n                        mrs = c(\"Mrs\", \"Mme\", \"Ms\")\n                        )\n```\n:::\n\n\nWe can count titles again to see the new number of titles:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntitles2 %>%  \n   fct_count()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  f           n\n  <fct>   <int>\n1 officer    23\n2 royal       6\n3 Master     61\n4 miss      262\n5 mrs       200\n6 Mr        757\n```\n:::\n:::\n\n\nAdd new title variable to data set:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata =\n  data %>%\n    mutate(title = titles2)\n```\n:::\n\n:::\n\n### Imputation\n\nNAs are a common problem in ML and most ML algorithms cannot handle NAs. For example, the age variable has 20% NAs:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(data$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1667 21.0000 28.0000 29.8811 39.0000 80.0000     263 \n```\n:::\n\n```{.r .cell-code}\nsum(is.na(data$age)) / nrow(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.2009167\n```\n:::\n:::\n\n\nThere are few options how to handle NAs:\n\n-   Drop observations with NAs, however, we may lose many observations (not what we want!)\n\n-   Imputation, fill the missing values\n\nWe impute (fill) the missing values, for example with the median age. However, age itself might depend on other variables such as sex, class and title. Thus, instead of filling the NAs with the overall median of the passengers, we want to fill the NAs with the median age of these groups so that the associations with the other groups are preserved (or in other words, that the new values are hopefully closer to the unknown true values).\n\nIn `tidyverse` we can \"group\" the data, i.e. we will nest the observations within categorical variables for which we assume that there may be an association with age (here: `group_by` after sex, pclass and title). After grouping, all operations (such as our `median(age....)`) will be done within the specified groups (to get better estimates of these missing NAs).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata =\n  data %>%\n    select(survived, sex, age, fare, pclass) %>% \n    group_by(sex, pclass) %>%\n    mutate(age2 = ifelse(is.na(age), median(age, na.rm = TRUE), age)) %>%\n    mutate(fare2 = ifelse(is.na(fare), median(fare, na.rm = TRUE), fare)) %>%\n    ungroup()\n```\n:::\n\n\n### Preprocessing and Feature Selection\n\nLater (tomorrow), we want to use Keras in our example, but it cannot handle factors and requires the data to be scaled.\n\nNormally, one would do this for all predictors, but as we only show the pipeline here, we have sub-selected a bunch of predictors and do this only for them. We first scale the numeric predictors and change the factors with only two groups/levels into integers (this can be handled by Keras).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_sub =\n  data %>%\n    select(survived, sex, age2, fare2, pclass) %>%\n    mutate(age2 = scales::rescale(age2, c(0, 1)),\n           fare2 = scales::rescale(fare2, c(0, 1))) %>%\n    mutate(sex = as.integer(sex) - 1L,\n           pclass = as.integer(pclass - 1L))\n```\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n## Transforming factors with more than two levels\n\nFactors with more than two levels should be **one hot encoded** (Make columns for every different factor level and write 1 in the respective column for every taken feature value and 0 else. For example: $\\{red, green, green, blue, red\\} \\rightarrow \\{(0,0,1), (0,1,0), (0,1,0), (1,0,0), (0,0,1)\\}$):\n\n\n::: {.cell}\n\n```{.r .cell-code}\none_title = model.matrix(~0+as.factor(title), data = data)\ncolnames(one_title) = levels(data$title)\n\none_sex = model.matrix(~0+as.factor(sex), data = data)\ncolnames(one_sex) = levels(data$sex)\n\none_pclass = model.matrix(~0+as.factor(pclass), data = data)\ncolnames(one_pclass) = paste0(\"pclass\", 1:length(unique(data$pclass)))\n```\n:::\n\n\nAnd we have to add the dummy encoded variables to the data set:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata = cbind(data.frame(survived= data$survived),\n                 one_title, one_sex, age = data$age2,\n                 fare = data$fare2, one_pclass)\nhead(data)\n```\n:::\n\n:::\n\n## Modelling\n\n### Split data for final predictions\n\nTo tune our hyperparameters and evaluate our models, we split the data into the training and testing data. The testing data are the observations where the response is NA:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(data_sub$survived)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.0000  0.0000  0.3853  1.0000  1.0000     655 \n```\n:::\n:::\n\n\n655 observations have NAs in our response variable, these are the observations for which we want to make predictions at the end of our pipeline.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_new = data_sub[is.na(data_sub$survived),]\ndata_obs = data_sub[!is.na(data_sub$survived),]\n```\n:::\n\n\n### Hyperparameter optimization\n\nWe want to tune our hyperparameters ($\\lambda$ and $\\alpha$). Normally, we should do a nested CV on our training data (data_obs), however, we assume that the test data on the submission server is our outer split, so we can tune our hyperparameters using a n-fold Cross-Validation which serves as our inner CV.\n\n::: column-margin\nAgain, why is it important to tune hyperparameters? Hyperparameters (configuration parameters of our ML algorithms that (mostly) control their complexity) are usually tuned (optimized) in an automatic / systematic way. A common procedure, called random search, is to sample random configuration combinations from the set of hyperparameters and test for each combination the prediction error.\n:::\n\nWe implement manually a CV to tune the learning rate. We start with a 3xCV and 10x different learning rates:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(cito)\nset.seed(42)\nmodel = dnn(survived~.,\n            data = data_obs, \n            loss = \"binomial\",\n            lr = tune(0.001, 0.1),\n            tuning = config_tuning(CV = 3, steps = 10)\n            )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStarting hyperparameter tuning...\nFitting final model...\n```\n:::\n\n```{.r .cell-code}\nmodel$tuning\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 5\n   steps  test train models      lr\n   <int> <dbl> <dbl> <lgl>    <dbl>\n 1     1  315.     0 NA     0.0394 \n 2     2  313.     0 NA     0.0623 \n 3     3  321.     0 NA     0.0627 \n 4     4  320.     0 NA     0.0804 \n 5     5  326.     0 NA     0.0658 \n 6     6  325.     0 NA     0.0683 \n 7     7  324.     0 NA     0.0417 \n 8     8  321.     0 NA     0.0667 \n 9     9  350.     0 NA     0.00368\n10    10  315.     0 NA     0.0818 \n```\n:::\n:::\n\n\n<!-- ```{r} -->\n\n<!-- library(glmnet) -->\n\n<!-- library(glmnetUtils) -->\n\n<!-- set.seed(42) -->\n\n<!-- cv = 5 -->\n\n<!-- hyper_lambda = runif(20,0, 0.2) -->\n\n<!-- tuning_results =  -->\n\n<!--     sapply(1:length(hyper_lambda), function(k) { -->\n\n<!--         auc_inner = NULL # save results from CV -->\n\n<!--         for(j in 1:cv) { -->\n\n<!--           inner_split = as.integer(cut(1:nrow(data_obs), breaks = cv)) -->\n\n<!--           train_inner = data_obs[inner_split != j, ] -->\n\n<!--           test_inner = data_obs[inner_split == j, ] -->\n\n<!--           model = glmnet(survived~.,data = train_inner, family = \"binomial\", lambda = hyper_lambda[k]) -->\n\n<!--           auc_inner[j]= Metrics::auc(test_inner$survived, predict(model, test_inner, type = \"response\")) -->\n\n<!--         } -->\n\n<!--       return(mean(auc_inner)) -->\n\n<!--     }) -->\n\n<!-- results = data.frame(lambda = hyper_lambda, AUC = tuning_results) -->\n\n<!-- print(results) -->\n\n<!-- ``` -->\n\n<!-- The best (highest AUC) $\\lambda$ is then: -->\n\n<!-- ```{r} -->\n\n<!-- results[which.max(results$AUC),] -->\n\n<!-- ``` -->\n\n## Predictions and Submission\n\nWhen we are satisfied with the performance of our model, we will create predictions for the new observations on the submission server. cito directly returns the best model so we do not have to fit the final model.\n\nWe submit our predictions to the submission server at <a href=\"http://rhsbio7.uni-regensburg.de:8500\" target=\"_blank\" rel=\"noopener\">http://rhsbio7.uni-regensburg.de:8500</a>.\n\nFor the submission it is critical to change the predictions into a data.frame, select the second column (the probability to survive), and save it with the write.csv function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_new = data_sub[is.na(data_sub$survived),]\npredictions = predict(model, data_new, type = \"response\")[,1] \nwrite.csv(data.frame(y = predictions), file = \"Max_1.csv\")\n```\n:::\n\n\n\n\n## Exercises\n\n::: callout-warning\n#### Question: Hyperparameter tuning dnn - Titanic dataset\n\nTune architecture\n\n-   Tune training parameters (learning rate, batch size) and regularization\n\n**Hints**\n\ncito has a feature to automatically tune hyperparameters under Cross Validation!\n\n-   passing `tune(...)` to a hyperparameter will tell cito to tune this specific hyperparameter\n-   the `tuning = config_tuning(...)` let you specify the cross-validation strategy and the number of hyperparameters that should be tested (steps = number of hyperparameter combinations that should be tried)\n-   after tuning, cito will fit automatically a model with the best hyperparameters on the full data and will return this model\n\nMinimal example with the iris dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(cito)\ndf = iris\ndf[,1:4] = scale(df[,1:4])\n\nmodel_tuned = dnn(Species~., \n                  loss = \"softmax\",\n                  data = iris,\n                  lambda = tune(lower = 0.0, upper = 0.2), # you can pass the \"tune\" function to a hyerparameter\n                  tuning = config_tuning(CV = 3, steps = 20L)\n                  )\n\n# tuning results\nmodel_tuned$tuning\n\n\n# model_tuned is now already the best model!\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(EcoData)\nlibrary(dplyr)\nlibrary(missRanger)\ndata(titanic_ml)\ndata = titanic_ml\ndata = \n  data %>% select(survived, sex, age, fare, pclass)\ndata[,-1] = missRanger(data[,-1], verbose = 0)\n\ndata_sub =\n  data %>%\n    mutate(age = scales::rescale(age, c(0, 1)),\n           fare = scales::rescale(fare, c(0, 1))) %>%\n    mutate(sex = as.integer(sex) - 1L,\n           pclass = as.integer(pclass - 1L))\ndata_new = data_sub[is.na(data_sub$survived),] # for which we want to make predictions at the end\ndata_obs = data_sub[!is.na(data_sub$survived),] # data with known response\n\n\nmodel = dnn(survived~., \n          hidden = c(10L, 10L), # change\n          activation = c(\"selu\", \"selu\"), # change\n          loss = \"binomial\", \n          lr = 0.05, #change\n          validation = 0.2,\n          lambda = 0.001, # change\n          alpha = 0.1, # change\n          lr_scheduler = config_lr_scheduler(\"reduce_on_plateau\", patience = 10, factor = 0.9),\n          data = data_obs, epochs = 40L, verbose = FALSE, plot= TRUE)\n```\n\n::: {.cell-output-display}\n![](A4-MLpipeline_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Predictions:\n\npredictions = predict(model, newdata = data_new, type = \"response\") # change prediction type to response so that cito predicts probabilities\n\nwrite.csv(data.frame(y = predictions[,1]), file = \"Max_titanic_dnn.csv\")\n```\n:::\n\n:::\n\n<!-- ::: {.callout-warning} -->\n\n<!-- #### Task: Tuning $\\alpha$ and $\\lambda$ -->\n\n<!-- 1.  Extend the code from above and tune $\\alpha$ and $\\lambda$ (via 10xCV) -->\n\n<!-- 2.  Train the model with best set of hyperparameters and submit your predictions -->\n\n<!-- Submit your predictions (<http://rhsbio7.uni-regensburg.de:8500/>), which model has a higher AUC?. -->\n\n<!-- **Important**: -->\n\n<!-- Submissions only work if your preditions are probabilities and a data.frame (which you can create via `write.csv(data.frame(y = predictions ), file = \"Max_1.csv\")` -->\n\n<!--  ) -->\n\n<!-- ```{r} -->\n\n<!-- library(EcoData) -->\n\n<!-- library(dplyr) -->\n\n<!-- library(missRanger) -->\n\n<!-- library(glmnet) -->\n\n<!-- library(glmnetUtils) -->\n\n<!-- data(titanic_ml) -->\n\n<!-- data = titanic_ml -->\n\n<!-- data =  -->\n\n<!--   data %>% select(survived, sex, age, fare, pclass) -->\n\n<!-- # missRanger uses a random forest to impute NAs (RF is trained on the data to predict values for the NAs) -->\n\n<!-- data[,-1] = missRanger(data[,-1], verbose = 0) -->\n\n<!-- data_sub = -->\n\n<!--   data %>% -->\n\n<!--     mutate(age = scales::rescale(age, c(0, 1)), -->\n\n<!--            fare = scales::rescale(fare, c(0, 1))) %>% -->\n\n<!--     mutate(sex = as.integer(sex) - 1L, -->\n\n<!--            pclass = as.integer(pclass - 1L)) -->\n\n<!-- data_new = data_sub[is.na(data_sub$survived),] # for which we want to make predictions at the end -->\n\n<!-- data_obs = data_sub[!is.na(data_sub$survived),] # data with known response -->\n\n<!-- ``` -->\n\n<!-- Bonus: -->\n\n<!-- -   Try different features -->\n\n<!-- -   Try cito -->\n\n<!-- -   Try different datasets (see @sec-datasets) -->\n\n<!-- Code template for a simple CV (for tuning $\\lambda$): -->\n\n<!-- - Extend the following code so that $\\alpha$ is also tuned! -->\n\n<!-- ```{r} -->\n\n<!-- set.seed(42) -->\n\n<!-- cv = 5 -->\n\n<!-- hyper_lambda = runif(20,0, 0.2) -->\n\n<!-- tuning_results = -->\n\n<!--     sapply(1:length(hyper_lambda), function(k) { -->\n\n<!--         auc_inner = NULL -->\n\n<!--         for(j in 1:cv) { -->\n\n<!--           inner_split = as.integer(cut(1:nrow(data_obs), breaks = cv)) -->\n\n<!--           train_inner = data_obs[inner_split != j, ] -->\n\n<!--           test_inner = data_obs[inner_split == j, ] -->\n\n<!--           model = glmnet(survived~.,data = train_inner, lambda = hyper_lambda[k], family = \"binomial\") -->\n\n<!--           auc_inner[j]= Metrics::auc(test_inner$survived, predict(model, test_inner, type = \"response\")) -->\n\n<!--         } -->\n\n<!--       return(mean(auc_inner)) -->\n\n<!--     }) -->\n\n<!-- results = data.frame(lambda = hyper_lambda, AUC = tuning_results) -->\n\n<!-- print(results) -->\n\n<!-- ``` -->\n\n<!-- ::: -->\n\n<!-- \n<div class='webex-solution'><button>Click here to see the solution</button>\n -->\n\n<!-- ```{r} -->\n\n<!-- set.seed(42) -->\n\n<!-- cv = 5 -->\n\n<!-- hyper_lambda = runif(20,0, 0.2) -->\n\n<!-- hyper_alpha = runif(20, 0, 1) -->\n\n<!-- tuning_results =  -->\n\n<!--     sapply(1:length(hyper_alpha), function(k) { -->\n\n<!--         auc_inner = NULL -->\n\n<!--         for(j in 1:cv) { -->\n\n<!--           inner_split = as.integer(cut(1:nrow(data_obs), breaks = cv)) -->\n\n<!--           train_inner = data_obs[inner_split != j, ] -->\n\n<!--           test_inner = data_obs[inner_split == j, ] -->\n\n<!--           model = glmnet(survived~.,data = train_inner, family = \"binomial\", alpha = hyper_alpha[k], lambda = hyper_lambda[k]) -->\n\n<!--           auc_inner[j]= Metrics::auc(test_inner$survived, predict(model, test_inner, type = \"response\")) -->\n\n<!--         } -->\n\n<!--       return(mean(auc_inner)) -->\n\n<!--     }) -->\n\n<!-- results = data.frame(lambda = hyper_lambda, alpha = hyper_alpha,  AUC = tuning_results) -->\n\n<!-- print(results) -->\n\n<!-- print(results[which.max(results$AUC),]) -->\n\n<!-- ``` -->\n\n<!-- Predictions: -->\n\n<!-- ```{r, results='hide', message=FALSE, warning=FALSE} -->\n\n<!-- model = glmnet(survived~.,data = data_obs, family = \"binomial\",alpha = results[which.max(results$AUC),2]) -->\n\n<!-- predictions = predict(model, data_new, alpha = results$alpha[i], s = results[which.max(results$AUC),1], type = \"response\")[,1] -->\n\n<!-- write.csv(data.frame(y = predictions, file = \"Max_titanic_best_model.csv\")) -->\n\n<!-- ``` -->\n\n<!-- \n</div>\n -->\n\n::: {.callout-warning}\n#### Question: Hyperparameter tuning rf\n\n| Hyperparameter    | Explanation                                                                                                                              |\n|--------------|----------------------------------------------------------|\n| mtry              | Subset of features randomly selected in each node (from which the algorithm can select the feature that will be used to split the data). |\n| minimum node size | Minimal number of observations allowed in a node (before the branching is canceled)                                                      |\n| max depth         | Maximum number of tree depth                                                                                                             |\n\nCombing back to the titanic dataset from the morning, we want to optimize min node size in our RF using a simple CV.\n\nPrepare the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(EcoData)\nlibrary(dplyr)\nlibrary(missRanger)\ndata(titanic_ml)\ndata = titanic_ml\ndata = \n  data %>% select(survived, sex, age, fare, pclass)\ndata[,-1] = missRanger(data[,-1], verbose = 0)\n\ndata_sub =\n  data %>%\n    mutate(age = scales::rescale(age, c(0, 1)),\n           fare = scales::rescale(fare, c(0, 1))) %>%\n    mutate(sex = as.integer(sex) - 1L,\n           pclass = as.integer(pclass - 1L))\ndata_new = data_sub[is.na(data_sub$survived),] # for which we want to make predictions at the end\ndata_obs = data_sub[!is.na(data_sub$survived),] # data with known response\ndata_sub$survived = as.factor(data_sub$survived)\ndata_obs$survived = as.factor(data_obs$survived)\n```\n:::\n\n\n**Hints:**\n\n-   adjust the '`type`' argument in the `predict(…)` method (the default is to predict classes)\n-   when predicting probabilities, the randomForest will return a matrix, a column for each class, we are interested in the probability of surviving (so the second column)\n\n**Bonus:**\n\n-   tune min node size (and mtry)\n-   use more features\n\n::: {.callout-tip collapse=\"true\" appearance=\"minimal\"}\n## Code template\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ranger)\ndata_obs = data_sub[!is.na(data_sub$survived),] \nset.seed(42)\n\ncv = 3\nhyper_minnodesize = ...\n\ntuning_results =\n    sapply(1:length(hyper_minnodesize), function(k) {\n        auc_inner = NULL\n        for(j in 1:cv) {\n          inner_split = as.integer(cut(1:nrow(data_obs), breaks = cv))\n          train_inner = data_obs[inner_split != j, ]\n          test_inner = data_obs[inner_split == j, ]\n          \n          model = ranger(survived~.,data = train_inner, min.node.size = hyper_minnodesize[k], probability = TRUE)\n          predictions = predict(model, test_inner)$predictions[,2]\n          \n          auc_inner[j]= Metrics::auc(test_inner$survived, predictions)\n        }\n      return(mean(auc_inner))\n    })\n\nresults = data.frame(minnodesize = hyper_minnodesize, AUC = tuning_results)\n\nprint(results)\n```\n:::\n\n:::\n\n\n:::\n\n\n<div class='webex-solution'><button>Click here to see the solution</button>\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ranger)\ndata_obs = data_sub[!is.na(data_sub$survived),] \nset.seed(42)\n\ncv = 3\nhyper_minnodesize = sample(300, 20)\n\ntuning_results =\n    sapply(1:length(hyper_minnodesize), function(k) {\n        auc_inner = NULL\n        for(j in 1:cv) {\n          inner_split = as.integer(cut(1:nrow(data_obs), breaks = cv))\n          train_inner = data_obs[inner_split != j, ]\n          test_inner = data_obs[inner_split == j, ]\n          model = ranger(survived~.,data = train_inner, min.node.size = hyper_minnodesize[k], probability = TRUE)\n          predictions = predict(model, test_inner)$predictions[,2]\n          \n          auc_inner[j]= Metrics::auc(test_inner$survived, predictions)\n        }\n      return(mean(auc_inner))\n    })\n\nresults = data.frame(minnodesize = hyper_minnodesize, AUC = tuning_results)\n\nprint(results)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   minnodesize       AUC\n1           49 0.8263693\n2          153 0.8190603\n3           74 0.8198697\n4          228 0.8136903\n5          146 0.8174991\n6          122 0.8187347\n7          300 0.8083590\n8          128 0.8194997\n9           24 0.8303831\n10          89 0.8205758\n11         165 0.8167958\n12         110 0.8195956\n13          20 0.8279990\n14         291 0.8094130\n15         283 0.8102618\n16         109 0.8202722\n17           5 0.8264255\n18         212 0.8118643\n19         259 0.8129997\n20         292 0.8081752\n```\n:::\n:::\n\n\n\n\nMake predictions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel = ranger(survived~.,data = data_obs, min.node.size = results[which.max(results$AUC),1], probability = TRUE)\n\nwrite.csv(data.frame(y = predict(model, data_new)$predictions[,1]), file = \"Max_titanic_rf.csv\")\n```\n:::\n\n\n\n</div>\n\n\n\n\n::: {.callout-warning}\n#### Question: Hyperparameter tuning BRT\n\nImportant hyperparameters:\n\n| Hyperparameter | Explanation                                                                  |\n|----------------|--------------------------------------------------------|\n| eta            | learning rate (weighting of the sequential trees)                            |\n| max depth      | maximal depth in the trees (small = low complexity, large = high complexity) |\n| subsample      | subsample ratio of the data (bootstrap ratio)                                |\n| lambda         | regularization strength of the individual trees                              |\n| max tree       | maximal number of trees in the ensemble                                      |\n\n\n\nCombing back to the titanic dataset from the morning, we want to optimize max depth and the eta parameter in xgboost.\n\nPrepare the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(EcoData)\nlibrary(dplyr)\nlibrary(missRanger)\ndata(titanic_ml)\ndata = titanic_ml\ndata = \n  data %>% select(survived, sex, age, fare, pclass)\ndata[,-1] = missRanger(data[,-1], verbose = 0)\n\ndata_sub =\n  data %>%\n    mutate(age = scales::rescale(age, c(0, 1)),\n           fare = scales::rescale(fare, c(0, 1))) %>%\n    mutate(sex = as.integer(sex) - 1L,\n           pclass = as.integer(pclass - 1L))\ndata_new = data_sub[is.na(data_sub$survived),] # for which we want to make predictions at the end\ndata_obs = data_sub[!is.na(data_sub$survived),] # data with known response\n```\n:::\n\n\n::: {.callout-tip collapse=\"true\" appearance=\"minimal\"}\n## Code template\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(xgboost)\nset.seed(42)\ndata_obs = data_sub[!is.na(data_sub$survived),] \ncv = 3\n\nouter_split = as.integer(cut(1:nrow(data_obs), breaks = cv))\n\n# sample minnodesize values (must be integers)\nhyper_depth = ...\nhyper_eta = ...\n\ntuning_results =\n    sapply(1:length(hyper_minnodesize), function(k) {\n        auc_inner = NULL\n        for(j in 1:cv) {\n          inner_split = as.integer(cut(1:nrow(data_obs), breaks = cv))\n          train_inner = data_obs[inner_split != j, ]\n          test_inner = data_obs[inner_split == j, ]\n          \n          data_xg = xgb.DMatrix(data = as.matrix(train_inner[,-1]), label = train_inner$survived)\n          \n          model = xgboost(data_xg, nrounds = 16L, eta = hyper_eta[k], max_depth = hyper_depth[k], objective = \"reg:logistic\")\n          predictions = predict(model, newdata = as.matrix(test_inner)[,-1])\n          \n          auc_inner[j]= Metrics::auc(test_inner$survived, predictions)\n        }\n      return(mean(auc_inner))\n    })\n\nresults = data.frame(depth = hyper_depth, eta = hyper_eta, AUC = tuning_results)\n\nprint(results)\n```\n:::\n\n:::\n\n:::\n\n\n\n<div class='webex-solution'><button>Click here to see the solution</button>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(xgboost)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'xgboost'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:dplyr':\n\n    slice\n```\n:::\n\n```{.r .cell-code}\nset.seed(42)\ndata_obs = data_sub[!is.na(data_sub$survived),] \ncv = 3\n\nouter_split = as.integer(cut(1:nrow(data_obs), breaks = cv))\n\n# sample minnodesize values (must be integers)\nhyper_depth = sample(200, 20)\nhyper_eta = runif(20, 0, 1)\n\n\ntuning_results =\n    sapply(1:length(hyper_minnodesize), function(k) {\n        auc_inner = NULL\n        for(j in 1:cv) {\n          inner_split = as.integer(cut(1:nrow(data_obs), breaks = cv))\n          train_inner = data_obs[inner_split != j, ]\n          test_inner = data_obs[inner_split == j, ]\n          \n          data_xg = xgb.DMatrix(data = as.matrix(train_inner[,-1]), label = train_inner$survived)\n          \n          model = xgboost(data_xg, nrounds = 16L, eta = hyper_eta[k], max_depth = hyper_depth[k], objective = \"reg:logistic\")\n          predictions = predict(model, newdata = as.matrix(test_inner)[,-1])\n          \n          auc_inner[j]= Metrics::auc(test_inner$survived, predictions)\n        }\n      return(mean(auc_inner))\n    })\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]\ttrain-rmse:0.342302 \n[2]\ttrain-rmse:0.299191 \n[3]\ttrain-rmse:0.268716 \n[4]\ttrain-rmse:0.242803 \n[5]\ttrain-rmse:0.213241 \n[6]\ttrain-rmse:0.192588 \n[7]\ttrain-rmse:0.182530 \n[8]\ttrain-rmse:0.174108 \n[9]\ttrain-rmse:0.168385 \n[10]\ttrain-rmse:0.163249 \n[11]\ttrain-rmse:0.157466 \n[12]\ttrain-rmse:0.154353 \n[13]\ttrain-rmse:0.150252 \n[14]\ttrain-rmse:0.146819 \n[15]\ttrain-rmse:0.144884 \n[16]\ttrain-rmse:0.140921 \n[1]\ttrain-rmse:0.355586 \n[2]\ttrain-rmse:0.303011 \n[3]\ttrain-rmse:0.279725 \n[4]\ttrain-rmse:0.259973 \n[5]\ttrain-rmse:0.244192 \n[6]\ttrain-rmse:0.227948 \n[7]\ttrain-rmse:0.213377 \n[8]\ttrain-rmse:0.203723 \n[9]\ttrain-rmse:0.195484 \n[10]\ttrain-rmse:0.189591 \n[11]\ttrain-rmse:0.185054 \n[12]\ttrain-rmse:0.180021 \n[13]\ttrain-rmse:0.173629 \n[14]\ttrain-rmse:0.168810 \n[15]\ttrain-rmse:0.164530 \n[16]\ttrain-rmse:0.162001 \n[1]\ttrain-rmse:0.355397 \n[2]\ttrain-rmse:0.312393 \n[3]\ttrain-rmse:0.288034 \n[4]\ttrain-rmse:0.262297 \n[5]\ttrain-rmse:0.242050 \n[6]\ttrain-rmse:0.231974 \n[7]\ttrain-rmse:0.215598 \n[8]\ttrain-rmse:0.206428 \n[9]\ttrain-rmse:0.197788 \n[10]\ttrain-rmse:0.190170 \n[11]\ttrain-rmse:0.183465 \n[12]\ttrain-rmse:0.177776 \n[13]\ttrain-rmse:0.171649 \n[14]\ttrain-rmse:0.165496 \n[15]\ttrain-rmse:0.161950 \n[16]\ttrain-rmse:0.157418 \n[1]\ttrain-rmse:0.344811 \n[2]\ttrain-rmse:0.301841 \n[3]\ttrain-rmse:0.269651 \n[4]\ttrain-rmse:0.241837 \n[5]\ttrain-rmse:0.223290 \n[6]\ttrain-rmse:0.207494 \n[7]\ttrain-rmse:0.195355 \n[8]\ttrain-rmse:0.186628 \n[9]\ttrain-rmse:0.174448 \n[10]\ttrain-rmse:0.168487 \n[11]\ttrain-rmse:0.159994 \n[12]\ttrain-rmse:0.156250 \n[13]\ttrain-rmse:0.151392 \n[14]\ttrain-rmse:0.146957 \n[15]\ttrain-rmse:0.143999 \n[16]\ttrain-rmse:0.141612 \n[1]\ttrain-rmse:0.357827 \n[2]\ttrain-rmse:0.304876 \n[3]\ttrain-rmse:0.276290 \n[4]\ttrain-rmse:0.257492 \n[5]\ttrain-rmse:0.242544 \n[6]\ttrain-rmse:0.229373 \n[7]\ttrain-rmse:0.216883 \n[8]\ttrain-rmse:0.207260 \n[9]\ttrain-rmse:0.198043 \n[10]\ttrain-rmse:0.191355 \n[11]\ttrain-rmse:0.186312 \n[12]\ttrain-rmse:0.180745 \n[13]\ttrain-rmse:0.174197 \n[14]\ttrain-rmse:0.169893 \n[15]\ttrain-rmse:0.165370 \n[16]\ttrain-rmse:0.163342 \n[1]\ttrain-rmse:0.357557 \n[2]\ttrain-rmse:0.311745 \n[3]\ttrain-rmse:0.286003 \n[4]\ttrain-rmse:0.254900 \n[5]\ttrain-rmse:0.241741 \n[6]\ttrain-rmse:0.226210 \n[7]\ttrain-rmse:0.214579 \n[8]\ttrain-rmse:0.203467 \n[9]\ttrain-rmse:0.197486 \n[10]\ttrain-rmse:0.189492 \n[11]\ttrain-rmse:0.183023 \n[12]\ttrain-rmse:0.177307 \n[13]\ttrain-rmse:0.172381 \n[14]\ttrain-rmse:0.167487 \n[15]\ttrain-rmse:0.163035 \n[16]\ttrain-rmse:0.160142 \n[1]\ttrain-rmse:0.479481 \n[2]\ttrain-rmse:0.461296 \n[3]\ttrain-rmse:0.444457 \n[4]\ttrain-rmse:0.429080 \n[5]\ttrain-rmse:0.415456 \n[6]\ttrain-rmse:0.402267 \n[7]\ttrain-rmse:0.390538 \n[8]\ttrain-rmse:0.379364 \n[9]\ttrain-rmse:0.369656 \n[10]\ttrain-rmse:0.360619 \n[11]\ttrain-rmse:0.352002 \n[12]\ttrain-rmse:0.344516 \n[13]\ttrain-rmse:0.337348 \n[14]\ttrain-rmse:0.330759 \n[15]\ttrain-rmse:0.325420 \n[16]\ttrain-rmse:0.320087 \n[1]\ttrain-rmse:0.480985 \n[2]\ttrain-rmse:0.463953 \n[3]\ttrain-rmse:0.447759 \n[4]\ttrain-rmse:0.432252 \n[5]\ttrain-rmse:0.418343 \n[6]\ttrain-rmse:0.405816 \n[7]\ttrain-rmse:0.394936 \n[8]\ttrain-rmse:0.385023 \n[9]\ttrain-rmse:0.376260 \n[10]\ttrain-rmse:0.368393 \n[11]\ttrain-rmse:0.361204 \n[12]\ttrain-rmse:0.353261 \n[13]\ttrain-rmse:0.346243 \n[14]\ttrain-rmse:0.339924 \n[15]\ttrain-rmse:0.334026 \n[16]\ttrain-rmse:0.329024 \n[1]\ttrain-rmse:0.480786 \n[2]\ttrain-rmse:0.463307 \n[3]\ttrain-rmse:0.446951 \n[4]\ttrain-rmse:0.432430 \n[5]\ttrain-rmse:0.419509 \n[6]\ttrain-rmse:0.407269 \n[7]\ttrain-rmse:0.396934 \n[8]\ttrain-rmse:0.386748 \n[9]\ttrain-rmse:0.377648 \n[10]\ttrain-rmse:0.368996 \n[11]\ttrain-rmse:0.361208 \n[12]\ttrain-rmse:0.354212 \n[13]\ttrain-rmse:0.347979 \n[14]\ttrain-rmse:0.342421 \n[15]\ttrain-rmse:0.337069 \n[16]\ttrain-rmse:0.331923 \n[1]\ttrain-rmse:0.391331 \n[2]\ttrain-rmse:0.335947 \n[3]\ttrain-rmse:0.305201 \n[4]\ttrain-rmse:0.281717 \n[5]\ttrain-rmse:0.265914 \n[6]\ttrain-rmse:0.252585 \n[7]\ttrain-rmse:0.237463 \n[8]\ttrain-rmse:0.223741 \n[9]\ttrain-rmse:0.214639 \n[10]\ttrain-rmse:0.207821 \n[11]\ttrain-rmse:0.199719 \n[12]\ttrain-rmse:0.193863 \n[13]\ttrain-rmse:0.186355 \n[14]\ttrain-rmse:0.182046 \n[15]\ttrain-rmse:0.177708 \n[16]\ttrain-rmse:0.173773 \n[1]\ttrain-rmse:0.399989 \n[2]\ttrain-rmse:0.347930 \n[3]\ttrain-rmse:0.314260 \n[4]\ttrain-rmse:0.293303 \n[5]\ttrain-rmse:0.276249 \n[6]\ttrain-rmse:0.264806 \n[7]\ttrain-rmse:0.253870 \n[8]\ttrain-rmse:0.244993 \n[9]\ttrain-rmse:0.237339 \n[10]\ttrain-rmse:0.229343 \n[11]\ttrain-rmse:0.222446 \n[12]\ttrain-rmse:0.216332 \n[13]\ttrain-rmse:0.211237 \n[14]\ttrain-rmse:0.206756 \n[15]\ttrain-rmse:0.203657 \n[16]\ttrain-rmse:0.199263 \n[1]\ttrain-rmse:0.399253 \n[2]\ttrain-rmse:0.349250 \n[3]\ttrain-rmse:0.323812 \n[4]\ttrain-rmse:0.303647 \n[5]\ttrain-rmse:0.291414 \n[6]\ttrain-rmse:0.278053 \n[7]\ttrain-rmse:0.269020 \n[8]\ttrain-rmse:0.255987 \n[9]\ttrain-rmse:0.247910 \n[10]\ttrain-rmse:0.239493 \n[11]\ttrain-rmse:0.229426 \n[12]\ttrain-rmse:0.221866 \n[13]\ttrain-rmse:0.216462 \n[14]\ttrain-rmse:0.211906 \n[15]\ttrain-rmse:0.206869 \n[16]\ttrain-rmse:0.203552 \n[1]\ttrain-rmse:0.412613 \n[2]\ttrain-rmse:0.356528 \n[3]\ttrain-rmse:0.324341 \n[4]\ttrain-rmse:0.302757 \n[5]\ttrain-rmse:0.286213 \n[6]\ttrain-rmse:0.272936 \n[7]\ttrain-rmse:0.259950 \n[8]\ttrain-rmse:0.251537 \n[9]\ttrain-rmse:0.242169 \n[10]\ttrain-rmse:0.235786 \n[11]\ttrain-rmse:0.225925 \n[12]\ttrain-rmse:0.220411 \n[13]\ttrain-rmse:0.214880 \n[14]\ttrain-rmse:0.208503 \n[15]\ttrain-rmse:0.201849 \n[16]\ttrain-rmse:0.198086 \n[1]\ttrain-rmse:0.419435 \n[2]\ttrain-rmse:0.369414 \n[3]\ttrain-rmse:0.334817 \n[4]\ttrain-rmse:0.313577 \n[5]\ttrain-rmse:0.296743 \n[6]\ttrain-rmse:0.284304 \n[7]\ttrain-rmse:0.273065 \n[8]\ttrain-rmse:0.264564 \n[9]\ttrain-rmse:0.252990 \n[10]\ttrain-rmse:0.246305 \n[11]\ttrain-rmse:0.239789 \n[12]\ttrain-rmse:0.233099 \n[13]\ttrain-rmse:0.229367 \n[14]\ttrain-rmse:0.224895 \n[15]\ttrain-rmse:0.220131 \n[16]\ttrain-rmse:0.216076 \n[1]\ttrain-rmse:0.418746 \n[2]\ttrain-rmse:0.369491 \n[3]\ttrain-rmse:0.336421 \n[4]\ttrain-rmse:0.316537 \n[5]\ttrain-rmse:0.302093 \n[6]\ttrain-rmse:0.289140 \n[7]\ttrain-rmse:0.278160 \n[8]\ttrain-rmse:0.268178 \n[9]\ttrain-rmse:0.261453 \n[10]\ttrain-rmse:0.254947 \n[11]\ttrain-rmse:0.249780 \n[12]\ttrain-rmse:0.241135 \n[13]\ttrain-rmse:0.234711 \n[14]\ttrain-rmse:0.227473 \n[15]\ttrain-rmse:0.222749 \n[16]\ttrain-rmse:0.217501 \n[1]\ttrain-rmse:0.347540 \n[2]\ttrain-rmse:0.303745 \n[3]\ttrain-rmse:0.273687 \n[4]\ttrain-rmse:0.248077 \n[5]\ttrain-rmse:0.223700 \n[6]\ttrain-rmse:0.207197 \n[7]\ttrain-rmse:0.193925 \n[8]\ttrain-rmse:0.186242 \n[9]\ttrain-rmse:0.178182 \n[10]\ttrain-rmse:0.173075 \n[11]\ttrain-rmse:0.166573 \n[12]\ttrain-rmse:0.162239 \n[13]\ttrain-rmse:0.158070 \n[14]\ttrain-rmse:0.149938 \n[15]\ttrain-rmse:0.144231 \n[16]\ttrain-rmse:0.142591 \n[1]\ttrain-rmse:0.360274 \n[2]\ttrain-rmse:0.309340 \n[3]\ttrain-rmse:0.279982 \n[4]\ttrain-rmse:0.257875 \n[5]\ttrain-rmse:0.242942 \n[6]\ttrain-rmse:0.224303 \n[7]\ttrain-rmse:0.212563 \n[8]\ttrain-rmse:0.206164 \n[9]\ttrain-rmse:0.199549 \n[10]\ttrain-rmse:0.193388 \n[11]\ttrain-rmse:0.186543 \n[12]\ttrain-rmse:0.182867 \n[13]\ttrain-rmse:0.177301 \n[14]\ttrain-rmse:0.173397 \n[15]\ttrain-rmse:0.169897 \n[16]\ttrain-rmse:0.166461 \n[1]\ttrain-rmse:0.359929 \n[2]\ttrain-rmse:0.311848 \n[3]\ttrain-rmse:0.286379 \n[4]\ttrain-rmse:0.264875 \n[5]\ttrain-rmse:0.247836 \n[6]\ttrain-rmse:0.228336 \n[7]\ttrain-rmse:0.218550 \n[8]\ttrain-rmse:0.209393 \n[9]\ttrain-rmse:0.199119 \n[10]\ttrain-rmse:0.191081 \n[11]\ttrain-rmse:0.183728 \n[12]\ttrain-rmse:0.179117 \n[13]\ttrain-rmse:0.172885 \n[14]\ttrain-rmse:0.168394 \n[15]\ttrain-rmse:0.164605 \n[16]\ttrain-rmse:0.160796 \n[1]\ttrain-rmse:0.402424 \n[2]\ttrain-rmse:0.344908 \n[3]\ttrain-rmse:0.311936 \n[4]\ttrain-rmse:0.293220 \n[5]\ttrain-rmse:0.276182 \n[6]\ttrain-rmse:0.263648 \n[7]\ttrain-rmse:0.251038 \n[8]\ttrain-rmse:0.241413 \n[9]\ttrain-rmse:0.228978 \n[10]\ttrain-rmse:0.220899 \n[11]\ttrain-rmse:0.211078 \n[12]\ttrain-rmse:0.204254 \n[13]\ttrain-rmse:0.199894 \n[14]\ttrain-rmse:0.194752 \n[15]\ttrain-rmse:0.191196 \n[16]\ttrain-rmse:0.186992 \n[1]\ttrain-rmse:0.410115 \n[2]\ttrain-rmse:0.358492 \n[3]\ttrain-rmse:0.326234 \n[4]\ttrain-rmse:0.301400 \n[5]\ttrain-rmse:0.286322 \n[6]\ttrain-rmse:0.273809 \n[7]\ttrain-rmse:0.262014 \n[8]\ttrain-rmse:0.253343 \n[9]\ttrain-rmse:0.245150 \n[10]\ttrain-rmse:0.235882 \n[11]\ttrain-rmse:0.231059 \n[12]\ttrain-rmse:0.224277 \n[13]\ttrain-rmse:0.217895 \n[14]\ttrain-rmse:0.212065 \n[15]\ttrain-rmse:0.208399 \n[16]\ttrain-rmse:0.204358 \n[1]\ttrain-rmse:0.409393 \n[2]\ttrain-rmse:0.360259 \n[3]\ttrain-rmse:0.328650 \n[4]\ttrain-rmse:0.307963 \n[5]\ttrain-rmse:0.293266 \n[6]\ttrain-rmse:0.282228 \n[7]\ttrain-rmse:0.272837 \n[8]\ttrain-rmse:0.265002 \n[9]\ttrain-rmse:0.255129 \n[10]\ttrain-rmse:0.248240 \n[11]\ttrain-rmse:0.241525 \n[12]\ttrain-rmse:0.236144 \n[13]\ttrain-rmse:0.229078 \n[14]\ttrain-rmse:0.223361 \n[15]\ttrain-rmse:0.219269 \n[16]\ttrain-rmse:0.214754 \n[1]\ttrain-rmse:0.352912 \n[2]\ttrain-rmse:0.305237 \n[3]\ttrain-rmse:0.276568 \n[4]\ttrain-rmse:0.250577 \n[5]\ttrain-rmse:0.231958 \n[6]\ttrain-rmse:0.212720 \n[7]\ttrain-rmse:0.203744 \n[8]\ttrain-rmse:0.195451 \n[9]\ttrain-rmse:0.184679 \n[10]\ttrain-rmse:0.175920 \n[11]\ttrain-rmse:0.170978 \n[12]\ttrain-rmse:0.164906 \n[13]\ttrain-rmse:0.161527 \n[14]\ttrain-rmse:0.159188 \n[15]\ttrain-rmse:0.155948 \n[16]\ttrain-rmse:0.151337 \n[1]\ttrain-rmse:0.365109 \n[2]\ttrain-rmse:0.309687 \n[3]\ttrain-rmse:0.280797 \n[4]\ttrain-rmse:0.261068 \n[5]\ttrain-rmse:0.241774 \n[6]\ttrain-rmse:0.227370 \n[7]\ttrain-rmse:0.215068 \n[8]\ttrain-rmse:0.207891 \n[9]\ttrain-rmse:0.200634 \n[10]\ttrain-rmse:0.192557 \n[11]\ttrain-rmse:0.187296 \n[12]\ttrain-rmse:0.181621 \n[13]\ttrain-rmse:0.178007 \n[14]\ttrain-rmse:0.174441 \n[15]\ttrain-rmse:0.170647 \n[16]\ttrain-rmse:0.168465 \n[1]\ttrain-rmse:0.364647 \n[2]\ttrain-rmse:0.319787 \n[3]\ttrain-rmse:0.295209 \n[4]\ttrain-rmse:0.275162 \n[5]\ttrain-rmse:0.259882 \n[6]\ttrain-rmse:0.244643 \n[7]\ttrain-rmse:0.227988 \n[8]\ttrain-rmse:0.217011 \n[9]\ttrain-rmse:0.209808 \n[10]\ttrain-rmse:0.200657 \n[11]\ttrain-rmse:0.194938 \n[12]\ttrain-rmse:0.187570 \n[13]\ttrain-rmse:0.183875 \n[14]\ttrain-rmse:0.179330 \n[15]\ttrain-rmse:0.173863 \n[16]\ttrain-rmse:0.169534 \n[1]\ttrain-rmse:0.362176 \n[2]\ttrain-rmse:0.311901 \n[3]\ttrain-rmse:0.280702 \n[4]\ttrain-rmse:0.260316 \n[5]\ttrain-rmse:0.239976 \n[6]\ttrain-rmse:0.224227 \n[7]\ttrain-rmse:0.212696 \n[8]\ttrain-rmse:0.204659 \n[9]\ttrain-rmse:0.197053 \n[10]\ttrain-rmse:0.186446 \n[11]\ttrain-rmse:0.180915 \n[12]\ttrain-rmse:0.176416 \n[13]\ttrain-rmse:0.171562 \n[14]\ttrain-rmse:0.167962 \n[15]\ttrain-rmse:0.162565 \n[16]\ttrain-rmse:0.158046 \n[1]\ttrain-rmse:0.373483 \n[2]\ttrain-rmse:0.323919 \n[3]\ttrain-rmse:0.297025 \n[4]\ttrain-rmse:0.271697 \n[5]\ttrain-rmse:0.258279 \n[6]\ttrain-rmse:0.245115 \n[7]\ttrain-rmse:0.232653 \n[8]\ttrain-rmse:0.222997 \n[9]\ttrain-rmse:0.214197 \n[10]\ttrain-rmse:0.205852 \n[11]\ttrain-rmse:0.201917 \n[12]\ttrain-rmse:0.194916 \n[13]\ttrain-rmse:0.189427 \n[14]\ttrain-rmse:0.186183 \n[15]\ttrain-rmse:0.182289 \n[16]\ttrain-rmse:0.177717 \n[1]\ttrain-rmse:0.372885 \n[2]\ttrain-rmse:0.325785 \n[3]\ttrain-rmse:0.296763 \n[4]\ttrain-rmse:0.279764 \n[5]\ttrain-rmse:0.265770 \n[6]\ttrain-rmse:0.253805 \n[7]\ttrain-rmse:0.239162 \n[8]\ttrain-rmse:0.228320 \n[9]\ttrain-rmse:0.219802 \n[10]\ttrain-rmse:0.210701 \n[11]\ttrain-rmse:0.203631 \n[12]\ttrain-rmse:0.197762 \n[13]\ttrain-rmse:0.192693 \n[14]\ttrain-rmse:0.186841 \n[15]\ttrain-rmse:0.183264 \n[16]\ttrain-rmse:0.178558 \n[1]\ttrain-rmse:0.355068 \n[2]\ttrain-rmse:0.306965 \n[3]\ttrain-rmse:0.278270 \n[4]\ttrain-rmse:0.253591 \n[5]\ttrain-rmse:0.230023 \n[6]\ttrain-rmse:0.216835 \n[7]\ttrain-rmse:0.206119 \n[8]\ttrain-rmse:0.196151 \n[9]\ttrain-rmse:0.188044 \n[10]\ttrain-rmse:0.182430 \n[11]\ttrain-rmse:0.174891 \n[12]\ttrain-rmse:0.166900 \n[13]\ttrain-rmse:0.164163 \n[14]\ttrain-rmse:0.160384 \n[15]\ttrain-rmse:0.156842 \n[16]\ttrain-rmse:0.154538 \n[1]\ttrain-rmse:0.367055 \n[2]\ttrain-rmse:0.312446 \n[3]\ttrain-rmse:0.282541 \n[4]\ttrain-rmse:0.263486 \n[5]\ttrain-rmse:0.247370 \n[6]\ttrain-rmse:0.229723 \n[7]\ttrain-rmse:0.222708 \n[8]\ttrain-rmse:0.212426 \n[9]\ttrain-rmse:0.203696 \n[10]\ttrain-rmse:0.196197 \n[11]\ttrain-rmse:0.191197 \n[12]\ttrain-rmse:0.185815 \n[13]\ttrain-rmse:0.181837 \n[14]\ttrain-rmse:0.177194 \n[15]\ttrain-rmse:0.174400 \n[16]\ttrain-rmse:0.171251 \n[1]\ttrain-rmse:0.366555 \n[2]\ttrain-rmse:0.321138 \n[3]\ttrain-rmse:0.297371 \n[4]\ttrain-rmse:0.277279 \n[5]\ttrain-rmse:0.257130 \n[6]\ttrain-rmse:0.246154 \n[7]\ttrain-rmse:0.230870 \n[8]\ttrain-rmse:0.222219 \n[9]\ttrain-rmse:0.214729 \n[10]\ttrain-rmse:0.203458 \n[11]\ttrain-rmse:0.195316 \n[12]\ttrain-rmse:0.190983 \n[13]\ttrain-rmse:0.184888 \n[14]\ttrain-rmse:0.177407 \n[15]\ttrain-rmse:0.173036 \n[16]\ttrain-rmse:0.169503 \n[1]\ttrain-rmse:0.413003 \n[2]\ttrain-rmse:0.356993 \n[3]\ttrain-rmse:0.324332 \n[4]\ttrain-rmse:0.302632 \n[5]\ttrain-rmse:0.286470 \n[6]\ttrain-rmse:0.273611 \n[7]\ttrain-rmse:0.260870 \n[8]\ttrain-rmse:0.253180 \n[9]\ttrain-rmse:0.243336 \n[10]\ttrain-rmse:0.236671 \n[11]\ttrain-rmse:0.228742 \n[12]\ttrain-rmse:0.221460 \n[13]\ttrain-rmse:0.214504 \n[14]\ttrain-rmse:0.208995 \n[15]\ttrain-rmse:0.203657 \n[16]\ttrain-rmse:0.198992 \n[1]\ttrain-rmse:0.419792 \n[2]\ttrain-rmse:0.369830 \n[3]\ttrain-rmse:0.335221 \n[4]\ttrain-rmse:0.313943 \n[5]\ttrain-rmse:0.297096 \n[6]\ttrain-rmse:0.285331 \n[7]\ttrain-rmse:0.274201 \n[8]\ttrain-rmse:0.265720 \n[9]\ttrain-rmse:0.257348 \n[10]\ttrain-rmse:0.249674 \n[11]\ttrain-rmse:0.242869 \n[12]\ttrain-rmse:0.237043 \n[13]\ttrain-rmse:0.230208 \n[14]\ttrain-rmse:0.226608 \n[15]\ttrain-rmse:0.223174 \n[16]\ttrain-rmse:0.217211 \n[1]\ttrain-rmse:0.419104 \n[2]\ttrain-rmse:0.369898 \n[3]\ttrain-rmse:0.336688 \n[4]\ttrain-rmse:0.316724 \n[5]\ttrain-rmse:0.302290 \n[6]\ttrain-rmse:0.289893 \n[7]\ttrain-rmse:0.278490 \n[8]\ttrain-rmse:0.270668 \n[9]\ttrain-rmse:0.264460 \n[10]\ttrain-rmse:0.256828 \n[11]\ttrain-rmse:0.251322 \n[12]\ttrain-rmse:0.244360 \n[13]\ttrain-rmse:0.239434 \n[14]\ttrain-rmse:0.232481 \n[15]\ttrain-rmse:0.228628 \n[16]\ttrain-rmse:0.223731 \n[1]\ttrain-rmse:0.367975 \n[2]\ttrain-rmse:0.316612 \n[3]\ttrain-rmse:0.285462 \n[4]\ttrain-rmse:0.263922 \n[5]\ttrain-rmse:0.245271 \n[6]\ttrain-rmse:0.230708 \n[7]\ttrain-rmse:0.221704 \n[8]\ttrain-rmse:0.207412 \n[9]\ttrain-rmse:0.198099 \n[10]\ttrain-rmse:0.191893 \n[11]\ttrain-rmse:0.187489 \n[12]\ttrain-rmse:0.178444 \n[13]\ttrain-rmse:0.173196 \n[14]\ttrain-rmse:0.165931 \n[15]\ttrain-rmse:0.164044 \n[16]\ttrain-rmse:0.160759 \n[1]\ttrain-rmse:0.378739 \n[2]\ttrain-rmse:0.319681 \n[3]\ttrain-rmse:0.293201 \n[4]\ttrain-rmse:0.270693 \n[5]\ttrain-rmse:0.256631 \n[6]\ttrain-rmse:0.240604 \n[7]\ttrain-rmse:0.232202 \n[8]\ttrain-rmse:0.224702 \n[9]\ttrain-rmse:0.214182 \n[10]\ttrain-rmse:0.207344 \n[11]\ttrain-rmse:0.200937 \n[12]\ttrain-rmse:0.196956 \n[13]\ttrain-rmse:0.192187 \n[14]\ttrain-rmse:0.188495 \n[15]\ttrain-rmse:0.184100 \n[16]\ttrain-rmse:0.181208 \n[1]\ttrain-rmse:0.378086 \n[2]\ttrain-rmse:0.327091 \n[3]\ttrain-rmse:0.297425 \n[4]\ttrain-rmse:0.279148 \n[5]\ttrain-rmse:0.265884 \n[6]\ttrain-rmse:0.248846 \n[7]\ttrain-rmse:0.240555 \n[8]\ttrain-rmse:0.228152 \n[9]\ttrain-rmse:0.220610 \n[10]\ttrain-rmse:0.213126 \n[11]\ttrain-rmse:0.204972 \n[12]\ttrain-rmse:0.201485 \n[13]\ttrain-rmse:0.194622 \n[14]\ttrain-rmse:0.188000 \n[15]\ttrain-rmse:0.182221 \n[16]\ttrain-rmse:0.178003 \n[1]\ttrain-rmse:0.499000 \n[2]\ttrain-rmse:0.498010 \n[3]\ttrain-rmse:0.497026 \n[4]\ttrain-rmse:0.496047 \n[5]\ttrain-rmse:0.495073 \n[6]\ttrain-rmse:0.494104 \n[7]\ttrain-rmse:0.493140 \n[8]\ttrain-rmse:0.492181 \n[9]\ttrain-rmse:0.491226 \n[10]\ttrain-rmse:0.490275 \n[11]\ttrain-rmse:0.489330 \n[12]\ttrain-rmse:0.488389 \n[13]\ttrain-rmse:0.487453 \n[14]\ttrain-rmse:0.486522 \n[15]\ttrain-rmse:0.485596 \n[16]\ttrain-rmse:0.484675 \n[1]\ttrain-rmse:0.499072 \n[2]\ttrain-rmse:0.498161 \n[3]\ttrain-rmse:0.497256 \n[4]\ttrain-rmse:0.496356 \n[5]\ttrain-rmse:0.495460 \n[6]\ttrain-rmse:0.494569 \n[7]\ttrain-rmse:0.493684 \n[8]\ttrain-rmse:0.492802 \n[9]\ttrain-rmse:0.491926 \n[10]\ttrain-rmse:0.491055 \n[11]\ttrain-rmse:0.490188 \n[12]\ttrain-rmse:0.489326 \n[13]\ttrain-rmse:0.488468 \n[14]\ttrain-rmse:0.487616 \n[15]\ttrain-rmse:0.486768 \n[16]\ttrain-rmse:0.485924 \n[1]\ttrain-rmse:0.499062 \n[2]\ttrain-rmse:0.498143 \n[3]\ttrain-rmse:0.497230 \n[4]\ttrain-rmse:0.496317 \n[5]\ttrain-rmse:0.495408 \n[6]\ttrain-rmse:0.494476 \n[7]\ttrain-rmse:0.493582 \n[8]\ttrain-rmse:0.492622 \n[9]\ttrain-rmse:0.491667 \n[10]\ttrain-rmse:0.490716 \n[11]\ttrain-rmse:0.489771 \n[12]\ttrain-rmse:0.488830 \n[13]\ttrain-rmse:0.487895 \n[14]\ttrain-rmse:0.486964 \n[15]\ttrain-rmse:0.486038 \n[16]\ttrain-rmse:0.485116 \n[1]\ttrain-rmse:0.353172 \n[2]\ttrain-rmse:0.305445 \n[3]\ttrain-rmse:0.276743 \n[4]\ttrain-rmse:0.250790 \n[5]\ttrain-rmse:0.232189 \n[6]\ttrain-rmse:0.212974 \n[7]\ttrain-rmse:0.204002 \n[8]\ttrain-rmse:0.195040 \n[9]\ttrain-rmse:0.183821 \n[10]\ttrain-rmse:0.175506 \n[11]\ttrain-rmse:0.172033 \n[12]\ttrain-rmse:0.165681 \n[13]\ttrain-rmse:0.159818 \n[14]\ttrain-rmse:0.156798 \n[15]\ttrain-rmse:0.153866 \n[16]\ttrain-rmse:0.150766 \n[1]\ttrain-rmse:0.365344 \n[2]\ttrain-rmse:0.309894 \n[3]\ttrain-rmse:0.281018 \n[4]\ttrain-rmse:0.261295 \n[5]\ttrain-rmse:0.242028 \n[6]\ttrain-rmse:0.227639 \n[7]\ttrain-rmse:0.215355 \n[8]\ttrain-rmse:0.208188 \n[9]\ttrain-rmse:0.200927 \n[10]\ttrain-rmse:0.192864 \n[11]\ttrain-rmse:0.187600 \n[12]\ttrain-rmse:0.181933 \n[13]\ttrain-rmse:0.178311 \n[14]\ttrain-rmse:0.174738 \n[15]\ttrain-rmse:0.170801 \n[16]\ttrain-rmse:0.168272 \n[1]\ttrain-rmse:0.364877 \n[2]\ttrain-rmse:0.319963 \n[3]\ttrain-rmse:0.295365 \n[4]\ttrain-rmse:0.275363 \n[5]\ttrain-rmse:0.260114 \n[6]\ttrain-rmse:0.244910 \n[7]\ttrain-rmse:0.228209 \n[8]\ttrain-rmse:0.215883 \n[9]\ttrain-rmse:0.209065 \n[10]\ttrain-rmse:0.201187 \n[11]\ttrain-rmse:0.192461 \n[12]\ttrain-rmse:0.185839 \n[13]\ttrain-rmse:0.178898 \n[14]\ttrain-rmse:0.173226 \n[15]\ttrain-rmse:0.167694 \n[16]\ttrain-rmse:0.163567 \n[1]\ttrain-rmse:0.498143 \n[2]\ttrain-rmse:0.496315 \n[3]\ttrain-rmse:0.494504 \n[4]\ttrain-rmse:0.492711 \n[5]\ttrain-rmse:0.490936 \n[6]\ttrain-rmse:0.489174 \n[7]\ttrain-rmse:0.487429 \n[8]\ttrain-rmse:0.485702 \n[9]\ttrain-rmse:0.483991 \n[10]\ttrain-rmse:0.482297 \n[11]\ttrain-rmse:0.480619 \n[12]\ttrain-rmse:0.478958 \n[13]\ttrain-rmse:0.477314 \n[14]\ttrain-rmse:0.475685 \n[15]\ttrain-rmse:0.474073 \n[16]\ttrain-rmse:0.472476 \n[1]\ttrain-rmse:0.498277 \n[2]\ttrain-rmse:0.496595 \n[3]\ttrain-rmse:0.494930 \n[4]\ttrain-rmse:0.493283 \n[5]\ttrain-rmse:0.491651 \n[6]\ttrain-rmse:0.490036 \n[7]\ttrain-rmse:0.488438 \n[8]\ttrain-rmse:0.486855 \n[9]\ttrain-rmse:0.485289 \n[10]\ttrain-rmse:0.483737 \n[11]\ttrain-rmse:0.482203 \n[12]\ttrain-rmse:0.480684 \n[13]\ttrain-rmse:0.479142 \n[14]\ttrain-rmse:0.477613 \n[15]\ttrain-rmse:0.476101 \n[16]\ttrain-rmse:0.474643 \n[1]\ttrain-rmse:0.498258 \n[2]\ttrain-rmse:0.496562 \n[3]\ttrain-rmse:0.494873 \n[4]\ttrain-rmse:0.493133 \n[5]\ttrain-rmse:0.491486 \n[6]\ttrain-rmse:0.489723 \n[7]\ttrain-rmse:0.487977 \n[8]\ttrain-rmse:0.486248 \n[9]\ttrain-rmse:0.484536 \n[10]\ttrain-rmse:0.482840 \n[11]\ttrain-rmse:0.481160 \n[12]\ttrain-rmse:0.479496 \n[13]\ttrain-rmse:0.477849 \n[14]\ttrain-rmse:0.476217 \n[15]\ttrain-rmse:0.474602 \n[16]\ttrain-rmse:0.473010 \n[1]\ttrain-rmse:0.450145 \n[2]\ttrain-rmse:0.412699 \n[3]\ttrain-rmse:0.382944 \n[4]\ttrain-rmse:0.359949 \n[5]\ttrain-rmse:0.341843 \n[6]\ttrain-rmse:0.326485 \n[7]\ttrain-rmse:0.314051 \n[8]\ttrain-rmse:0.302660 \n[9]\ttrain-rmse:0.292461 \n[10]\ttrain-rmse:0.284359 \n[11]\ttrain-rmse:0.277805 \n[12]\ttrain-rmse:0.271235 \n[13]\ttrain-rmse:0.265533 \n[14]\ttrain-rmse:0.260534 \n[15]\ttrain-rmse:0.255269 \n[16]\ttrain-rmse:0.250541 \n[1]\ttrain-rmse:0.453901 \n[2]\ttrain-rmse:0.420021 \n[3]\ttrain-rmse:0.389930 \n[4]\ttrain-rmse:0.367231 \n[5]\ttrain-rmse:0.346715 \n[6]\ttrain-rmse:0.331994 \n[7]\ttrain-rmse:0.320548 \n[8]\ttrain-rmse:0.311274 \n[9]\ttrain-rmse:0.300817 \n[10]\ttrain-rmse:0.292880 \n[11]\ttrain-rmse:0.285697 \n[12]\ttrain-rmse:0.279500 \n[13]\ttrain-rmse:0.273323 \n[14]\ttrain-rmse:0.268322 \n[15]\ttrain-rmse:0.263914 \n[16]\ttrain-rmse:0.259803 \n[1]\ttrain-rmse:0.453446 \n[2]\ttrain-rmse:0.418830 \n[3]\ttrain-rmse:0.391201 \n[4]\ttrain-rmse:0.368218 \n[5]\ttrain-rmse:0.351641 \n[6]\ttrain-rmse:0.336232 \n[7]\ttrain-rmse:0.323923 \n[8]\ttrain-rmse:0.315101 \n[9]\ttrain-rmse:0.306496 \n[10]\ttrain-rmse:0.300159 \n[11]\ttrain-rmse:0.294056 \n[12]\ttrain-rmse:0.288296 \n[13]\ttrain-rmse:0.284111 \n[14]\ttrain-rmse:0.278262 \n[15]\ttrain-rmse:0.273759 \n[16]\ttrain-rmse:0.268695 \n[1]\ttrain-rmse:0.347479 \n[2]\ttrain-rmse:0.303696 \n[3]\ttrain-rmse:0.273634 \n[4]\ttrain-rmse:0.248019 \n[5]\ttrain-rmse:0.223632 \n[6]\ttrain-rmse:0.207121 \n[7]\ttrain-rmse:0.193844 \n[8]\ttrain-rmse:0.186157 \n[9]\ttrain-rmse:0.178096 \n[10]\ttrain-rmse:0.172990 \n[11]\ttrain-rmse:0.166492 \n[12]\ttrain-rmse:0.162156 \n[13]\ttrain-rmse:0.157989 \n[14]\ttrain-rmse:0.149858 \n[15]\ttrain-rmse:0.144153 \n[16]\ttrain-rmse:0.142515 \n[1]\ttrain-rmse:0.360220 \n[2]\ttrain-rmse:0.309292 \n[3]\ttrain-rmse:0.279935 \n[4]\ttrain-rmse:0.257812 \n[5]\ttrain-rmse:0.242870 \n[6]\ttrain-rmse:0.224231 \n[7]\ttrain-rmse:0.212490 \n[8]\ttrain-rmse:0.206091 \n[9]\ttrain-rmse:0.199476 \n[10]\ttrain-rmse:0.193314 \n[11]\ttrain-rmse:0.186470 \n[12]\ttrain-rmse:0.182794 \n[13]\ttrain-rmse:0.177225 \n[14]\ttrain-rmse:0.173323 \n[15]\ttrain-rmse:0.169823 \n[16]\ttrain-rmse:0.166387 \n[1]\ttrain-rmse:0.359876 \n[2]\ttrain-rmse:0.311802 \n[3]\ttrain-rmse:0.286337 \n[4]\ttrain-rmse:0.264818 \n[5]\ttrain-rmse:0.247766 \n[6]\ttrain-rmse:0.228261 \n[7]\ttrain-rmse:0.218473 \n[8]\ttrain-rmse:0.209313 \n[9]\ttrain-rmse:0.199035 \n[10]\ttrain-rmse:0.190997 \n[11]\ttrain-rmse:0.183643 \n[12]\ttrain-rmse:0.179042 \n[13]\ttrain-rmse:0.172667 \n[14]\ttrain-rmse:0.169350 \n[15]\ttrain-rmse:0.164097 \n[16]\ttrain-rmse:0.159964 \n[1]\ttrain-rmse:0.377154 \n[2]\ttrain-rmse:0.322996 \n[3]\ttrain-rmse:0.288625 \n[4]\ttrain-rmse:0.268110 \n[5]\ttrain-rmse:0.249516 \n[6]\ttrain-rmse:0.239117 \n[7]\ttrain-rmse:0.224216 \n[8]\ttrain-rmse:0.216819 \n[9]\ttrain-rmse:0.204899 \n[10]\ttrain-rmse:0.199450 \n[11]\ttrain-rmse:0.192756 \n[12]\ttrain-rmse:0.186917 \n[13]\ttrain-rmse:0.178957 \n[14]\ttrain-rmse:0.175691 \n[15]\ttrain-rmse:0.171456 \n[16]\ttrain-rmse:0.163826 \n[1]\ttrain-rmse:0.387078 \n[2]\ttrain-rmse:0.328616 \n[3]\ttrain-rmse:0.299080 \n[4]\ttrain-rmse:0.282273 \n[5]\ttrain-rmse:0.266443 \n[6]\ttrain-rmse:0.254206 \n[7]\ttrain-rmse:0.241954 \n[8]\ttrain-rmse:0.230499 \n[9]\ttrain-rmse:0.225849 \n[10]\ttrain-rmse:0.220852 \n[11]\ttrain-rmse:0.215028 \n[12]\ttrain-rmse:0.207753 \n[13]\ttrain-rmse:0.202053 \n[14]\ttrain-rmse:0.198234 \n[15]\ttrain-rmse:0.193598 \n[16]\ttrain-rmse:0.190045 \n[1]\ttrain-rmse:0.386369 \n[2]\ttrain-rmse:0.335963 \n[3]\ttrain-rmse:0.313351 \n[4]\ttrain-rmse:0.293987 \n[5]\ttrain-rmse:0.278649 \n[6]\ttrain-rmse:0.265678 \n[7]\ttrain-rmse:0.255343 \n[8]\ttrain-rmse:0.247244 \n[9]\ttrain-rmse:0.232596 \n[10]\ttrain-rmse:0.225452 \n[11]\ttrain-rmse:0.218798 \n[12]\ttrain-rmse:0.210346 \n[13]\ttrain-rmse:0.204773 \n[14]\ttrain-rmse:0.197562 \n[15]\ttrain-rmse:0.192926 \n[16]\ttrain-rmse:0.188129 \n[1]\ttrain-rmse:0.414606 \n[2]\ttrain-rmse:0.358917 \n[3]\ttrain-rmse:0.326077 \n[4]\ttrain-rmse:0.303940 \n[5]\ttrain-rmse:0.287606 \n[6]\ttrain-rmse:0.274322 \n[7]\ttrain-rmse:0.263745 \n[8]\ttrain-rmse:0.254184 \n[9]\ttrain-rmse:0.244747 \n[10]\ttrain-rmse:0.237209 \n[11]\ttrain-rmse:0.230712 \n[12]\ttrain-rmse:0.224574 \n[13]\ttrain-rmse:0.216699 \n[14]\ttrain-rmse:0.209627 \n[15]\ttrain-rmse:0.204999 \n[16]\ttrain-rmse:0.199288 \n[1]\ttrain-rmse:0.421260 \n[2]\ttrain-rmse:0.371556 \n[3]\ttrain-rmse:0.337535 \n[4]\ttrain-rmse:0.315164 \n[5]\ttrain-rmse:0.297948 \n[6]\ttrain-rmse:0.286094 \n[7]\ttrain-rmse:0.273805 \n[8]\ttrain-rmse:0.266394 \n[9]\ttrain-rmse:0.259330 \n[10]\ttrain-rmse:0.249049 \n[11]\ttrain-rmse:0.242956 \n[12]\ttrain-rmse:0.236996 \n[13]\ttrain-rmse:0.233201 \n[14]\ttrain-rmse:0.229789 \n[15]\ttrain-rmse:0.224309 \n[16]\ttrain-rmse:0.220606 \n[1]\ttrain-rmse:0.420579 \n[2]\ttrain-rmse:0.371585 \n[3]\ttrain-rmse:0.338361 \n[4]\ttrain-rmse:0.318275 \n[5]\ttrain-rmse:0.303723 \n[6]\ttrain-rmse:0.291123 \n[7]\ttrain-rmse:0.279848 \n[8]\ttrain-rmse:0.272339 \n[9]\ttrain-rmse:0.264819 \n[10]\ttrain-rmse:0.258476 \n[11]\ttrain-rmse:0.253214 \n[12]\ttrain-rmse:0.245536 \n[13]\ttrain-rmse:0.239850 \n[14]\ttrain-rmse:0.235902 \n[15]\ttrain-rmse:0.229998 \n[16]\ttrain-rmse:0.226427 \n[1]\ttrain-rmse:0.404374 \n[2]\ttrain-rmse:0.347051 \n[3]\ttrain-rmse:0.313732 \n[4]\ttrain-rmse:0.294703 \n[5]\ttrain-rmse:0.276964 \n[6]\ttrain-rmse:0.263043 \n[7]\ttrain-rmse:0.251020 \n[8]\ttrain-rmse:0.242893 \n[9]\ttrain-rmse:0.234263 \n[10]\ttrain-rmse:0.226243 \n[11]\ttrain-rmse:0.217929 \n[12]\ttrain-rmse:0.211913 \n[13]\ttrain-rmse:0.204746 \n[14]\ttrain-rmse:0.199364 \n[15]\ttrain-rmse:0.194590 \n[16]\ttrain-rmse:0.189230 \n[1]\ttrain-rmse:0.411898 \n[2]\ttrain-rmse:0.360447 \n[3]\ttrain-rmse:0.328007 \n[4]\ttrain-rmse:0.302999 \n[5]\ttrain-rmse:0.286952 \n[6]\ttrain-rmse:0.274726 \n[7]\ttrain-rmse:0.262966 \n[8]\ttrain-rmse:0.255573 \n[9]\ttrain-rmse:0.248647 \n[10]\ttrain-rmse:0.242319 \n[11]\ttrain-rmse:0.235167 \n[12]\ttrain-rmse:0.228224 \n[13]\ttrain-rmse:0.223082 \n[14]\ttrain-rmse:0.219313 \n[15]\ttrain-rmse:0.215510 \n[16]\ttrain-rmse:0.210092 \n[1]\ttrain-rmse:0.411181 \n[2]\ttrain-rmse:0.362094 \n[3]\ttrain-rmse:0.330702 \n[4]\ttrain-rmse:0.309895 \n[5]\ttrain-rmse:0.297513 \n[6]\ttrain-rmse:0.286619 \n[7]\ttrain-rmse:0.274702 \n[8]\ttrain-rmse:0.266107 \n[9]\ttrain-rmse:0.256906 \n[10]\ttrain-rmse:0.249981 \n[11]\ttrain-rmse:0.240635 \n[12]\ttrain-rmse:0.232569 \n[13]\ttrain-rmse:0.227588 \n[14]\ttrain-rmse:0.221208 \n[15]\ttrain-rmse:0.215105 \n[16]\ttrain-rmse:0.210351 \n```\n:::\n\n```{.r .cell-code}\nresults = data.frame(depth = hyper_depth, eta = hyper_eta, AUC = tuning_results)\n\nprint(results)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   depth         eta       AUC\n1     49 0.988891729 0.8042100\n2     65 0.946668233 0.7959009\n3    153 0.082437558 0.8104643\n4     74 0.514211784 0.8083882\n5    146 0.390203467 0.8134649\n6    122 0.905738131 0.7986125\n7    200 0.446969628 0.8107391\n8    128 0.836004260 0.8063349\n9     47 0.737595618 0.8053308\n10    24 0.811055141 0.8078353\n11    71 0.388108283 0.8091617\n12   100 0.685169729 0.8074317\n13    89 0.003948339 0.7979312\n14   165 0.832916080 0.8050775\n15   110 0.007334147 0.7999174\n16    20 0.207658973 0.8208386\n17   154 0.906601408 0.7997587\n18   114 0.611778643 0.8133862\n19   111 0.379559241 0.8097394\n20   131 0.435771585 0.8082372\n```\n:::\n:::\n\n\nMake predictions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_xg = xgb.DMatrix(data = as.matrix(data_obs[,-1]), label = data_obs$survived)\n\nmodel = xgboost(data_xg, nrounds = 16L, eta = results[which.max(results$AUC), 2], max_depth = results[which.max(results$AUC), 1], objective = \"reg:logistic\")\n\npredictions = predict(model, newdata = as.matrix(data_new)[,-1])\n\n# Single predictions from the ensemble model:\nwrite.csv(data.frame(y = predictions), file = \"Max_titanic_xgboost.csv\")\n```\n:::\n\n\n\n</div>\n\n\n\n",
    "supporting": [
      "A4-MLpipeline_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}