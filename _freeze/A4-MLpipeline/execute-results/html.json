{
  "hash": "84550d57ac1b3faf48206c144d56acb4",
  "result": {
    "markdown": "---\noutput: html_document\neditor_options:\n  chunk_output_type: console\n---\n\n\n# Machine learning pipeline {#workflow}\n\n\n## The Standard Machine Learning Pipeline at the example of the Titanic Data set\n\nBefore we specialize on any tuning, it is important to understand that machine learning always consists of a pipeline of actions. \n\nThe typical machine learning workflow consist of:\n\n* Data cleaning and exploration (EDA = explorative data analysis) for example with tidyverse.\n* Preprocessing and feature selection.\n* Splitting data set into training and test set for evaluation.\n* Model fitting.\n* Model evaluation.\n* New predictions.\n\nHere is an (optional) video that explains the entire pipeline from a slightly different perspective:\n\n\n<iframe width=\"560\" height=\"315\" \n  src=\"https://www.youtube.com/embed/nKW8Ndu7Mjw\"\n  frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media;\n  gyroscope; picture-in-picture\" allowfullscreen>\n  </iframe>\n\n\nIn the following example, we use tidyverse, a collection of R packages for data science / data manipulation mainly developed by Hadley Wickham. A video that explains the basics can be found here :\n\n\n<iframe width=\"560\" height=\"315\" \n  src=\"https://www.youtube.com/embed/nRtp7wSEtJA\"\n  frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media;\n  gyroscope; picture-in-picture\" allowfullscreen>\n  </iframe>\n\n\nAnother good reference is \"**R for data science**\" by Hadley Wickham: <a href=\"https://r4ds.had.co.nz/\" target=\"_blank\" rel=\"noopener\"></a>.\n\nFor this lecture you need the Titanic data set provided by us. You can find it in GRIPS (datasets.RData in the data set and submission section) or at <a href=\"http://rhsbio6.uni-regensburg.de:8500\" target=\"_blank\" rel=\"noopener\">http://rhsbio6.uni-regensburg.de:8500</a>.\n\nWe have split the data set already into training and test/prediction data sets (the test/prediction split has one column less than the train split, as the result is not known a priori).\n\n\n### Data Cleaning\n\nLoad necessary libraries:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\nLoad data set:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(EcoData)\ndata(titanic_ml)\ndata = titanic_ml\n```\n:::\n\n\nStandard summaries:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t1309 obs. of  14 variables:\n $ pclass   : int  2 1 3 3 3 3 3 1 3 1 ...\n $ survived : int  1 1 0 0 0 0 0 1 0 1 ...\n $ name     : chr  \"Sinkkonen, Miss. Anna\" \"Woolner, Mr. Hugh\" \"Sage, Mr. Douglas Bullen\" \"Palsson, Master. Paul Folke\" ...\n $ sex      : Factor w/ 2 levels \"female\",\"male\": 1 2 2 2 2 2 2 1 1 1 ...\n $ age      : num  30 NA NA 6 30.5 38.5 20 53 NA 42 ...\n $ sibsp    : int  0 0 8 3 0 0 0 0 0 0 ...\n $ parch    : int  0 0 2 1 0 0 0 0 0 0 ...\n $ ticket   : Factor w/ 929 levels \"110152\",\"110413\",..: 221 123 779 542 589 873 472 823 588 834 ...\n $ fare     : num  13 35.5 69.55 21.07 8.05 ...\n $ cabin    : Factor w/ 187 levels \"\",\"A10\",\"A11\",..: 1 94 1 1 1 1 1 1 1 1 ...\n $ embarked : Factor w/ 4 levels \"\",\"C\",\"Q\",\"S\": 4 4 4 4 4 4 4 2 4 2 ...\n $ boat     : Factor w/ 28 levels \"\",\"1\",\"10\",\"11\",..: 3 28 1 1 1 1 1 19 1 15 ...\n $ body     : int  NA NA NA NA 50 32 NA NA NA NA ...\n $ home.dest: Factor w/ 370 levels \"\",\"?Havana, Cuba\",..: 121 213 1 1 1 1 322 350 1 1 ...\n```\n:::\n\n```{.r .cell-code}\nsummary(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     pclass         survived          name               sex     \n Min.   :1.000   Min.   :0.0000   Length:1309        female:466  \n 1st Qu.:2.000   1st Qu.:0.0000   Class :character   male  :843  \n Median :3.000   Median :0.0000   Mode  :character               \n Mean   :2.295   Mean   :0.3853                                  \n 3rd Qu.:3.000   3rd Qu.:1.0000                                  \n Max.   :3.000   Max.   :1.0000                                  \n                 NA's   :655                                     \n      age              sibsp            parch            ticket    \n Min.   : 0.1667   Min.   :0.0000   Min.   :0.000   CA. 2343:  11  \n 1st Qu.:21.0000   1st Qu.:0.0000   1st Qu.:0.000   1601    :   8  \n Median :28.0000   Median :0.0000   Median :0.000   CA 2144 :   8  \n Mean   :29.8811   Mean   :0.4989   Mean   :0.385   3101295 :   7  \n 3rd Qu.:39.0000   3rd Qu.:1.0000   3rd Qu.:0.000   347077  :   7  \n Max.   :80.0000   Max.   :8.0000   Max.   :9.000   347082  :   7  \n NA's   :263                                        (Other) :1261  \n      fare                     cabin      embarked      boat    \n Min.   :  0.000                  :1014    :  2           :823  \n 1st Qu.:  7.896   C23 C25 C27    :   6   C:270    13     : 39  \n Median : 14.454   B57 B59 B63 B66:   5   Q:123    C      : 38  \n Mean   : 33.295   G6             :   5   S:914    15     : 37  \n 3rd Qu.: 31.275   B96 B98        :   4            14     : 33  \n Max.   :512.329   C22 C26        :   4            4      : 31  \n NA's   :1         (Other)        : 271            (Other):308  \n      body                      home.dest  \n Min.   :  1.0                       :564  \n 1st Qu.: 72.0   New York, NY        : 64  \n Median :155.0   London              : 14  \n Mean   :160.8   Montreal, PQ        : 10  \n 3rd Qu.:256.0   Cornwall / Akron, OH:  9  \n Max.   :328.0   Paris, France       :  9  \n NA's   :1188    (Other)             :639  \n```\n:::\n\n```{.r .cell-code}\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     pclass survived                         name    sex  age sibsp parch\n561       2        1        Sinkkonen, Miss. Anna female 30.0     0     0\n321       1        1            Woolner, Mr. Hugh   male   NA     0     0\n1177      3        0     Sage, Mr. Douglas Bullen   male   NA     8     2\n1098      3        0  Palsson, Master. Paul Folke   male  6.0     3     1\n1252      3        0   Tomlin, Mr. Ernest Portage   male 30.5     0     0\n1170      3        0 Saether, Mr. Simon Sivertsen   male 38.5     0     0\n                 ticket   fare cabin embarked boat body\n561              250648 13.000              S   10   NA\n321               19947 35.500   C52        S    D   NA\n1177           CA. 2343 69.550              S        NA\n1098             349909 21.075              S        NA\n1252             364499  8.050              S        50\n1170 SOTON/O.Q. 3101262  7.250              S        32\n                    home.dest\n561  Finland / Washington, DC\n321           London, England\n1177                         \n1098                         \n1252                         \n1170                         \n```\n:::\n:::\n\n\nThe name variable consists of 1309 unique factors (there are 1309 observations...):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(unique(data$name))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1307\n```\n:::\n:::\n\n\nHowever, there is a title in each name. Let's extract the titles:\n\n1. We will extract all names and split each name after each comma \",\".\n2. We will split the second split of the name after a point \".\" and extract the titles.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfirst_split = sapply(data$name,\n                     function(x) stringr::str_split(x, pattern = \",\")[[1]][2])\ntitles = sapply(first_split,\n                function(x) strsplit(x, \".\",fixed = TRUE)[[1]][1])\n```\n:::\n\n\nWe get 18 unique titles:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(titles)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntitles\n         Capt           Col           Don          Dona            Dr \n            1             4             1             1             8 \n     Jonkheer          Lady         Major        Master          Miss \n            1             1             2            61           260 \n         Mlle           Mme            Mr           Mrs            Ms \n            2             1           757           197             2 \n          Rev           Sir  the Countess \n            8             1             1 \n```\n:::\n:::\n\n\nA few titles have a very low occurrence rate:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntitles = stringr::str_trim((titles))\ntitles %>%\n fct_count()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 18 × 2\n   f                n\n   <fct>        <int>\n 1 Capt             1\n 2 Col              4\n 3 Don              1\n 4 Dona             1\n 5 Dr               8\n 6 Jonkheer         1\n 7 Lady             1\n 8 Major            2\n 9 Master          61\n10 Miss           260\n11 Mlle             2\n12 Mme              1\n13 Mr             757\n14 Mrs            197\n15 Ms               2\n16 Rev              8\n17 Sir              1\n18 the Countess     1\n```\n:::\n:::\n\n\nWe will combine titles with low occurrences into one title, which we can easily do with the forcats package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntitles2 =\n  forcats::fct_collapse(titles,\n                        officer = c(\"Capt\", \"Col\", \"Major\", \"Dr\", \"Rev\"),\n                        royal = c(\"Jonkheer\", \"Don\", \"Sir\",\n                                  \"the Countess\", \"Dona\", \"Lady\"),\n                        miss = c(\"Miss\", \"Mlle\"),\n                        mrs = c(\"Mrs\", \"Mme\", \"Ms\")\n                        )\n```\n:::\n\n\nWe can count titles again to see the new number of titles:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntitles2 %>%  \n   fct_count()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  f           n\n  <fct>   <int>\n1 officer    23\n2 royal       6\n3 Master     61\n4 miss      262\n5 mrs       200\n6 Mr        757\n```\n:::\n:::\n\n\nAdd new title variable to data set:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata =\n  data %>%\n    mutate(title = titles2)\n```\n:::\n\n\nAs a second example, we will explore and clean the numeric \"age\" variable.\n\nExplore the variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     pclass         survived          name               sex     \n Min.   :1.000   Min.   :0.0000   Length:1309        female:466  \n 1st Qu.:2.000   1st Qu.:0.0000   Class :character   male  :843  \n Median :3.000   Median :0.0000   Mode  :character               \n Mean   :2.295   Mean   :0.3853                                  \n 3rd Qu.:3.000   3rd Qu.:1.0000                                  \n Max.   :3.000   Max.   :1.0000                                  \n                 NA's   :655                                     \n      age              sibsp            parch            ticket    \n Min.   : 0.1667   Min.   :0.0000   Min.   :0.000   CA. 2343:  11  \n 1st Qu.:21.0000   1st Qu.:0.0000   1st Qu.:0.000   1601    :   8  \n Median :28.0000   Median :0.0000   Median :0.000   CA 2144 :   8  \n Mean   :29.8811   Mean   :0.4989   Mean   :0.385   3101295 :   7  \n 3rd Qu.:39.0000   3rd Qu.:1.0000   3rd Qu.:0.000   347077  :   7  \n Max.   :80.0000   Max.   :8.0000   Max.   :9.000   347082  :   7  \n NA's   :263                                        (Other) :1261  \n      fare                     cabin      embarked      boat    \n Min.   :  0.000                  :1014    :  2           :823  \n 1st Qu.:  7.896   C23 C25 C27    :   6   C:270    13     : 39  \n Median : 14.454   B57 B59 B63 B66:   5   Q:123    C      : 38  \n Mean   : 33.295   G6             :   5   S:914    15     : 37  \n 3rd Qu.: 31.275   B96 B98        :   4            14     : 33  \n Max.   :512.329   C22 C26        :   4            4      : 31  \n NA's   :1         (Other)        : 271            (Other):308  \n      body                      home.dest       title    \n Min.   :  1.0                       :564   officer: 23  \n 1st Qu.: 72.0   New York, NY        : 64   royal  :  6  \n Median :155.0   London              : 14   Master : 61  \n Mean   :160.8   Montreal, PQ        : 10   miss   :262  \n 3rd Qu.:256.0   Cornwall / Akron, OH:  9   mrs    :200  \n Max.   :328.0   Paris, France       :  9   Mr     :757  \n NA's   :1188    (Other)             :639                \n```\n:::\n\n```{.r .cell-code}\nsum(is.na(data$age)) / nrow(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.2009167\n```\n:::\n:::\n\n\n20% NAs!\nEither we remove all observations with NAs, or we impute (fill) the missing values, e.g. with the median age. However, age itself might depend on other variables such as sex, class and title. We want to fill the NAs with the median age of these groups.\nIn tidyverse we can easily \"group\" the data, i.e. we will nest the observations (here: group_by after sex, pclass and title).\nAfter grouping, all operations (such as our median(age....)) will be done within the specified groups.\n \n\n::: {.cell}\n\n```{.r .cell-code}\ndata =\n  data %>%\n    group_by(sex, pclass, title) %>%\n    mutate(age2 = ifelse(is.na(age), median(age, na.rm = TRUE), age)) %>%\n    mutate(fare2 = ifelse(is.na(fare), median(fare, na.rm = TRUE), fare)) %>%\n    ungroup()\n```\n:::\n\n \n\n### Preprocessing and Feature Selection\n\nLater (tomorrow), we want to use Keras in our example, but it cannot handle factors and requires the data to be scaled.\n\nNormally, one would do this for all predictors, but as we only show the pipeline here, we have sub-selected a bunch of predictors and do this only for them.\nWe first scale the numeric predictors and change the factors with only two groups/levels into integers (this can be handled by Keras).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_sub =\n  data %>%\n    select(survived, sex, age2, fare2, title, pclass) %>%\n    mutate(age2 = scales::rescale(age2, c(0, 1)),\n           fare2 = scales::rescale(fare2, c(0, 1))) %>%\n    mutate(sex = as.integer(sex) - 1L,\n           title = as.integer(title) - 1L, pclass = as.integer(pclass - 1L))\n```\n:::\n\n\nFactors with more than two levels should be **one hot encoded** (Make columns for every different factor level and write 1 in the respective column for every taken feature value and 0 else. For example: $\\{red, green, green, blue, red\\} \\rightarrow \\{(0,0,1), (0,1,0), (0,1,0), (1,0,0), (0,0,1)\\}$):\n\n\n::: {.cell}\n\n```{.r .cell-code}\none_title = model.matrix(~0+as.factor(title), data = data_sub)\ncolnames(one_title) = levels(data$title)\n\none_sex = model.matrix(~0+as.factor(sex), data = data_sub)\ncolnames(one_sex) = levels(data$sex)\n\none_pclass = model.matrix(~0+as.factor(pclass), data = data_sub)\ncolnames(one_pclass) = paste0(\"pclass\", 1:length(unique(data$pclass)))\n```\n:::\n\n\nAnd we have to add the dummy encoded variables to the data set:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_sub = cbind(data.frame(survived= data_sub$survived),\n                 one_title, one_sex, age = data_sub$age2,\n                 fare = data_sub$fare2, one_pclass)\nhead(data_sub)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  survived officer royal Master miss mrs Mr female male        age       fare\n1        1       0     0      0    1   0  0      1    0 0.37369494 0.02537431\n2        1       0     0      0    0   0  1      0    1 0.51774510 0.06929139\n3        0       0     0      0    0   0  1      0    1 0.32359053 0.13575256\n4        0       0     0      1    0   0  0      0    1 0.07306851 0.04113566\n5        0       0     0      0    0   0  1      0    1 0.37995799 0.01571255\n6        0       0     0      0    0   0  1      0    1 0.48016680 0.01415106\n  pclass1 pclass2 pclass3\n1       0       1       0\n2       1       0       0\n3       0       0       1\n4       0       0       1\n5       0       0       1\n6       0       0       1\n```\n:::\n:::\n\n\n\n### Split Data\n\nThe splitting consists of two splits:\n\n* An outer split (the original split, remember we got a training and test split without the response \"survived\").\n* An inner split (we will split the training data set further into another training and test split with known response).\nThe inner split is important to assess the model's performance and potential overfitting.\n\nOuter split:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain = data_sub[!is.na(data_sub$survived),]\ntest = data_sub[is.na(data_sub$survived),]\n```\n:::\n\n\nInner split:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nindices = sample.int(nrow(train), 0.7 * nrow(train))\nsub_train = train[indices,]\nsub_test = train[-indices,]\n```\n:::\n\n\nWhat is the difference between the two splits? (Tip: have a look at the variable survived.)\n\n\n### Training\n\nIn the next step we will fit a Random Forest on the training data of the inner split:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ranger)\nmodel = ranger(survived~., data = sub_train)\n```\n:::\n\n\n\n\n### Evaluation\n\nWe will predict the variable \"survived\" for the test set of the inner split and calculate the accuracy:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npred =\n  model %>%\n    predict(data = as.matrix(sub_test[,-1]))\n\npred = pred$predictions\n\npredicted = ifelse(pred < 0.5, 0, 1) \nobserved = sub_test[,1]\n(accuracy = mean(predicted == observed))  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.7360406\n```\n:::\n\n```{.r .cell-code}\n# Let's calculate the AUC:\nMetrics::auc(observed, pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.790855\n```\n:::\n:::\n\n\n\n\n### Predictions and Submission\n\nWhen we are satisfied with the performance of our model in the inner split, we will create predictions for the test data of the outer split.\nTo do so, we take all observations that belong to the outer test split (use the filter function) and remove the survived (NAs) columns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubmit = \n  test %>% \n      select(-survived)\n```\n:::\n\n\nWe cannot assess the performance on the test split because the true survival ratio is unknown, however, we can now submit our predictions to the submission server at <a href=\"http://rhsbio7.uni-regensburg.de:8500\" target=\"_blank\" rel=\"noopener\">http://rhsbio7.uni-regensburg.de:8500</a>.\nTo do so, we have to transform our survived probabilities into actual 0/1 predictions (probabilities are not allowed) and create a .csv file:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npred = model %>% \n  predict(as.matrix(submit))\n```\n:::\n\n\nFor the submission it is critical to change the predictions into a data.frame, select the second column (the probability to survive), and save it with the write.csv function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.csv(data.frame(y = pred[,2] ), file = \"Max_1.csv\")\n```\n:::\n\n\nThe file name is used as the ID on the submission server, so change it to whatever you want as long as you can identify yourself.\n\n\n#### Exercises\n\n::: {.callout-caution icon=\"false\"}\n##### Task: Imrove predictions\n\nPlay around with the feature engineering and the hyperparameters of the random forest. Try to improve the AUC on the outer split (submission server).\n\n:::\n\n### Hyperparameter optimization\n\nHyperparameters (configuration parameters of our ML algorithms that (mostly) control their complexity) are usually tuned (optimized) in an automatic / systematic way. A common procedure, called random search, is to sample random configuration combinations from the set of hyperparameters and test for each combination the prediction error.\n\nIf we test many different hyperparameter combinations, how do we ensure that a certain hyperparameter is not only good for our training dataset but also good for the new data (our outer split on the submission server)? You may have guessed it already, we need to do another CV within the previous CV to check whether a certain hyperparameter solution generalizes to the whole data. \n\nThe \"double CV\" approach is called nested CV. Let's start with a 3CVx3CV and 10x different mtry values:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_obs = data_sub[!is.na(data_sub$survived),] \ncv = 10\ncv_inner = 10\nhyper_mtry = seq(4, 13, by = 1)\n\nouter_split = as.integer(cut(1:nrow(data_obs), breaks = cv))\n\nresults = data.frame(\n  set = rep(NA, cv),\n  mtry = rep(NA, cv),\n  AUC = rep(NA, cv)\n)\n\nfor(i in 1:cv) {\n  train_outer = data_obs[outer_split != i, ]\n  test_outer = data_obs[outer_split == i, ]\n  \n  # inner split\n  for(j in 1:cv_inner) {\n    inner_split = as.integer(cut(1:nrow(train_outer), breaks = cv_inner))\n    train_inner = train_outer[inner_split != j, ]\n    test_inner = train_outer[inner_split == j, ]\n    \n    tuning_results_inner = \n      sapply(1:length(hyper_mtry), function(k) {\n        model = ranger(survived~., data = train_inner, mtry = hyper_mtry[k])\n        return(Metrics::auc(test_inner$survived, predict(model, data = test_inner)$predictions))\n      })\n    best_mtry = hyper_mtry[which.max(tuning_results_inner)]\n  }\n  model = ranger(survived~., data = train_outer, mtry = best_mtry)\n  results[i, 1] = i\n  results[i, 2] = best_mtry\n  results[i, 3] = Metrics::auc(test_outer$survived, predict(model, data = test_outer)$predictions)\n}\n\nprint(results)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   set mtry       AUC\n1    1    4 0.8442460\n2    2    7 0.8065302\n3    3    7 0.7657520\n4    4    6 0.8809756\n5    5   10 0.8964497\n6    6    6 0.7733333\n7    7    6 0.8590244\n8    8    6 0.8933398\n9    9    6 0.8582251\n10  10    4 0.8492647\n```\n:::\n:::\n\n\nWe found different 'good' mtry values. We could now use either the mtry value with the highest AUC, or we could fit now for each value a RF and average the predictions (which will be next task):\n\n::: {.callout-caution icon=\"false\"}\n#### Exercise: Which model is better\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_new = data_sub[is.na(data_sub$survived),]\n```\n:::\n\n\n\nThe task is to make two predictions:\n1. Fit RF on the obs_data with the mtry hyperparameter that has shown the highest AUC\n2. Fit for each mtry which we have found a RF and combine (average) the predictions\n\nSubmit both predictions, which approach has a higher AUC?\n\n\n<div class='webex-solution'><button>Click here to see the solution for the single model</button>\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n  set mtry       AUC\n5   5   10 0.8964497\n```\n:::\n:::\n\n\n\n\n</div>\n\n\n\n<div class='webex-solution'><button>Click here to see the solution for the single model</button>\n\n\n\n::: {.cell}\n\n:::\n\n\n\n</div>\n\n\n:::\n\n\n\n\n\n## Bonus - Machine Learning Pipelines with mlr3 {#mlr}\n\nAs we have seen today, many of the machine learning algorithms are distributed over several packages but the general machine learning pipeline is very similar for all models: feature engineering, feature selection, hyperparameter tuning and cross-validation. \n\nThe idea of the mlr3 framework is now to provide a general machine learning interface which you can use to build reproducible and automatic machine learning pipelines. The key features of mlr3 are:\n\n* All common machine learning packages are integrated into mlr3, you can easily switch between different machine learning algorithms.\n* A common 'language'/workflow to specify machine learning pipelines.\n* Support for different cross-validation strategies.\n* Hyperparameter tuning for all supported machine learning algorithms.\n* Ensemble models.\n\nUseful links:\n\n* <a href=\"https://mlr3book.mlr-org.com/\" target=\"_blank\" rel=\"noopener\">mlr3-book</a> (still in work)\n* <a href=\"https://mlr3.mlr-org.com/\" target=\"_blank\" rel=\"noopener\">mlr3 website</a>\n* <a href=\"https://cheatsheets.mlr-org.com/mlr3.pdf\" target=\"_blank\" rel=\"noopener\">mlr3 cheatsheet</a>\n\n\n### mlr3 - The Basic Workflow\n\nThe mlr3 package actually consists of several packages for different tasks (e.g. mlr3tuning for hyperparameter tuning, mlr3pipelines for data preparation pipes). But let's start with the basic workflow:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(EcoData)\nlibrary(tidyverse)\nlibrary(mlr3)\nlibrary(mlr3learners)\nlibrary(mlr3pipelines)\nlibrary(mlr3tuning)\nlibrary(mlr3measures)\ndata(nasa)\nstr(nasa)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t4687 obs. of  40 variables:\n $ Neo.Reference.ID            : int  3449084 3702322 3406893 NA 2363305 3017307 2438430 3653917 3519490 2066391 ...\n $ Name                        : int  NA 3702322 3406893 3082923 2363305 3017307 2438430 3653917 3519490 NA ...\n $ Absolute.Magnitude          : num  18.7 22.1 24.8 21.6 21.4 18.2 20 21 20.9 16.5 ...\n $ Est.Dia.in.KM.min.          : num  0.4837 0.1011 0.0291 0.1272 0.1395 ...\n $ Est.Dia.in.KM.max.          : num  1.0815 0.226 0.0652 0.2845 0.3119 ...\n $ Est.Dia.in.M.min.           : num  483.7 NA 29.1 127.2 139.5 ...\n $ Est.Dia.in.M.max.           : num  1081.5 226 65.2 284.5 311.9 ...\n $ Est.Dia.in.Miles.min.       : num  0.3005 0.0628 NA 0.0791 0.0867 ...\n $ Est.Dia.in.Miles.max.       : num  0.672 0.1404 0.0405 0.1768 0.1938 ...\n $ Est.Dia.in.Feet.min.        : num  1586.9 331.5 95.6 417.4 457.7 ...\n $ Est.Dia.in.Feet.max.        : num  3548 741 214 933 1023 ...\n $ Close.Approach.Date         : Factor w/ 777 levels \"1995-01-01\",\"1995-01-08\",..: 511 712 472 239 273 145 428 694 87 732 ...\n $ Epoch.Date.Close.Approach   : num  NA 1.42e+12 1.21e+12 1.00e+12 1.03e+12 ...\n $ Relative.Velocity.km.per.sec: num  11.22 13.57 5.75 13.84 4.61 ...\n $ Relative.Velocity.km.per.hr : num  40404 48867 20718 49821 16583 ...\n $ Miles.per.hour              : num  25105 30364 12873 30957 10304 ...\n $ Miss.Dist..Astronomical.    : num  NA 0.0671 0.013 0.0583 0.0381 ...\n $ Miss.Dist..lunar.           : num  112.7 26.1 NA 22.7 14.8 ...\n $ Miss.Dist..kilometers.      : num  43348668 10030753 1949933 NA 5694558 ...\n $ Miss.Dist..miles.           : num  26935614 6232821 1211632 5418692 3538434 ...\n $ Orbiting.Body               : Factor w/ 1 level \"Earth\": 1 1 1 1 1 1 1 1 1 1 ...\n $ Orbit.ID                    : int  NA 8 12 12 91 NA 24 NA NA 212 ...\n $ Orbit.Determination.Date    : Factor w/ 2680 levels \"2014-06-13 15:20:44\",..: 69 NA 1377 1774 2275 2554 1919 731 1178 2520 ...\n $ Orbit.Uncertainity          : int  0 8 6 0 0 0 1 1 1 0 ...\n $ Minimum.Orbit.Intersection  : num  NA 0.05594 0.00553 NA 0.0281 ...\n $ Jupiter.Tisserand.Invariant : num  5.58 3.61 4.44 5.5 NA ...\n $ Epoch.Osculation            : num  2457800 2457010 NA 2458000 2458000 ...\n $ Eccentricity                : num  0.276 0.57 0.344 0.255 0.22 ...\n $ Semi.Major.Axis             : num  1.1 NA 1.52 1.11 1.24 ...\n $ Inclination                 : num  20.06 4.39 5.44 23.9 3.5 ...\n $ Asc.Node.Longitude          : num  29.85 1.42 170.68 356.18 183.34 ...\n $ Orbital.Period              : num  419 1040 682 427 503 ...\n $ Perihelion.Distance         : num  0.794 0.864 0.994 0.828 0.965 ...\n $ Perihelion.Arg              : num  41.8 359.3 350 268.2 179.2 ...\n $ Aphelion.Dist               : num  1.4 3.15 2.04 1.39 1.51 ...\n $ Perihelion.Time             : num  2457736 2456941 2457937 NA 2458070 ...\n $ Mean.Anomaly                : num  55.1 NA NA 297.4 310.5 ...\n $ Mean.Motion                 : num  0.859 0.346 0.528 0.843 0.716 ...\n $ Equinox                     : Factor w/ 1 level \"J2000\": 1 1 NA 1 1 1 1 1 1 1 ...\n $ Hazardous                   : int  0 0 0 1 1 0 0 0 1 1 ...\n```\n:::\n:::\n\n\nLet's drop time, name and ID variable and create a classification task:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata = nasa %>% select(-Orbit.Determination.Date,\n                       -Close.Approach.Date, -Name, -Neo.Reference.ID)\ndata$Hazardous = as.factor(data$Hazardous)\n\n# Create a classification task.\ntask = TaskClassif$new(id = \"nasa\", backend = data,\n                       target = \"Hazardous\", positive = \"1\")\n```\n:::\n\n\nCreate a generic pipeline of data transformation (imputation $\\rightarrow$ scaling $\\rightarrow$ encoding of categorical variables):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\n\n# Let's create the preprocessing graph.\npreprocessing = po(\"imputeoor\") %>>% po(\"scale\") %>>% po(\"encode\") \n\n# Run the task.\ntransformed_task = preprocessing$train(task)[[1]]\n\ntransformed_task$missings()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   Hazardous           Absolute.Magnitude \n                        4187                            0 \n               Aphelion.Dist           Asc.Node.Longitude \n                           0                            0 \n                Eccentricity    Epoch.Date.Close.Approach \n                           0                            0 \n            Epoch.Osculation         Est.Dia.in.Feet.max. \n                           0                            0 \n        Est.Dia.in.Feet.min.           Est.Dia.in.KM.max. \n                           0                            0 \n          Est.Dia.in.KM.min.            Est.Dia.in.M.max. \n                           0                            0 \n           Est.Dia.in.M.min.        Est.Dia.in.Miles.max. \n                           0                            0 \n       Est.Dia.in.Miles.min.                  Inclination \n                           0                            0 \n Jupiter.Tisserand.Invariant                 Mean.Anomaly \n                           0                            0 \n                 Mean.Motion               Miles.per.hour \n                           0                            0 \n  Minimum.Orbit.Intersection     Miss.Dist..Astronomical. \n                           0                            0 \n      Miss.Dist..kilometers.            Miss.Dist..lunar. \n                           0                            0 \n           Miss.Dist..miles.                     Orbit.ID \n                           0                            0 \n          Orbit.Uncertainity               Orbital.Period \n                           0                            0 \n              Perihelion.Arg          Perihelion.Distance \n                           0                            0 \n             Perihelion.Time  Relative.Velocity.km.per.hr \n                           0                            0 \nRelative.Velocity.km.per.sec              Semi.Major.Axis \n                           0                            0 \n               Equinox.J2000             Equinox..MISSING \n                           0                            0 \n         Orbiting.Body.Earth       Orbiting.Body..MISSING \n                           0                            0 \n```\n:::\n:::\n\n\nWe can even visualize the preprocessing graph:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreprocessing$plot()\n```\n\n::: {.cell-output-display}\n![](A4-MLpipeline_files/figure-html/chunk_chapter4_68-1.png){width=672}\n:::\n:::\n\n\nNow, to test our model (random forest) 10-fold cross-validated, we will do:\n\n* Specify the missing target rows as validation so that they will be ignored.\n* Specify the cross-validation, the learner (the machine learning model we want to use), and the measurement (AUC).\n* Run (benchmark) our model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\n\ntransformed_task$data()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      Hazardous Absolute.Magnitude Aphelion.Dist Asc.Node.Longitude\n   1:         0        -0.81322649   -0.38042005       -1.140837452\n   2:         0         0.02110348    0.94306517       -1.380254611\n   3:         0         0.68365964    0.10199889        0.044905370\n   4:         1        -0.10159210   -0.38415066        1.606769281\n   5:         1        -0.15067034   -0.29632490        0.151458877\n  ---                                                              \n4683:      <NA>        -0.32244415    0.69173184       -0.171022906\n4684:      <NA>         0.46280759   -0.24203066       -0.009803808\n4685:      <NA>         1.51798962   -0.56422744        1.514551982\n4686:      <NA>         0.16833819    0.14193044       -1.080452287\n4687:      <NA>        -0.05251387   -0.08643345       -0.013006704\n      Eccentricity Epoch.Date.Close.Approach Epoch.Osculation\n   1: -0.315605975                -4.7929881       0.14026773\n   2:  0.744287645                 1.1058704      -0.26325244\n   3: -0.068280074                 0.1591740      -7.76281014\n   4: -0.392030729                -0.7630231       0.24229559\n   5: -0.516897963                -0.6305034       0.24229559\n  ---                                                        \n4683:  1.043608082                 1.3635097       0.24229559\n4684: -0.006429588                 1.3635097       0.05711503\n4685: -1.045386877                 1.3635097       0.24229559\n4686:  0.017146757                 1.3635097       0.24229559\n4687: -0.579210554                 1.3635097       0.24229559\n      Est.Dia.in.Feet.max. Est.Dia.in.Feet.min. Est.Dia.in.KM.max.\n   1:          0.271417899          0.313407647        0.300713440\n   2:          0.032130074         -0.029173486       -0.020055639\n   3:         -0.012841645         -0.093558135       -0.080340934\n   4:          0.048493723         -0.005746146        0.001880088\n   5:          0.056169717          0.005243343        0.012169879\n  ---                                                             \n4683:          0.089353662          0.052751793        0.056653478\n4684:         -0.003481174         -0.080157032       -0.067793075\n4685:         -0.027260163         -0.114200690       -0.099669182\n4686:          0.016872584         -0.051017172       -0.040508543\n4687:          0.041493133         -0.015768679       -0.007504312\n      Est.Dia.in.KM.min. Est.Dia.in.M.max. Est.Dia.in.M.min.\n   1:        0.256568684       0.271095311       0.291624502\n   2:        0.057560696       0.031844946     -12.143577263\n   3:        0.020159164      -0.013119734      -0.060269734\n   4:        0.071169817       0.048206033       0.015659335\n   5:        0.077553695       0.055880826       0.025161701\n  ---                                                       \n4683:        0.105151714       0.089059576       0.066241198\n4684:        0.027943967      -0.003760728      -0.048682099\n4685:        0.008167747      -0.027535994      -0.078118891\n4686:        0.044871533       0.016589844      -0.023485512\n4687:        0.065347651       0.041206539       0.006993074\n      Est.Dia.in.Miles.max. Est.Dia.in.Miles.min. Inclination\n   1:          2.620443e-01           0.258651038   0.5442288\n   2:          4.153888e-02           0.030928225  -0.5925952\n   3:          9.711407e-05         -10.258220292  -0.5164818\n   4:          5.661810e-02           0.046501003   0.8225188\n   5:          6.369158e-02           0.053806009  -0.6568722\n  ---                                                        \n4683:          9.427082e-02           0.085386142   0.8222493\n4684:          8.722856e-03          -0.002961897   1.9818623\n4685:         -1.318965e-02          -0.025591624  -0.5220442\n4686:          2.747899e-02           0.016408144  -0.5912988\n4687:          5.016700e-02           0.039838758   0.6181969\n      Jupiter.Tisserand.Invariant Mean.Anomaly Mean.Motion Miles.per.hour\n   1:                   0.3840868  -1.02876096  0.31939530   -0.254130552\n   2:                  -0.7801632  -4.55056211 -0.71151122    0.009333354\n   3:                  -0.2872777  -4.55056211 -0.34600512   -0.866997591\n   4:                   0.3403535   1.02239674  0.28551117    0.039031045\n   5:                  -6.2415005   1.13265516  0.03164827   -0.995720084\n  ---                                                                    \n4683:                  -0.6412806   0.01560046 -0.51852041    1.403775544\n4684:                   0.1346891   1.08051799  0.17477591    0.970963141\n4685:                   0.4810091   0.89998250  0.36895738   -1.150527134\n4686:                  -0.3061894   0.22720275 -0.35895074   -0.705980518\n4687:                  -0.2665930   0.22740438 -0.31462613   -0.239696213\n      Minimum.Orbit.Intersection Miss.Dist..Astronomical.\n   1:                -5.45911858               -7.0769260\n   2:                 0.07077092               -0.6830928\n   3:                -0.11099960               -0.9035573\n   4:                -5.45911858               -0.7188386\n   5:                -0.02962490               -0.8013948\n  ---                                                    \n4683:                 0.30711241               -0.2728622\n4684:                -0.05962478               -0.7879458\n4685:                -0.10766868               -0.9303542\n4686:                 0.08529226               -0.7077555\n4687:                 0.50904764                0.1075071\n      Miss.Dist..kilometers. Miss.Dist..lunar. Miss.Dist..miles.   Orbit.ID\n   1:             0.25122963         0.2398625        0.23810770 -9.6514722\n   2:            -1.08492125        -1.1742128       -1.18860632 -0.2412680\n   3:            -1.40898698        -4.7878719       -1.53463694 -0.1803606\n   4:            -4.48402327        -1.2298206       -1.24471124 -0.1803606\n   5:            -1.25881601        -1.3582490       -1.37428752  1.0225620\n  ---                                                                      \n4683:            -0.48191427        -0.5360384       -0.54472804 -0.1194531\n4684:            -1.23904708        -1.3373272       -1.35317867 -0.3021755\n4685:            -1.44837625        -1.5588644       -1.57669598 -0.3326292\n4686:            -1.12117355        -1.2125793       -1.22731578 -0.1042262\n4687:             0.07719897         0.0556823        0.05228143 -0.2717218\n      Orbit.Uncertainity Orbital.Period Perihelion.Arg Perihelion.Distance\n   1:         -1.0070872     -0.3013135   -1.170536399         -0.01831583\n   2:          1.3770116      0.7811097    1.549452700          0.20604472\n   3:          0.7809869      0.1566040    1.470307933          0.61816146\n   4:         -1.0070872     -0.2866969    0.769006449          0.09005898\n   5:         -1.0070872     -0.1552813    0.006829799          0.52730977\n  ---                                                                     \n4683:         -0.7090748      0.3873214   -0.580282684         -0.65810123\n4684:          1.3770116     -0.2345610    0.839430173         -0.18350549\n4685:          0.7809869     -0.3216884   -1.168210857          0.62646993\n4686:          0.7809869      0.1712806    0.824836889          0.52899080\n4687:          0.4829746      0.1224733    0.016358127          1.22720096\n      Perihelion.Time Relative.Velocity.km.per.hr Relative.Velocity.km.per.sec\n   1:      0.10526107                 -0.28167821                 -0.284140684\n   2:     -0.28203779                 -0.00604459                 -0.008343348\n   3:      0.20313227                 -0.92285430                 -0.925697621\n   4:     -7.86832915                  0.02502487                  0.022744569\n   5:      0.26755741                 -1.05752264                 -1.060445948\n  ---                                                                         \n4683:      0.03734532                  1.45280854                  1.451376301\n4684:      0.09156633                  1.00000402                  0.998302826\n4685:      0.27629790                 -1.21948041                 -1.222499918\n4686:      0.37994517                 -0.75439966                 -0.757142920\n4687:      0.37399573                 -0.26657713                 -0.269030636\n      Semi.Major.Axis Equinox.J2000 Equinox..MISSING Orbiting.Body.Earth\n   1:      -0.2791037             1                0                   1\n   2:      -7.3370940             1                0                   1\n   3:       0.2204883             0                1                   1\n   4:      -0.2617714             1                0                   1\n   5:      -0.1106954             1                0                   1\n  ---                                                                   \n4683:       0.4468886             1                0                   1\n4684:      -0.2008499             1                0                   1\n4685:      -0.3034586             1                0                   1\n4686:       0.2353030             1                0                   1\n4687:       0.1857979             1                0                   1\n      Orbiting.Body..MISSING\n   1:                      0\n   2:                      0\n   3:                      0\n   4:                      0\n   5:                      0\n  ---                       \n4683:                      0\n4684:                      0\n4685:                      0\n4686:                      0\n4687:                      0\n```\n:::\n\n```{.r .cell-code}\ntransformed_task$set_row_roles((1:nrow(data))[is.na(data$Hazardous)],\n                               \"holdout\")\n\ncv10 = mlr3::rsmp(\"cv\", folds = 10L)\nrf = lrn(\"classif.ranger\", predict_type = \"prob\")\nmeasurement =  msr(\"classif.auc\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresult = mlr3::resample(transformed_task,\n                        rf, resampling = cv10, store_models = TRUE)\n\n# Calculate the average AUC of the holdouts.\nresult$aggregate(measurement)\n```\n:::\n\n\nVery cool! Preprocessing + 10-fold cross-validation model evaluation in a few lines of code!\n\nLet's create the final predictions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npred = sapply(1:10, function(i) result$learners[[i]]$predict(transformed_task,\nrow_ids = (1:nrow(data))[is.na(data$Hazardous)])$data$prob[, \"1\", drop = FALSE])\ndim(pred)\npredictions = apply(pred, 1, mean)\n```\n:::\n\n\nYou could now submit the predictions <a href=\"http://rhsbio7.uni-regensburg.de:8500\" target=\"_blank\" rel=\"noopener\">here</a>.\n\nBut we are still not happy with the results, let's do some hyperparameter tuning!\n\n\n### mlr3 - Hyperparameter Tuning\n\nMachine learning algorithms have a varying number of hyperparameters which can (!) have a high impact on the predictive performance. To list a few hyperparameters:\n\n**Random Forest**\n\n* mtry\n* Minimal node size\n\n**K-nearest-neighbors classification**\n\n* Kernel\n* Number of neighbors\n* Distance metric\n\n**Boosted Regression Tree**\n\n* nrounds\n* Maximum depth\n* alpha\n* booster\n* eta\n* gamma\n* lambda\n\nWith mlr3, we can easily extend the above example to do hyperparameter tuning within nested cross-validation (the tuning has its own inner cross-validation).\n\nPrint the hyperparameter space of our random forest learner:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf$param_set\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<ParamSet>\n                              id    class lower upper nlevels        default\n 1:                        alpha ParamDbl  -Inf   Inf     Inf            0.5\n 2:       always.split.variables ParamUty    NA    NA     Inf <NoDefault[3]>\n 3:                class.weights ParamUty    NA    NA     Inf               \n 4:                      holdout ParamLgl    NA    NA       2          FALSE\n 5:                   importance ParamFct    NA    NA       4 <NoDefault[3]>\n 6:                   keep.inbag ParamLgl    NA    NA       2          FALSE\n 7:                    max.depth ParamInt     0   Inf     Inf               \n 8:                min.node.size ParamInt     1   Inf     Inf               \n 9:                     min.prop ParamDbl  -Inf   Inf     Inf            0.1\n10:                      minprop ParamDbl  -Inf   Inf     Inf            0.1\n11:                         mtry ParamInt     1   Inf     Inf <NoDefault[3]>\n12:                   mtry.ratio ParamDbl     0     1     Inf <NoDefault[3]>\n13:            num.random.splits ParamInt     1   Inf     Inf              1\n14:                  num.threads ParamInt     1   Inf     Inf              1\n15:                    num.trees ParamInt     1   Inf     Inf            500\n16:                    oob.error ParamLgl    NA    NA       2           TRUE\n17:        regularization.factor ParamUty    NA    NA     Inf              1\n18:      regularization.usedepth ParamLgl    NA    NA       2          FALSE\n19:                      replace ParamLgl    NA    NA       2           TRUE\n20:    respect.unordered.factors ParamFct    NA    NA       3         ignore\n21:              sample.fraction ParamDbl     0     1     Inf <NoDefault[3]>\n22:                  save.memory ParamLgl    NA    NA       2          FALSE\n23: scale.permutation.importance ParamLgl    NA    NA       2          FALSE\n24:                    se.method ParamFct    NA    NA       2        infjack\n25:                         seed ParamInt  -Inf   Inf     Inf               \n26:         split.select.weights ParamUty    NA    NA     Inf               \n27:                    splitrule ParamFct    NA    NA       3           gini\n28:                      verbose ParamLgl    NA    NA       2           TRUE\n29:                 write.forest ParamLgl    NA    NA       2           TRUE\n                              id    class lower upper nlevels        default\n       parents value\n 1:                 \n 2:                 \n 3:                 \n 4:                 \n 5:                 \n 6:                 \n 7:                 \n 8:                 \n 9:                 \n10:                 \n11:                 \n12:                 \n13:  splitrule      \n14:                1\n15:                 \n16:                 \n17:                 \n18:                 \n19:                 \n20:                 \n21:                 \n22:                 \n23: importance      \n24:                 \n25:                 \n26:                 \n27:                 \n28:                 \n29:                 \n       parents value\n```\n:::\n:::\n\n\n\nDefine the hyperparameter space of the random forest:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(paradox)\n\nrf_pars = \n    paradox::ParamSet$new(\n      list(paradox::ParamInt$new(\"min.node.size\", lower = 1, upper = 30L),\n           paradox::ParamInt$new(\"mtry\", lower = 1, upper = 30L),\n           paradox::ParamLgl$new(\"regularization.usedepth\", default = TRUE)))\nprint(rf_pars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<ParamSet>\n                        id    class lower upper nlevels        default value\n1:           min.node.size ParamInt     1    30      30 <NoDefault[3]>      \n2:                    mtry ParamInt     1    30      30 <NoDefault[3]>      \n3: regularization.usedepth ParamLgl    NA    NA       2           TRUE      \n```\n:::\n:::\n\n\nTo set up the tuning pipeline we need:\n\n* Inner cross-validation resampling object.\n* Tuning criterion (e.g. AUC).\n* Tuning method (e.g. random or block search).\n* Tuning terminator (When should we stop tuning? E.g. after $n$ iterations).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\n\ninner3 = mlr3::rsmp(\"cv\", folds = 3L)\nmeasurement =  msr(\"classif.auc\")\ntuner =  mlr3tuning::tnr(\"random_search\") \nterminator = mlr3tuning::trm(\"evals\", n_evals = 5L)\nrf = lrn(\"classif.ranger\", predict_type = \"prob\")\n\nlearner_tuner = AutoTuner$new(learner = rf, \n                              measure = measurement, \n                              tuner = tuner, \n                              terminator = terminator,\n                              search_space = rf_pars,\n                              resampling = inner3)\nprint(learner_tuner)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<AutoTuner:classif.ranger.tuned>\n* Model: list\n* Search Space:\n<ParamSet>\n                        id    class lower upper nlevels        default value\n1:           min.node.size ParamInt     1    30      30 <NoDefault[3]>      \n2:                    mtry ParamInt     1    30      30 <NoDefault[3]>      \n3: regularization.usedepth ParamLgl    NA    NA       2           TRUE      \n* Packages: mlr3, mlr3tuning, mlr3learners, ranger\n* Predict Type: prob\n* Feature Types: logical, integer, numeric, character, factor, ordered\n* Properties: hotstart_backward, importance, multiclass, oob_error,\n  twoclass, weights\n```\n:::\n:::\n\n\nNow we can wrap it normally into the 10-fold cross-validated setup as done previously:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\n\nouter3 = mlr3::rsmp(\"cv\", folds = 3L)\nresult = mlr3::resample(transformed_task, learner_tuner,\n                        resampling = outer3, store_models = TRUE)\n\n# Calculate the average AUC of the holdouts.\nresult$aggregate(measurement)\n```\n:::\n\n\nYeah, we were able to improve the performance!\n\nLet's create the final predictions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npred = sapply(1:3, function(i) result$learners[[i]]$predict(transformed_task,\nrow_ids = (1:nrow(data))[is.na(data$Hazardous)])$data$prob[, \"1\", drop = FALSE])\ndim(pred)\npredictions = apply(pred, 1, mean)\n```\n:::\n\n\n\n### mlr3 - Hyperparameter Tuning with Oversampling\n\nLet's go one step back, maybe you have noticed that our classes are unbalanced:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(data$Hazardous)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  0   1 \n412  88 \n```\n:::\n:::\n\n\nMany machine learning algorithms have problems with unbalanced data because if the imbalance is too strong it is cheaper for the algorithm to focus on only one class (e.g. by predicting only 0s or 1s). You need to keep in mind that machine learning algorithms are greedy and their main focus is to minimize the loss function.\n\nThere are few techniques to correct for imbalance:\n\n* Oversampling (oversample the undersampled class).\n* Undersampling (undersample the oversampled class).\n* SMOTE _Synthetic Minority Over-sampling Technique_ (very briefly, we will use a k-nearest-neighbors classification to create new samples around our undersampled class).\n\nHere, we will use oversampling which we can do by extending our random forest learner:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\n\nrf_over = po(\"classbalancing\", id = \"over\", adjust = \"minor\") %>>% rf\n\n# However rf_over is now a \"graph\",\n# but we can easily transform it back into a learner:\nrf_over_learner = GraphLearner$new(rf_over)\nprint(rf_over_learner)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<GraphLearner:over.classif.ranger>\n* Model: -\n* Parameters: over.ratio=1, over.reference=all, over.adjust=minor,\n  over.shuffle=TRUE, classif.ranger.num.threads=1\n* Packages: mlr3, mlr3pipelines, mlr3learners, ranger\n* Predict Types:  response, [prob]\n* Feature Types: logical, integer, numeric, character, factor, ordered,\n  POSIXct\n* Properties: featureless, hotstart_backward, hotstart_forward,\n  importance, loglik, missings, multiclass, oob_error,\n  selected_features, twoclass, weights\n```\n:::\n:::\n\n\nThe learner has now a new feature space:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_over_learner$param_set\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<ParamSetCollection>\n                                             id    class lower upper nlevels\n 1:                        classif.ranger.alpha ParamDbl  -Inf   Inf     Inf\n 2:       classif.ranger.always.split.variables ParamUty    NA    NA     Inf\n 3:                classif.ranger.class.weights ParamUty    NA    NA     Inf\n 4:                      classif.ranger.holdout ParamLgl    NA    NA       2\n 5:                   classif.ranger.importance ParamFct    NA    NA       4\n 6:                   classif.ranger.keep.inbag ParamLgl    NA    NA       2\n 7:                    classif.ranger.max.depth ParamInt     0   Inf     Inf\n 8:                classif.ranger.min.node.size ParamInt     1   Inf     Inf\n 9:                     classif.ranger.min.prop ParamDbl  -Inf   Inf     Inf\n10:                      classif.ranger.minprop ParamDbl  -Inf   Inf     Inf\n11:                         classif.ranger.mtry ParamInt     1   Inf     Inf\n12:                   classif.ranger.mtry.ratio ParamDbl     0     1     Inf\n13:            classif.ranger.num.random.splits ParamInt     1   Inf     Inf\n14:                  classif.ranger.num.threads ParamInt     1   Inf     Inf\n15:                    classif.ranger.num.trees ParamInt     1   Inf     Inf\n16:                    classif.ranger.oob.error ParamLgl    NA    NA       2\n17:        classif.ranger.regularization.factor ParamUty    NA    NA     Inf\n18:      classif.ranger.regularization.usedepth ParamLgl    NA    NA       2\n19:                      classif.ranger.replace ParamLgl    NA    NA       2\n20:    classif.ranger.respect.unordered.factors ParamFct    NA    NA       3\n21:              classif.ranger.sample.fraction ParamDbl     0     1     Inf\n22:                  classif.ranger.save.memory ParamLgl    NA    NA       2\n23: classif.ranger.scale.permutation.importance ParamLgl    NA    NA       2\n24:                    classif.ranger.se.method ParamFct    NA    NA       2\n25:                         classif.ranger.seed ParamInt  -Inf   Inf     Inf\n26:         classif.ranger.split.select.weights ParamUty    NA    NA     Inf\n27:                    classif.ranger.splitrule ParamFct    NA    NA       3\n28:                      classif.ranger.verbose ParamLgl    NA    NA       2\n29:                 classif.ranger.write.forest ParamLgl    NA    NA       2\n30:                                 over.adjust ParamFct    NA    NA       7\n31:                                  over.ratio ParamDbl     0   Inf     Inf\n32:                              over.reference ParamFct    NA    NA       6\n33:                                over.shuffle ParamLgl    NA    NA       2\n                                             id    class lower upper nlevels\n           default                   parents value\n 1:            0.5                                \n 2: <NoDefault[3]>                                \n 3:                                               \n 4:          FALSE                                \n 5: <NoDefault[3]>                                \n 6:          FALSE                                \n 7:                                               \n 8:                                               \n 9:            0.1                                \n10:            0.1                                \n11: <NoDefault[3]>                                \n12: <NoDefault[3]>                                \n13:              1  classif.ranger.splitrule      \n14:              1                               1\n15:            500                                \n16:           TRUE                                \n17:              1                                \n18:          FALSE                                \n19:           TRUE                                \n20:         ignore                                \n21: <NoDefault[3]>                                \n22:          FALSE                                \n23:          FALSE classif.ranger.importance      \n24:        infjack                                \n25:                                               \n26:                                               \n27:           gini                                \n28:           TRUE                                \n29:           TRUE                                \n30: <NoDefault[3]>                           minor\n31: <NoDefault[3]>                               1\n32: <NoDefault[3]>                             all\n33: <NoDefault[3]>                            TRUE\n           default                   parents value\n```\n:::\n:::\n\n\nWe can also tune the oversampling rate!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\n\nrf_pars_over = \n    paradox::ParamSet$new(\n      list(paradox::ParamInt$new(\"over.ratio\", lower = 1, upper = 7L),\n           paradox::ParamInt$new(\"classif.ranger.min.node.size\",\n                                 lower = 1, upper = 30L),\n           paradox::ParamInt$new(\"classif.ranger.mtry\", lower = 1,\n                                 upper = 30L),\n           paradox::ParamLgl$new(\"classif.ranger.regularization.usedepth\",\n                                 default = TRUE)))\n\ninner3 = mlr3::rsmp(\"cv\", folds = 3L)\nmeasurement =  msr(\"classif.auc\")\ntuner =  mlr3tuning::tnr(\"random_search\") \nterminator = mlr3tuning::trm(\"evals\", n_evals = 5L)\n\nlearner_tuner_over = AutoTuner$new(learner = rf_over_learner, \n                                   measure = measurement, \n                                   tuner = tuner, \n                                   terminator = terminator,\n                                   search_space = rf_pars_over,\n                                   resampling = inner3)\nprint(learner_tuner)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<AutoTuner:classif.ranger.tuned>\n* Model: list\n* Search Space:\n<ParamSet>\n                        id    class lower upper nlevels        default value\n1:           min.node.size ParamInt     1    30      30 <NoDefault[3]>      \n2:                    mtry ParamInt     1    30      30 <NoDefault[3]>      \n3: regularization.usedepth ParamLgl    NA    NA       2           TRUE      \n* Packages: mlr3, mlr3tuning, mlr3learners, ranger\n* Predict Type: prob\n* Feature Types: logical, integer, numeric, character, factor, ordered\n* Properties: hotstart_backward, importance, multiclass, oob_error,\n  twoclass, weights\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\n\nouter3 = mlr3::rsmp(\"cv\", folds = 3L)\nresult = mlr3::resample(transformed_task, learner_tuner_over,\n                        resampling = outer3, store_models = TRUE)\n\n# Calculate the average AUC of the holdouts.\nresult$aggregate(measurement)\n```\n:::\n\n\n5 iterations in the hyperspace is not very much...\n\nLet's create the final predictions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npred = sapply(1:3, function(i) result$learners[[i]]$predict(transformed_task,\nrow_ids = (1:nrow(data))[is.na(data$Hazardous)])$data$prob[, \"1\", drop = FALSE])\ndim(pred)\npredictions = apply(pred, 1, mean)\n```\n:::\n\n```{=html}\n  <hr/>\n  <strong><span style=\"color: #0011AA; font-size:18px;\">Optional bonus task</span></strong><br/>\n```\n\n\nAfter reading the above chapter about the mlr package, try to transfer it to the titanic data set (use the titanic_ml data set, this has already NAs for the values to predict).\nAlternatively, you can also use other data sets from our challenge (e.g. the plant-pollinator data set, see the data set chapter \\@ref(datasets)).\n\n\n```{=html}\n  <details>\n    <summary>\n      <strong><span style=\"color: #0011AA; font-size:18px;\">Solution</span></strong>\n    </summary>\n    <p>\n```\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(EcoData)\nlibrary(tidyverse)\nlibrary(mlr3)\nlibrary(mlr3learners)\nlibrary(mlr3pipelines)\nlibrary(mlr3tuning)\nlibrary(mlr3measures)\nset.seed(123)\n\ndata(titanic_ml)\nstr(titanic_ml)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t1309 obs. of  14 variables:\n $ pclass   : int  2 1 3 3 3 3 3 1 3 1 ...\n $ survived : int  1 1 0 0 0 0 0 1 0 1 ...\n $ name     : chr  \"Sinkkonen, Miss. Anna\" \"Woolner, Mr. Hugh\" \"Sage, Mr. Douglas Bullen\" \"Palsson, Master. Paul Folke\" ...\n $ sex      : Factor w/ 2 levels \"female\",\"male\": 1 2 2 2 2 2 2 1 1 1 ...\n $ age      : num  30 NA NA 6 30.5 38.5 20 53 NA 42 ...\n $ sibsp    : int  0 0 8 3 0 0 0 0 0 0 ...\n $ parch    : int  0 0 2 1 0 0 0 0 0 0 ...\n $ ticket   : Factor w/ 929 levels \"110152\",\"110413\",..: 221 123 779 542 589 873 472 823 588 834 ...\n $ fare     : num  13 35.5 69.55 21.07 8.05 ...\n $ cabin    : Factor w/ 187 levels \"\",\"A10\",\"A11\",..: 1 94 1 1 1 1 1 1 1 1 ...\n $ embarked : Factor w/ 4 levels \"\",\"C\",\"Q\",\"S\": 4 4 4 4 4 4 4 2 4 2 ...\n $ boat     : Factor w/ 28 levels \"\",\"1\",\"10\",\"11\",..: 3 28 1 1 1 1 1 19 1 15 ...\n $ body     : int  NA NA NA NA 50 32 NA NA NA NA ...\n $ home.dest: Factor w/ 370 levels \"\",\"?Havana, Cuba\",..: 121 213 1 1 1 1 322 350 1 1 ...\n```\n:::\n\n```{.r .cell-code}\ndata = titanic_ml %>% select(-name, -ticket, -name, -body)\ndata$pclass = as.factor(data$pclass)\ndata$sex = as.factor(data$sex)\ndata$survived = as.factor(data$survived)\n\n# Change easy things manually:\ndata$embarked[data$embarked == \"\"] = \"S\"  # Fill in \"empty\" values.\ndata$embarked = droplevels(as.factor(data$embarked)) # Remove unused levels (\"\").\ndata$cabin = (data$cabin != \"\") * 1 # Dummy code the availability of a cabin.\ndata$fare[is.na(data$fare)] = mean(data$fare, na.rm = TRUE)\nlevels(data$home.dest)[levels(data$home.dest) == \"\"] = \"unknown\"\nlevels(data$boat)[levels(data$boat) == \"\"] = \"none\"\n\n# Create a classification task.\ntask = TaskClassif$new(id = \"titanic\", backend = data,\n                       target = \"survived\", positive = \"1\")\ntask$missings()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n survived       age      boat     cabin  embarked      fare home.dest     parch \n      655       263         0         0         0         0         0         0 \n   pclass       sex     sibsp \n        0         0         0 \n```\n:::\n\n```{.r .cell-code}\n# Let's create the preprocessing graph.\npreprocessing = po(\"imputeoor\") %>>% po(\"scale\") %>>% po(\"encode\") \n\n# Run the task.\ntransformed_task = preprocessing$train(task)[[1]]\n\ntransformed_task$set_row_roles((1:nrow(data))[is.na(data$survived)], \"holdout\")\n\ncv10 = mlr3::rsmp(\"cv\", folds = 10L)\nrf = lrn(\"classif.ranger\", predict_type = \"prob\")\nmeasurement =  msr(\"classif.auc\")\n\n# result = mlr3::resample(transformed_task, rf,\n#                         resampling = cv10, store_models = TRUE)\n# \n# # Calculate the average AUC of the holdouts.\n# result$aggregate(measurement)\n# \n# pred = sapply(1:10, function(i) result$learners[[i]]$predict(transformed_task,\n# row_ids = (1:nrow(data))[is.na(data$survived)])$data$prob[, \"1\", drop = FALSE])\n# \n# dim(pred)\n# predictions = round(apply(pred, 1, mean))\n# \n# write.csv(data.frame(y = predictions), file = \"submission_RF.csv\")\n```\n:::\n\n```{=html}\n    </p>\n  </details>\n  <br/><hr/>\n```\n",
    "supporting": [
      "A4-MLpipeline_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}